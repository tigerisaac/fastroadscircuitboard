{"version":3,"file":"bar.js","sources":["../../../../../node_modules/drawille-blessed-contrib/index.js","../../../../../node_modules/bresenham/index.js","../../../../../node_modules/gl-matrix/lib/gl-matrix/common.js","../../../../../node_modules/gl-matrix/lib/gl-matrix/mat2.js","../../../../../node_modules/gl-matrix/lib/gl-matrix/mat2d.js","../../../../../node_modules/gl-matrix/lib/gl-matrix/mat3.js","../../../../../node_modules/gl-matrix/lib/gl-matrix/mat4.js","../../../../../node_modules/gl-matrix/lib/gl-matrix/vec3.js","../../../../../node_modules/gl-matrix/lib/gl-matrix/vec4.js","../../../../../node_modules/gl-matrix/lib/gl-matrix/quat.js","../../../../../node_modules/gl-matrix/lib/gl-matrix/quat2.js","../../../../../node_modules/gl-matrix/lib/gl-matrix/vec2.js","../../../../../node_modules/x256/index.js","../../../../../node_modules/drawille-canvas-blessed-contrib/index.js","../../../../../node_modules/blessed-contrib/lib/widget/canvas.js","../../../../../node_modules/ansi-term/index.js","../../../../../node_modules/blessed-contrib/lib/widget/charts/bar.js"],"sourcesContent":["var map = [\n  [0x1, 0x8],\n  [0x2, 0x10],\n  [0x4, 0x20],\n  [0x40, 0x80]\n]\n\nfunction Canvas(width, height) {\n  if(width%2 != 0) {\n    throw new Error('Width must be multiple of 2!');\n  }\n  if(height%4 != 0) {\n    throw new Error('Height must be multiple of 4!');\n  }\n  this.width = width;\n  this.height = height;\n  this.content = new Buffer(width*height/8);\n  this.colors = new Array(width*height/8);\n  this.chars = new Array(width*height/8);\n  this.content.fill(0);\n\n  this.fontFg='normal'\n  this.fontBg='normal'\n  this.color = 'normal'\n}\n\nexports.colors = {\n    black: 0\n  , red: 1\n  , green: 2\n  , yellow: 3\n  , blue: 4\n  , magenta: 5\n  , cyan: 6\n  , white: 7\n  , normal: 9\n};\n\nvar methods = {\n  set: function(coord, mask) {\n    this.content[coord] |= mask;\n    this.colors[coord] = exports.colors[this.color];\n    this.chars[coord] = null\n  },\n  unset: function(coord, mask) {\n    this.content[coord] &= ~mask;\n    this.colors[coord] = null\n    this.chars[coord] = null\n  },\n  toggle: function(coord, mask) {\n    this.content[coord] ^= mask;\n    this.colors[coord] = null\n    this.chars[coord] = null\n  }\n};\n\nObject.keys(methods).forEach(function(method) {\n  Canvas.prototype[method] = function(x, y) {\n    if(!(x >= 0 && x < this.width && y >= 0 && y < this.height)) {\n      return;\n    }\n\n    var coord = this.getCoord(x, y)\n    var mask = map[y%4][x%2];\n    methods[method].call(this, coord, mask);\n  }\n});\n\nCanvas.prototype.getCoord = function (x, y) {\n  x = Math.floor(x);\n  y = Math.floor(y);\n  var nx = Math.floor(x/2);\n  var ny = Math.floor(y/4);\n  var coord = nx + this.width/2*ny;\n  return coord;\n}\n\nCanvas.prototype.clear = function() {\n  this.content.fill(0);\n};\n\nCanvas.prototype.measureText = function(str) {\n  return {width: str.length * 2 + 2}\n};\n\nCanvas.prototype.writeText = function(str, x, y) {\n  var coord = this.getCoord(x, y)\n  for (var i=0; i<str.length; i++) {\n    this.chars[coord+i]=str[i]\n  }\n\n  var bg = exports.colors[this.fontBg]\n  var fg = exports.colors[this.fontFg]\n\n  this.chars[coord] = '\\x1B[3' + fg + 'm' + '\\x1B[4' + bg + 'm' +  this.chars[coord]\n  this.chars[coord+str.length-1] += '\\x1B[39m\\x1B[49m'\n}\n\nCanvas.prototype.frame = function frame(delimiter) {\n  delimiter = delimiter || '\\n';\n  var result = [];\n\n  for(var i = 0, j = 0; i < this.content.length; i++, j++) {\n    if(j == this.width/2) {\n      result.push(delimiter);\n      j = 0;\n    }\n    if (this.chars[i]) {\n      result.push(this.chars[i])\n    }\n    else if(this.content[i] == 0) {\n      result.push(' ');\n    } else {\n      result.push('\\x1B[3' + this.colors[i] + 'm'+String.fromCharCode(0x2800 + this.content[i]) + '\\x1B[39m')\n      //result.push(String.fromCharCode(0x2800 + this.content[i]))\n    }\n  }\n  result.push(delimiter);\n  return result.join('');\n};\n\nmodule.exports = Canvas;\n","module.exports = function(x0, y0, x1, y1, fn) {\n  var arr = [];\n  if(!fn) {\n    fn = function(x, y) { arr.push({ x: x, y: y }); };\n  }\n  var dx = x1 - x0;\n  var dy = y1 - y0;\n  var adx = Math.abs(dx);\n  var ady = Math.abs(dy);\n  var eps = 0;\n  var sx = dx > 0 ? 1 : -1;\n  var sy = dy > 0 ? 1 : -1;\n  if(adx > ady) {\n    for(var x = x0, y = y0; sx < 0 ? x >= x1 : x <= x1; x += sx) {\n      fn(x, y);\n      eps += ady;\n      if((eps<<1) >= adx) {\n        y += sy;\n        eps -= adx;\n      }\n    }\n  } else {\n    for(var x = x0, y = y0; sy < 0 ? y >= y1 : y <= y1; y += sy) {\n      fn(x, y);\n      eps += adx;\n      if((eps<<1) >= ady) {\n        x += sx;\n        eps -= ady;\n      }\n    }\n  }\n  return arr;\n};\n","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\r\n\r\n// Configuration Constants\r\nexport var EPSILON = 0.000001;\r\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\r\nexport var RANDOM = Math.random;\r\n\r\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\r\nexport function setMatrixArrayType(type) {\r\n  ARRAY_TYPE = type;\r\n}\r\n\r\nvar degree = Math.PI / 180;\r\n\r\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\r\nexport function toRadian(a) {\r\n  return a * degree;\r\n}\r\n\r\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\r\n}","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\r\n\r\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {mat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\r\nexport function fromValues(m00, m01, m10, m11) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m10;\r\n  out[3] = m11;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\r\nexport function set(out, m00, m01, m10, m11) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m10;\r\n  out[3] = m11;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache\r\n  // some values\r\n  if (out === a) {\r\n    var a1 = a[1];\r\n    out[1] = a[2];\r\n    out[2] = a1;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[2];\r\n    out[2] = a[1];\r\n    out[3] = a[3];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nexport function invert(out, a) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n\r\n  // Calculate the determinant\r\n  var det = a0 * a3 - a2 * a1;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = a3 * det;\r\n  out[1] = -a1 * det;\r\n  out[2] = -a2 * det;\r\n  out[3] = a0 * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nexport function adjoint(out, a) {\r\n  // Caching this value is nessecary if out == a\r\n  var a0 = a[0];\r\n  out[0] = a[3];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a0;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {mat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  return a[0] * a[3] - a[2] * a[1];\r\n}\r\n\r\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  out[0] = a0 * b0 + a2 * b1;\r\n  out[1] = a1 * b0 + a3 * b1;\r\n  out[2] = a0 * b2 + a2 * b3;\r\n  out[3] = a1 * b2 + a3 * b3;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  out[0] = a0 * c + a2 * s;\r\n  out[1] = a1 * c + a3 * s;\r\n  out[2] = a0 * -s + a2 * c;\r\n  out[3] = a1 * -s + a3 * c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var v0 = v[0],\r\n      v1 = v[1];\r\n  out[0] = a0 * v0;\r\n  out[1] = a1 * v0;\r\n  out[2] = a2 * v1;\r\n  out[3] = a3 * v1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\r\nexport function fromRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = -s;\r\n  out[3] = c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = v[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {mat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {mat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2));\r\n}\r\n\r\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {mat2} L the lower triangular matrix\r\n * @param {mat2} D the diagonal matrix\r\n * @param {mat2} U the upper triangular matrix\r\n * @param {mat2} a the input matrix to factorize\r\n */\r\n\r\nexport function LDU(L, D, U, a) {\r\n  L[2] = a[2] / a[0];\r\n  U[0] = a[0];\r\n  U[1] = a[1];\r\n  U[3] = a[3] - L[2] * U[1];\r\n  return [L, D, U];\r\n}\r\n\r\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n *\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty,\r\n *  0, 0, 1]\r\n * </pre>\r\n * The last row is ignored so the array is shorter and operations are faster.\r\n */\r\n\r\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(6);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[4] = 0;\r\n    out[5] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {mat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(6);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\r\nexport function fromValues(a, b, c, d, tx, ty) {\r\n  var out = new glMatrix.ARRAY_TYPE(6);\r\n  out[0] = a;\r\n  out[1] = b;\r\n  out[2] = c;\r\n  out[3] = d;\r\n  out[4] = tx;\r\n  out[5] = ty;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\r\nexport function set(out, a, b, c, d, tx, ty) {\r\n  out[0] = a;\r\n  out[1] = b;\r\n  out[2] = c;\r\n  out[3] = d;\r\n  out[4] = tx;\r\n  out[5] = ty;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\r\nexport function invert(out, a) {\r\n  var aa = a[0],\r\n      ab = a[1],\r\n      ac = a[2],\r\n      ad = a[3];\r\n  var atx = a[4],\r\n      aty = a[5];\r\n\r\n  var det = aa * ad - ab * ac;\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = ad * det;\r\n  out[1] = -ab * det;\r\n  out[2] = -ac * det;\r\n  out[3] = aa * det;\r\n  out[4] = (ac * aty - ad * atx) * det;\r\n  out[5] = (ab * atx - aa * aty) * det;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {mat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  return a[0] * a[3] - a[1] * a[2];\r\n}\r\n\r\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5];\r\n  out[0] = a0 * b0 + a2 * b1;\r\n  out[1] = a1 * b0 + a3 * b1;\r\n  out[2] = a0 * b2 + a2 * b3;\r\n  out[3] = a1 * b2 + a3 * b3;\r\n  out[4] = a0 * b4 + a2 * b5 + a4;\r\n  out[5] = a1 * b4 + a3 * b5 + a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  out[0] = a0 * c + a2 * s;\r\n  out[1] = a1 * c + a3 * s;\r\n  out[2] = a0 * -s + a2 * c;\r\n  out[3] = a1 * -s + a3 * c;\r\n  out[4] = a4;\r\n  out[5] = a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var v0 = v[0],\r\n      v1 = v[1];\r\n  out[0] = a0 * v0;\r\n  out[1] = a1 * v0;\r\n  out[2] = a2 * v1;\r\n  out[3] = a3 * v1;\r\n  out[4] = a4;\r\n  out[5] = a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\r\nexport function translate(out, a, v) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var v0 = v[0],\r\n      v1 = v[1];\r\n  out[0] = a0;\r\n  out[1] = a1;\r\n  out[2] = a2;\r\n  out[3] = a3;\r\n  out[4] = a0 * v0 + a2 * v1 + a4;\r\n  out[5] = a1 * v0 + a3 * v1 + a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\r\nexport function fromRotation(out, rad) {\r\n  var s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = -s;\r\n  out[3] = c;\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = v[1];\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = v[0];\r\n  out[5] = v[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {mat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {mat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1);\r\n}\r\n\r\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\r\n\r\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[5] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[4] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\r\nexport function fromMat4(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[4];\r\n  out[4] = a[5];\r\n  out[5] = a[6];\r\n  out[6] = a[8];\r\n  out[7] = a[9];\r\n  out[8] = a[10];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\r\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\r\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a12 = a[5];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a01;\r\n    out[5] = a[7];\r\n    out[6] = a02;\r\n    out[7] = a12;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a[1];\r\n    out[4] = a[4];\r\n    out[5] = a[7];\r\n    out[6] = a[2];\r\n    out[7] = a[5];\r\n    out[8] = a[8];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b01 = a22 * a11 - a12 * a21;\r\n  var b11 = -a22 * a10 + a12 * a20;\r\n  var b21 = a21 * a10 - a11 * a20;\r\n\r\n  // Calculate the determinant\r\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = b01 * det;\r\n  out[1] = (-a22 * a01 + a02 * a21) * det;\r\n  out[2] = (a12 * a01 - a02 * a11) * det;\r\n  out[3] = b11 * det;\r\n  out[4] = (a22 * a00 - a02 * a20) * det;\r\n  out[5] = (-a12 * a00 + a02 * a10) * det;\r\n  out[6] = b21 * det;\r\n  out[7] = (-a21 * a00 + a01 * a20) * det;\r\n  out[8] = (a11 * a00 - a01 * a10) * det;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  out[0] = a11 * a22 - a12 * a21;\r\n  out[1] = a02 * a21 - a01 * a22;\r\n  out[2] = a01 * a12 - a02 * a11;\r\n  out[3] = a12 * a20 - a10 * a22;\r\n  out[4] = a00 * a22 - a02 * a20;\r\n  out[5] = a02 * a10 - a00 * a12;\r\n  out[6] = a10 * a21 - a11 * a20;\r\n  out[7] = a01 * a20 - a00 * a21;\r\n  out[8] = a00 * a11 - a01 * a10;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\r\n}\r\n\r\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b00 = b[0],\r\n      b01 = b[1],\r\n      b02 = b[2];\r\n  var b10 = b[3],\r\n      b11 = b[4],\r\n      b12 = b[5];\r\n  var b20 = b[6],\r\n      b21 = b[7],\r\n      b22 = b[8];\r\n\r\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n\r\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n\r\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = a00;\r\n  out[1] = a01;\r\n  out[2] = a02;\r\n\r\n  out[3] = a10;\r\n  out[4] = a11;\r\n  out[5] = a12;\r\n\r\n  out[6] = x * a00 + y * a10 + a20;\r\n  out[7] = x * a01 + y * a11 + a21;\r\n  out[8] = x * a02 + y * a12 + a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c * a00 + s * a10;\r\n  out[1] = c * a01 + s * a11;\r\n  out[2] = c * a02 + s * a12;\r\n\r\n  out[3] = c * a10 - s * a00;\r\n  out[4] = c * a11 - s * a01;\r\n  out[5] = c * a12 - s * a02;\r\n\r\n  out[6] = a20;\r\n  out[7] = a21;\r\n  out[8] = a22;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = x * a[0];\r\n  out[1] = x * a[1];\r\n  out[2] = x * a[2];\r\n\r\n  out[3] = y * a[3];\r\n  out[4] = y * a[4];\r\n  out[5] = y * a[5];\r\n\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = v[0];\r\n  out[7] = v[1];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function fromRotation(out, rad) {\r\n  var s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n\r\n  out[3] = -s;\r\n  out[4] = c;\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n\r\n  out[3] = 0;\r\n  out[4] = v[1];\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\r\nexport function fromMat2d(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = 0;\r\n\r\n  out[3] = a[2];\r\n  out[4] = a[3];\r\n  out[5] = 0;\r\n\r\n  out[6] = a[4];\r\n  out[7] = a[5];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[3] = yx - wz;\r\n  out[6] = zx + wy;\r\n\r\n  out[1] = yx + wz;\r\n  out[4] = 1 - xx - zz;\r\n  out[7] = zy - wx;\r\n\r\n  out[2] = zx - wy;\r\n  out[5] = zy + wx;\r\n  out[8] = 1 - xx - yy;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function normalFromMat4(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\r\nexport function projection(out, width, height) {\r\n  out[0] = 2 / width;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -2 / height;\r\n  out[5] = 0;\r\n  out[6] = -1;\r\n  out[7] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7],\r\n      a8 = a[8];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7],\r\n      b8 = b[8];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\r\n\r\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[5] = 1;\r\n  out[10] = 1;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\r\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\r\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3];\r\n    var a12 = a[6],\r\n        a13 = a[7];\r\n    var a23 = a[11];\r\n\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a01;\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a02;\r\n    out[9] = a12;\r\n    out[11] = a[14];\r\n    out[12] = a03;\r\n    out[13] = a13;\r\n    out[14] = a23;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a[1];\r\n    out[5] = a[5];\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a[2];\r\n    out[9] = a[6];\r\n    out[10] = a[10];\r\n    out[11] = a[14];\r\n    out[12] = a[3];\r\n    out[13] = a[7];\r\n    out[14] = a[11];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\r\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\r\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\r\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\r\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\r\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\r\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\r\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\r\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\r\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\r\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\r\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\r\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\r\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\r\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\r\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n}\r\n\r\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  // Cache only the current line of the second matrix\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[4];b1 = b[5];b2 = b[6];b3 = b[7];\r\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[8];b1 = b[9];b2 = b[10];b3 = b[11];\r\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[12];b1 = b[13];b2 = b[14];b3 = b[15];\r\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n\r\n  if (a === out) {\r\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n  } else {\r\n    a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n    a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n    a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n    out[0] = a00;out[1] = a01;out[2] = a02;out[3] = a03;\r\n    out[4] = a10;out[5] = a11;out[6] = a12;out[7] = a13;\r\n    out[8] = a20;out[9] = a21;out[10] = a22;out[11] = a23;\r\n\r\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\r\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\r\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\r\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n\r\n  out[0] = a[0] * x;\r\n  out[1] = a[1] * x;\r\n  out[2] = a[2] * x;\r\n  out[3] = a[3] * x;\r\n  out[4] = a[4] * y;\r\n  out[5] = a[5] * y;\r\n  out[6] = a[6] * y;\r\n  out[7] = a[7] * y;\r\n  out[8] = a[8] * z;\r\n  out[9] = a[9] * z;\r\n  out[10] = a[10] * z;\r\n  out[11] = a[11] * z;\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function rotate(out, a, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n  var b00 = void 0,\r\n      b01 = void 0,\r\n      b02 = void 0;\r\n  var b10 = void 0,\r\n      b11 = void 0,\r\n      b12 = void 0;\r\n  var b20 = void 0,\r\n      b21 = void 0,\r\n      b22 = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n  a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n  a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n  // Construct the elements of the rotation matrix\r\n  b00 = x * x * t + c;b01 = y * x * t + z * s;b02 = z * x * t - y * s;\r\n  b10 = x * y * t - z * s;b11 = y * y * t + c;b12 = z * y * t + x * s;\r\n  b20 = x * z * t + y * s;b21 = y * z * t - x * s;b22 = z * z * t + c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[4] = a10 * c + a20 * s;\r\n  out[5] = a11 * c + a21 * s;\r\n  out[6] = a12 * c + a22 * s;\r\n  out[7] = a13 * c + a23 * s;\r\n  out[8] = a20 * c - a10 * s;\r\n  out[9] = a21 * c - a11 * s;\r\n  out[10] = a22 * c - a12 * s;\r\n  out[11] = a23 * c - a13 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c - a20 * s;\r\n  out[1] = a01 * c - a21 * s;\r\n  out[2] = a02 * c - a22 * s;\r\n  out[3] = a03 * c - a23 * s;\r\n  out[8] = a00 * s + a20 * c;\r\n  out[9] = a01 * s + a21 * c;\r\n  out[10] = a02 * s + a22 * c;\r\n  out[11] = a03 * s + a23 * c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[8] = a[8];\r\n    out[9] = a[9];\r\n    out[10] = a[10];\r\n    out[11] = a[11];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c + a10 * s;\r\n  out[1] = a01 * c + a11 * s;\r\n  out[2] = a02 * c + a12 * s;\r\n  out[3] = a03 * c + a13 * s;\r\n  out[4] = a10 * c - a00 * s;\r\n  out[5] = a11 * c - a01 * s;\r\n  out[6] = a12 * c - a02 * s;\r\n  out[7] = a13 * c - a03 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = v[1];\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = v[2];\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotation(out, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = x * x * t + c;\r\n  out[1] = y * x * t + z * s;\r\n  out[2] = z * x * t - y * s;\r\n  out[3] = 0;\r\n  out[4] = x * y * t - z * s;\r\n  out[5] = y * y * t + c;\r\n  out[6] = z * y * t + x * s;\r\n  out[7] = 0;\r\n  out[8] = x * z * t + y * s;\r\n  out[9] = y * z * t - x * s;\r\n  out[10] = z * z * t + c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromXRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = c;\r\n  out[6] = s;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = -s;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromYRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = 0;\r\n  out[2] = -s;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = s;\r\n  out[9] = 0;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromZRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -s;\r\n  out[5] = c;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslation(out, q, v) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - (yy + zz);\r\n  out[1] = xy + wz;\r\n  out[2] = xz - wy;\r\n  out[3] = 0;\r\n  out[4] = xy - wz;\r\n  out[5] = 1 - (xx + zz);\r\n  out[6] = yz + wx;\r\n  out[7] = 0;\r\n  out[8] = xz + wy;\r\n  out[9] = yz - wx;\r\n  out[10] = 1 - (xx + yy);\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\r\nexport function fromQuat2(out, a) {\r\n  var translation = new glMatrix.ARRAY_TYPE(3);\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7];\r\n\r\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw;\r\n  //Only scale if it makes sense\r\n  if (magnitude > 0) {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\r\n  } else {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n  }\r\n  fromRotationTranslation(out, a, translation);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getTranslation(out, mat) {\r\n  out[0] = mat[12];\r\n  out[1] = mat[13];\r\n  out[2] = mat[14];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getScaling(out, mat) {\r\n  var m11 = mat[0];\r\n  var m12 = mat[1];\r\n  var m13 = mat[2];\r\n  var m21 = mat[4];\r\n  var m22 = mat[5];\r\n  var m23 = mat[6];\r\n  var m31 = mat[8];\r\n  var m32 = mat[9];\r\n  var m33 = mat[10];\r\n\r\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\r\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\r\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\r\nexport function getRotation(out, mat) {\r\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n  var trace = mat[0] + mat[5] + mat[10];\r\n  var S = 0;\r\n\r\n  if (trace > 0) {\r\n    S = Math.sqrt(trace + 1.0) * 2;\r\n    out[3] = 0.25 * S;\r\n    out[0] = (mat[6] - mat[9]) / S;\r\n    out[1] = (mat[8] - mat[2]) / S;\r\n    out[2] = (mat[1] - mat[4]) / S;\r\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\r\n    out[3] = (mat[6] - mat[9]) / S;\r\n    out[0] = 0.25 * S;\r\n    out[1] = (mat[1] + mat[4]) / S;\r\n    out[2] = (mat[8] + mat[2]) / S;\r\n  } else if (mat[5] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\r\n    out[3] = (mat[8] - mat[2]) / S;\r\n    out[0] = (mat[1] + mat[4]) / S;\r\n    out[1] = 0.25 * S;\r\n    out[2] = (mat[6] + mat[9]) / S;\r\n  } else {\r\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\r\n    out[3] = (mat[1] - mat[4]) / S;\r\n    out[0] = (mat[8] + mat[2]) / S;\r\n    out[1] = (mat[6] + mat[9]) / S;\r\n    out[2] = 0.25 * S;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScale(out, q, v, s) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  out[0] = (1 - (yy + zz)) * sx;\r\n  out[1] = (xy + wz) * sx;\r\n  out[2] = (xz - wy) * sx;\r\n  out[3] = 0;\r\n  out[4] = (xy - wz) * sy;\r\n  out[5] = (1 - (xx + zz)) * sy;\r\n  out[6] = (yz + wx) * sy;\r\n  out[7] = 0;\r\n  out[8] = (xz + wy) * sz;\r\n  out[9] = (yz - wx) * sz;\r\n  out[10] = (1 - (xx + yy)) * sz;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  var ox = o[0];\r\n  var oy = o[1];\r\n  var oz = o[2];\r\n\r\n  var out0 = (1 - (yy + zz)) * sx;\r\n  var out1 = (xy + wz) * sx;\r\n  var out2 = (xz - wy) * sx;\r\n  var out4 = (xy - wz) * sy;\r\n  var out5 = (1 - (xx + zz)) * sy;\r\n  var out6 = (yz + wx) * sy;\r\n  var out8 = (xz + wy) * sz;\r\n  var out9 = (yz - wx) * sz;\r\n  var out10 = (1 - (xx + yy)) * sz;\r\n\r\n  out[0] = out0;\r\n  out[1] = out1;\r\n  out[2] = out2;\r\n  out[3] = 0;\r\n  out[4] = out4;\r\n  out[5] = out5;\r\n  out[6] = out6;\r\n  out[7] = 0;\r\n  out[8] = out8;\r\n  out[9] = out9;\r\n  out[10] = out10;\r\n  out[11] = 0;\r\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\r\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\r\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[1] = yx + wz;\r\n  out[2] = zx - wy;\r\n  out[3] = 0;\r\n\r\n  out[4] = yx - wz;\r\n  out[5] = 1 - xx - zz;\r\n  out[6] = zy + wx;\r\n  out[7] = 0;\r\n\r\n  out[8] = zx + wy;\r\n  out[9] = zy - wx;\r\n  out[10] = 1 - xx - yy;\r\n  out[11] = 0;\r\n\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function frustum(out, left, right, bottom, top, near, far) {\r\n  var rl = 1 / (right - left);\r\n  var tb = 1 / (top - bottom);\r\n  var nf = 1 / (near - far);\r\n  out[0] = near * 2 * rl;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = near * 2 * tb;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = (right + left) * rl;\r\n  out[9] = (top + bottom) * tb;\r\n  out[10] = (far + near) * nf;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = far * near * 2 * nf;\r\n  out[15] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\r\nexport function perspective(out, fovy, aspect, near, far) {\r\n  var f = 1.0 / Math.tan(fovy / 2),\r\n      nf = void 0;\r\n  out[0] = f / aspect;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = f;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[15] = 0;\r\n  if (far != null && far !== Infinity) {\r\n    nf = 1 / (near - far);\r\n    out[10] = (far + near) * nf;\r\n    out[14] = 2 * far * near * nf;\r\n  } else {\r\n    out[10] = -1;\r\n    out[14] = -2 * near;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\r\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\r\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\r\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\r\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\r\n  var xScale = 2.0 / (leftTan + rightTan);\r\n  var yScale = 2.0 / (upTan + downTan);\r\n\r\n  out[0] = xScale;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  out[3] = 0.0;\r\n  out[4] = 0.0;\r\n  out[5] = yScale;\r\n  out[6] = 0.0;\r\n  out[7] = 0.0;\r\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\r\n  out[9] = (upTan - downTan) * yScale * 0.5;\r\n  out[10] = far / (near - far);\r\n  out[11] = -1.0;\r\n  out[12] = 0.0;\r\n  out[13] = 0.0;\r\n  out[14] = far * near / (near - far);\r\n  out[15] = 0.0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function ortho(out, left, right, bottom, top, near, far) {\r\n  var lr = 1 / (left - right);\r\n  var bt = 1 / (bottom - top);\r\n  var nf = 1 / (near - far);\r\n  out[0] = -2 * lr;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = -2 * bt;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 2 * nf;\r\n  out[11] = 0;\r\n  out[12] = (left + right) * lr;\r\n  out[13] = (top + bottom) * bt;\r\n  out[14] = (far + near) * nf;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function lookAt(out, eye, center, up) {\r\n  var x0 = void 0,\r\n      x1 = void 0,\r\n      x2 = void 0,\r\n      y0 = void 0,\r\n      y1 = void 0,\r\n      y2 = void 0,\r\n      z0 = void 0,\r\n      z1 = void 0,\r\n      z2 = void 0,\r\n      len = void 0;\r\n  var eyex = eye[0];\r\n  var eyey = eye[1];\r\n  var eyez = eye[2];\r\n  var upx = up[0];\r\n  var upy = up[1];\r\n  var upz = up[2];\r\n  var centerx = center[0];\r\n  var centery = center[1];\r\n  var centerz = center[2];\r\n\r\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\r\n    return identity(out);\r\n  }\r\n\r\n  z0 = eyex - centerx;\r\n  z1 = eyey - centery;\r\n  z2 = eyez - centerz;\r\n\r\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\r\n  z0 *= len;\r\n  z1 *= len;\r\n  z2 *= len;\r\n\r\n  x0 = upy * z2 - upz * z1;\r\n  x1 = upz * z0 - upx * z2;\r\n  x2 = upx * z1 - upy * z0;\r\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\r\n  if (!len) {\r\n    x0 = 0;\r\n    x1 = 0;\r\n    x2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  y0 = z1 * x2 - z2 * x1;\r\n  y1 = z2 * x0 - z0 * x2;\r\n  y2 = z0 * x1 - z1 * x0;\r\n\r\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\r\n  if (!len) {\r\n    y0 = 0;\r\n    y1 = 0;\r\n    y2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    y0 *= len;\r\n    y1 *= len;\r\n    y2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = y0;\r\n  out[2] = z0;\r\n  out[3] = 0;\r\n  out[4] = x1;\r\n  out[5] = y1;\r\n  out[6] = z1;\r\n  out[7] = 0;\r\n  out[8] = x2;\r\n  out[9] = y2;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\r\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\r\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function targetTo(out, eye, target, up) {\r\n  var eyex = eye[0],\r\n      eyey = eye[1],\r\n      eyez = eye[2],\r\n      upx = up[0],\r\n      upy = up[1],\r\n      upz = up[2];\r\n\r\n  var z0 = eyex - target[0],\r\n      z1 = eyey - target[1],\r\n      z2 = eyez - target[2];\r\n\r\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    z0 *= len;\r\n    z1 *= len;\r\n    z2 *= len;\r\n  }\r\n\r\n  var x0 = upy * z2 - upz * z1,\r\n      x1 = upz * z0 - upx * z2,\r\n      x2 = upx * z1 - upy * z0;\r\n\r\n  len = x0 * x0 + x1 * x1 + x2 * x2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = x1;\r\n  out[2] = x2;\r\n  out[3] = 0;\r\n  out[4] = z1 * x2 - z2 * x1;\r\n  out[5] = z2 * x0 - z0 * x2;\r\n  out[6] = z0 * x1 - z1 * x0;\r\n  out[7] = 0;\r\n  out[8] = z0;\r\n  out[9] = z1;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = eyex;\r\n  out[13] = eyey;\r\n  out[14] = eyez;\r\n  out[15] = 1;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  out[9] = a[9] + b[9];\r\n  out[10] = a[10] + b[10];\r\n  out[11] = a[11] + b[11];\r\n  out[12] = a[12] + b[12];\r\n  out[13] = a[13] + b[13];\r\n  out[14] = a[14] + b[14];\r\n  out[15] = a[15] + b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  out[9] = a[9] - b[9];\r\n  out[10] = a[10] - b[10];\r\n  out[11] = a[11] - b[11];\r\n  out[12] = a[12] - b[12];\r\n  out[13] = a[13] - b[13];\r\n  out[14] = a[14] - b[14];\r\n  out[15] = a[15] - b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  out[9] = a[9] * b;\r\n  out[10] = a[10] * b;\r\n  out[11] = a[11] * b;\r\n  out[12] = a[12] * b;\r\n  out[13] = a[13] * b;\r\n  out[14] = a[14] * b;\r\n  out[15] = a[15] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  out[9] = a[9] + b[9] * scale;\r\n  out[10] = a[10] + b[10] * scale;\r\n  out[11] = a[11] + b[11] * scale;\r\n  out[12] = a[12] + b[12] * scale;\r\n  out[13] = a[13] + b[13] * scale;\r\n  out[14] = a[14] + b[14] * scale;\r\n  out[15] = a[15] + b[15] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7];\r\n  var a8 = a[8],\r\n      a9 = a[9],\r\n      a10 = a[10],\r\n      a11 = a[11];\r\n  var a12 = a[12],\r\n      a13 = a[13],\r\n      a14 = a[14],\r\n      a15 = a[15];\r\n\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  var b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7];\r\n  var b8 = b[8],\r\n      b9 = b[9],\r\n      b10 = b[10],\r\n      b11 = b[11];\r\n  var b12 = b[12],\r\n      b13 = b[13],\r\n      b14 = b[14],\r\n      b15 = b[15];\r\n\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function fromValues(x, y, z) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\nexport function set(out, x, y, z) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var len = x * x + y * y + z * z;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    out[2] = a[2] * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2];\r\n\r\n  out[0] = ay * bz - az * by;\r\n  out[1] = az * bx - ax * bz;\r\n  out[2] = ax * by - ay * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function hermite(out, a, b, c, d, t) {\r\n  var factorTimes2 = t * t;\r\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\r\n  var factor2 = factorTimes2 * (t - 2) + t;\r\n  var factor3 = factorTimes2 * (t - 1);\r\n  var factor4 = factorTimes2 * (3 - 2 * t);\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function bezier(out, a, b, c, d, t) {\r\n  var inverseFactor = 1 - t;\r\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\r\n  var factorTimes2 = t * t;\r\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\r\n  var factor2 = 3 * t * inverseFactorTimesTwo;\r\n  var factor3 = 3 * factorTimes2 * inverseFactor;\r\n  var factor4 = factorTimes2 * t;\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\r\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\r\n\r\n  out[0] = Math.cos(r) * zScale;\r\n  out[1] = Math.sin(r) * zScale;\r\n  out[2] = z * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n  w = w || 1.0;\r\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  out[0] = x * m[0] + y * m[3] + z * m[6];\r\n  out[1] = x * m[1] + y * m[4] + z * m[7];\r\n  out[2] = x * m[2] + y * m[5] + z * m[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  // var qvec = [qx, qy, qz];\r\n  // var uv = vec3.cross([], qvec, a);\r\n  var uvx = qy * z - qz * y,\r\n      uvy = qz * x - qx * z,\r\n      uvz = qx * y - qy * x;\r\n  // var uuv = vec3.cross([], qvec, uv);\r\n  var uuvx = qy * uvz - qz * uvy,\r\n      uuvy = qz * uvx - qx * uvz,\r\n      uuvz = qx * uvy - qy * uvx;\r\n  // vec3.scale(uv, uv, 2 * w);\r\n  var w2 = qw * 2;\r\n  uvx *= w2;\r\n  uvy *= w2;\r\n  uvz *= w2;\r\n  // vec3.scale(uuv, uuv, 2);\r\n  uuvx *= 2;\r\n  uuvy *= 2;\r\n  uuvz *= 2;\r\n  // return vec3.add(out, a, vec3.add(out, uv, uuv));\r\n  out[0] = x + uvx + uuvx;\r\n  out[1] = y + uvy + uuvy;\r\n  out[2] = z + uvz + uuvz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateX(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0];\r\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\r\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateY(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\r\n  r[1] = p[1];\r\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateZ(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\r\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\r\n  r[2] = p[2];\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nexport function angle(a, b) {\r\n  var tempA = fromValues(a[0], a[1], a[2]);\r\n  var tempB = fromValues(b[0], b[1], b[2]);\r\n\r\n  normalize(tempA, tempA);\r\n  normalize(tempB, tempB);\r\n\r\n  var cosine = dot(tempA, tempB);\r\n\r\n  if (cosine > 1.0) {\r\n    return 0;\r\n  } else if (cosine < -1.0) {\r\n    return Math.PI;\r\n  } else {\r\n    return Math.acos(cosine);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 3;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function fromValues(x, y, z, w) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\r\nexport function set(out, x, y, z, w) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  out[3] = a[3] * b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  out[3] = a[3] / b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  out[3] = Math.ceil(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  out[3] = Math.floor(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  out[3] = Math.min(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  out[3] = Math.max(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  out[3] = Math.round(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = -a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  out[3] = 1.0 / a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  var len = x * x + y * y + z * z + w * w;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = x * len;\r\n    out[1] = y * len;\r\n    out[2] = z * len;\r\n    out[3] = w * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  var aw = a[3];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  out[3] = aw + t * (b[3] - aw);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  // Marsaglia, George. Choosing a Point from the Surface of a\r\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\r\n  // http://projecteuclid.org/euclid.aoms/1177692644;\r\n  var v1, v2, v3, v4;\r\n  var s1, s2;\r\n  do {\r\n    v1 = glMatrix.RANDOM() * 2 - 1;\r\n    v2 = glMatrix.RANDOM() * 2 - 1;\r\n    s1 = v1 * v1 + v2 * v2;\r\n  } while (s1 >= 1);\r\n  do {\r\n    v3 = glMatrix.RANDOM() * 2 - 1;\r\n    v4 = glMatrix.RANDOM() * 2 - 1;\r\n    s2 = v3 * v3 + v4 * v4;\r\n  } while (s2 >= 1);\r\n\r\n  var d = Math.sqrt((1 - s1) / s2);\r\n  out[0] = scale * v1;\r\n  out[1] = scale * v2;\r\n  out[2] = scale * v3 * d;\r\n  out[3] = scale * v4 * d;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      w = a[3];\r\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n\r\n  // calculate quat * vec\r\n  var ix = qw * x + qy * z - qz * y;\r\n  var iy = qw * y + qz * x - qx * z;\r\n  var iz = qw * z + qx * y - qy * x;\r\n  var iw = -qx * x - qy * y - qz * z;\r\n\r\n  // calculate result * inverse quat\r\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 4;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];vec[3] = a[i + 3];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];a[i + 3] = vec[3];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\nimport * as mat3 from \"./mat3.js\";\r\nimport * as vec3 from \"./vec3.js\";\r\nimport * as vec4 from \"./vec4.js\";\r\n\r\n/**\r\n * Quaternion\r\n * @module quat\r\n */\r\n\r\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\r\nexport function setAxisAngle(out, axis, rad) {\r\n  rad = rad * 0.5;\r\n  var s = Math.sin(rad);\r\n  out[0] = s * axis[0];\r\n  out[1] = s * axis[1];\r\n  out[2] = s * axis[2];\r\n  out[3] = Math.cos(rad);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\r\nexport function getAxisAngle(out_axis, q) {\r\n  var rad = Math.acos(q[3]) * 2.0;\r\n  var s = Math.sin(rad / 2.0);\r\n  if (s > glMatrix.EPSILON) {\r\n    out_axis[0] = q[0] / s;\r\n    out_axis[1] = q[1] / s;\r\n    out_axis[2] = q[2] / s;\r\n  } else {\r\n    // If s is zero, return any axis (no rotation - axis does not matter)\r\n    out_axis[0] = 1;\r\n    out_axis[1] = 0;\r\n    out_axis[2] = 0;\r\n  }\r\n  return rad;\r\n}\r\n\r\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\r\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\r\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\r\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + aw * bx;\r\n  out[1] = ay * bw + az * bx;\r\n  out[2] = az * bw - ay * bx;\r\n  out[3] = aw * bw - ax * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var by = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw - az * by;\r\n  out[1] = ay * bw + aw * by;\r\n  out[2] = az * bw + ax * by;\r\n  out[3] = aw * bw - ay * by;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bz = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + ay * bz;\r\n  out[1] = ay * bw - ax * bz;\r\n  out[2] = az * bw + aw * bz;\r\n  out[3] = aw * bw - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\r\nexport function calculateW(out, a) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport function slerp(out, a, b, t) {\r\n  // benchmarks:\r\n  //    http://jsperf.com/quaternion-slerp-implementations\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  var omega = void 0,\r\n      cosom = void 0,\r\n      sinom = void 0,\r\n      scale0 = void 0,\r\n      scale1 = void 0;\r\n\r\n  // calc cosine\r\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\r\n  // adjust signs (if necessary)\r\n  if (cosom < 0.0) {\r\n    cosom = -cosom;\r\n    bx = -bx;\r\n    by = -by;\r\n    bz = -bz;\r\n    bw = -bw;\r\n  }\r\n  // calculate coefficients\r\n  if (1.0 - cosom > glMatrix.EPSILON) {\r\n    // standard case (slerp)\r\n    omega = Math.acos(cosom);\r\n    sinom = Math.sin(omega);\r\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n    scale1 = Math.sin(t * omega) / sinom;\r\n  } else {\r\n    // \"from\" and \"to\" quaternions are very close\r\n    //  ... so we can do a linear interpolation\r\n    scale0 = 1.0 - t;\r\n    scale1 = t;\r\n  }\r\n  // calculate final values\r\n  out[0] = scale0 * ax + scale1 * bx;\r\n  out[1] = scale0 * ay + scale1 * by;\r\n  out[2] = scale0 * az + scale1 * bz;\r\n  out[3] = scale0 * aw + scale1 * bw;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function random(out) {\r\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\r\n  // TODO: Calling random 3 times is probably not the fastest solution\r\n  var u1 = glMatrix.RANDOM();\r\n  var u2 = glMatrix.RANDOM();\r\n  var u3 = glMatrix.RANDOM();\r\n\r\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\r\n  var sqrtU1 = Math.sqrt(u1);\r\n\r\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\r\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\r\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\r\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\r\nexport function invert(out, a) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\r\n  var invDot = dot ? 1.0 / dot : 0;\r\n\r\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\r\n  out[0] = -a0 * invDot;\r\n  out[1] = -a1 * invDot;\r\n  out[2] = -a2 * invDot;\r\n  out[3] = a3 * invDot;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\r\nexport function conjugate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromMat3(out, m) {\r\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n  // article \"Quaternion Calculus and Fast Animation\".\r\n  var fTrace = m[0] + m[4] + m[8];\r\n  var fRoot = void 0;\r\n\r\n  if (fTrace > 0.0) {\r\n    // |w| > 1/2, may as well choose w > 1/2\r\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\r\n    out[3] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot; // 1/(4w)\r\n    out[0] = (m[5] - m[7]) * fRoot;\r\n    out[1] = (m[6] - m[2]) * fRoot;\r\n    out[2] = (m[1] - m[3]) * fRoot;\r\n  } else {\r\n    // |w| <= 1/2\r\n    var i = 0;\r\n    if (m[4] > m[0]) i = 1;\r\n    if (m[8] > m[i * 3 + i]) i = 2;\r\n    var j = (i + 1) % 3;\r\n    var k = (i + 2) % 3;\r\n\r\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\r\n    out[i] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot;\r\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\r\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\r\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromEuler(out, x, y, z) {\r\n  var halfToRad = 0.5 * Math.PI / 180.0;\r\n  x *= halfToRad;\r\n  y *= halfToRad;\r\n  z *= halfToRad;\r\n\r\n  var sx = Math.sin(x);\r\n  var cx = Math.cos(x);\r\n  var sy = Math.sin(y);\r\n  var cy = Math.cos(y);\r\n  var sz = Math.sin(z);\r\n  var cz = Math.cos(z);\r\n\r\n  out[0] = sx * cy * cz - cx * sy * sz;\r\n  out[1] = cx * sy * cz + sx * cy * sz;\r\n  out[2] = cx * cy * sz - sx * sy * cz;\r\n  out[3] = cx * cy * cz + sx * sy * sz;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var clone = vec4.clone;\r\n\r\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var fromValues = vec4.fromValues;\r\n\r\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var copy = vec4.copy;\r\n\r\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var set = vec4.set;\r\n\r\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var add = vec4.add;\r\n\r\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var scale = vec4.scale;\r\n\r\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\nexport var dot = vec4.dot;\r\n\r\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var lerp = vec4.lerp;\r\n\r\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport var length = vec4.length;\r\n\r\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\r\nexport var squaredLength = vec4.squaredLength;\r\n\r\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var normalize = vec4.normalize;\r\n\r\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var exactEquals = vec4.exactEquals;\r\n\r\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var equals = vec4.equals;\r\n\r\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\r\nexport var rotationTo = function () {\r\n  var tmpvec3 = vec3.create();\r\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\r\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\r\n\r\n  return function (out, a, b) {\r\n    var dot = vec3.dot(a, b);\r\n    if (dot < -0.999999) {\r\n      vec3.cross(tmpvec3, xUnitVec3, a);\r\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\r\n      vec3.normalize(tmpvec3, tmpvec3);\r\n      setAxisAngle(out, tmpvec3, Math.PI);\r\n      return out;\r\n    } else if (dot > 0.999999) {\r\n      out[0] = 0;\r\n      out[1] = 0;\r\n      out[2] = 0;\r\n      out[3] = 1;\r\n      return out;\r\n    } else {\r\n      vec3.cross(tmpvec3, a, b);\r\n      out[0] = tmpvec3[0];\r\n      out[1] = tmpvec3[1];\r\n      out[2] = tmpvec3[2];\r\n      out[3] = 1 + dot;\r\n      return normalize(out, out);\r\n    }\r\n  };\r\n}();\r\n\r\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport var sqlerp = function () {\r\n  var temp1 = create();\r\n  var temp2 = create();\r\n\r\n  return function (out, a, b, c, d, t) {\r\n    slerp(temp1, a, d, t);\r\n    slerp(temp2, b, c, t);\r\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\r\n\r\n    return out;\r\n  };\r\n}();\r\n\r\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\r\nexport var setAxes = function () {\r\n  var matr = mat3.create();\r\n\r\n  return function (out, view, right, up) {\r\n    matr[0] = right[0];\r\n    matr[3] = right[1];\r\n    matr[6] = right[2];\r\n\r\n    matr[1] = up[0];\r\n    matr[4] = up[1];\r\n    matr[7] = up[2];\r\n\r\n    matr[2] = -view[0];\r\n    matr[5] = -view[1];\r\n    matr[8] = -view[2];\r\n\r\n    return normalize(out, fromMat3(out, matr));\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\nimport * as quat from \"./quat.js\";\r\nimport * as mat4 from \"./mat4.js\";\r\n\r\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\r\n\r\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\r\nexport function create() {\r\n  var dq = new glMatrix.ARRAY_TYPE(8);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    dq[0] = 0;\r\n    dq[1] = 0;\r\n    dq[2] = 0;\r\n    dq[4] = 0;\r\n    dq[5] = 0;\r\n    dq[6] = 0;\r\n    dq[7] = 0;\r\n  }\r\n  dq[3] = 1;\r\n  return dq;\r\n}\r\n\r\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\r\nexport function clone(a) {\r\n  var dq = new glMatrix.ARRAY_TYPE(8);\r\n  dq[0] = a[0];\r\n  dq[1] = a[1];\r\n  dq[2] = a[2];\r\n  dq[3] = a[3];\r\n  dq[4] = a[4];\r\n  dq[5] = a[5];\r\n  dq[6] = a[6];\r\n  dq[7] = a[7];\r\n  return dq;\r\n}\r\n\r\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\r\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\r\n  var dq = new glMatrix.ARRAY_TYPE(8);\r\n  dq[0] = x1;\r\n  dq[1] = y1;\r\n  dq[2] = z1;\r\n  dq[3] = w1;\r\n  dq[4] = x2;\r\n  dq[5] = y2;\r\n  dq[6] = z2;\r\n  dq[7] = w2;\r\n  return dq;\r\n}\r\n\r\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\r\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\r\n  var dq = new glMatrix.ARRAY_TYPE(8);\r\n  dq[0] = x1;\r\n  dq[1] = y1;\r\n  dq[2] = z1;\r\n  dq[3] = w1;\r\n  var ax = x2 * 0.5,\r\n      ay = y2 * 0.5,\r\n      az = z2 * 0.5;\r\n  dq[4] = ax * w1 + ay * z1 - az * y1;\r\n  dq[5] = ay * w1 + az * x1 - ax * z1;\r\n  dq[6] = az * w1 + ax * y1 - ay * x1;\r\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\r\n  return dq;\r\n}\r\n\r\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q quaternion\r\n * @param {vec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\r\nexport function fromRotationTranslation(out, q, t) {\r\n  var ax = t[0] * 0.5,\r\n      ay = t[1] * 0.5,\r\n      az = t[2] * 0.5,\r\n      bx = q[0],\r\n      by = q[1],\r\n      bz = q[2],\r\n      bw = q[3];\r\n  out[0] = bx;\r\n  out[1] = by;\r\n  out[2] = bz;\r\n  out[3] = bw;\r\n  out[4] = ax * bw + ay * bz - az * by;\r\n  out[5] = ay * bw + az * bx - ax * bz;\r\n  out[6] = az * bw + ax * by - ay * bx;\r\n  out[7] = -ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {vec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\r\nexport function fromTranslation(out, t) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = t[0] * 0.5;\r\n  out[5] = t[1] * 0.5;\r\n  out[6] = t[2] * 0.5;\r\n  out[7] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\r\nexport function fromRotation(out, q) {\r\n  out[0] = q[0];\r\n  out[1] = q[1];\r\n  out[2] = q[2];\r\n  out[3] = q[3];\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {mat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\r\nexport function fromMat4(out, a) {\r\n  //TODO Optimize this\r\n  var outer = quat.create();\r\n  mat4.getRotation(outer, a);\r\n  var t = new glMatrix.ARRAY_TYPE(3);\r\n  mat4.getTranslation(t, a);\r\n  fromRotationTranslation(out, outer, t);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\r\n  out[0] = x1;\r\n  out[1] = y1;\r\n  out[2] = z1;\r\n  out[3] = w1;\r\n\r\n  out[4] = x2;\r\n  out[5] = y2;\r\n  out[6] = z2;\r\n  out[7] = w2;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\r\nexport var getReal = quat.copy;\r\n\r\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\r\nexport function getDual(out, a) {\r\n  out[0] = a[4];\r\n  out[1] = a[5];\r\n  out[2] = a[6];\r\n  out[3] = a[7];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nexport var setReal = quat.copy;\r\n\r\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nexport function setDual(out, q) {\r\n  out[4] = q[0];\r\n  out[5] = q[1];\r\n  out[6] = q[2];\r\n  out[7] = q[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {quat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\r\nexport function getTranslation(out, a) {\r\n  var ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7],\r\n      bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3];\r\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var ax1 = a[0],\r\n      ay1 = a[1],\r\n      az1 = a[2],\r\n      aw1 = a[3],\r\n      bx1 = v[0] * 0.5,\r\n      by1 = v[1] * 0.5,\r\n      bz1 = v[2] * 0.5,\r\n      ax2 = a[4],\r\n      ay2 = a[5],\r\n      az2 = a[6],\r\n      aw2 = a[7];\r\n  out[0] = ax1;\r\n  out[1] = ay1;\r\n  out[2] = az1;\r\n  out[3] = aw1;\r\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\r\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\r\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\r\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7],\r\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\r\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\r\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\r\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\r\n  quat.rotateX(out, a, rad);\r\n  bx = out[0];\r\n  by = out[1];\r\n  bz = out[2];\r\n  bw = out[3];\r\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7],\r\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\r\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\r\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\r\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\r\n  quat.rotateY(out, a, rad);\r\n  bx = out[0];\r\n  by = out[1];\r\n  bz = out[2];\r\n  bw = out[3];\r\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7],\r\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\r\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\r\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\r\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\r\n  quat.rotateZ(out, a, rad);\r\n  bx = out[0];\r\n  by = out[1];\r\n  bz = out[2];\r\n  bw = out[3];\r\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {quat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\r\nexport function rotateByQuatAppend(out, a, q) {\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3],\r\n      ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n\r\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\r\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\r\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\r\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\r\n  ax = a[4];\r\n  ay = a[5];\r\n  az = a[6];\r\n  aw = a[7];\r\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\r\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\r\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\r\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat} q quaternion to rotate by\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\r\nexport function rotateByQuatPrepend(out, q, a) {\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3],\r\n      bx = a[0],\r\n      by = a[1],\r\n      bz = a[2],\r\n      bw = a[3];\r\n\r\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\r\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\r\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\r\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\r\n  bx = a[4];\r\n  by = a[5];\r\n  bz = a[6];\r\n  bw = a[7];\r\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\r\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\r\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\r\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {vec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\r\nexport function rotateAroundAxis(out, a, axis, rad) {\r\n  //Special case for rad = 0\r\n  if (Math.abs(rad) < glMatrix.EPSILON) {\r\n    return copy(out, a);\r\n  }\r\n  var axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\r\n\r\n  rad = rad * 0.5;\r\n  var s = Math.sin(rad);\r\n  var bx = s * axis[0] / axisLength;\r\n  var by = s * axis[1] / axisLength;\r\n  var bz = s * axis[2] / axisLength;\r\n  var bw = Math.cos(rad);\r\n\r\n  var ax1 = a[0],\r\n      ay1 = a[1],\r\n      az1 = a[2],\r\n      aw1 = a[3];\r\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n\r\n  var ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7];\r\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\r\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\r\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\r\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var ax0 = a[0],\r\n      ay0 = a[1],\r\n      az0 = a[2],\r\n      aw0 = a[3],\r\n      bx1 = b[4],\r\n      by1 = b[5],\r\n      bz1 = b[6],\r\n      bw1 = b[7],\r\n      ax1 = a[4],\r\n      ay1 = a[5],\r\n      az1 = a[6],\r\n      aw1 = a[7],\r\n      bx0 = b[0],\r\n      by0 = b[1],\r\n      bz0 = b[2],\r\n      bw0 = b[3];\r\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\r\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\r\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\r\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\r\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\r\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\r\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\r\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\r\n *\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\nexport var dot = quat.dot;\r\n\r\n/**\r\n * Performs a linear interpolation between two dual quats's\r\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var mt = 1 - t;\r\n  if (dot(a, b) < 0) t = -t;\r\n\r\n  out[0] = a[0] * mt + b[0] * t;\r\n  out[1] = a[1] * mt + b[1] * t;\r\n  out[2] = a[2] * mt + b[2] * t;\r\n  out[3] = a[3] * mt + b[3] * t;\r\n  out[4] = a[4] * mt + b[4] * t;\r\n  out[5] = a[5] * mt + b[5] * t;\r\n  out[6] = a[6] * mt + b[6] * t;\r\n  out[7] = a[7] * mt + b[7] * t;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\r\nexport function invert(out, a) {\r\n  var sqlen = squaredLength(a);\r\n  out[0] = -a[0] / sqlen;\r\n  out[1] = -a[1] / sqlen;\r\n  out[2] = -a[2] / sqlen;\r\n  out[3] = a[3] / sqlen;\r\n  out[4] = -a[4] / sqlen;\r\n  out[5] = -a[5] / sqlen;\r\n  out[6] = -a[6] / sqlen;\r\n  out[7] = a[7] / sqlen;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\r\nexport function conjugate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a[3];\r\n  out[4] = -a[4];\r\n  out[5] = -a[5];\r\n  out[6] = -a[6];\r\n  out[7] = a[7];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\r\nexport var length = quat.length;\r\n\r\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\r\nexport var squaredLength = quat.squaredLength;\r\n\r\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nexport function normalize(out, a) {\r\n  var magnitude = squaredLength(a);\r\n  if (magnitude > 0) {\r\n    magnitude = Math.sqrt(magnitude);\r\n\r\n    var a0 = a[0] / magnitude;\r\n    var a1 = a[1] / magnitude;\r\n    var a2 = a[2] / magnitude;\r\n    var a3 = a[3] / magnitude;\r\n\r\n    var b0 = a[4];\r\n    var b1 = a[5];\r\n    var b2 = a[6];\r\n    var b3 = a[7];\r\n\r\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\r\n\r\n    out[0] = a0;\r\n    out[1] = a1;\r\n    out[2] = a2;\r\n    out[3] = a3;\r\n\r\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\r\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\r\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\r\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {quat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\r\nexport function str(a) {\r\n  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat2} a the first dual quaternion.\r\n * @param {quat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\r\n}\r\n\r\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat2} a the first dual quat.\r\n * @param {quat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\r\n}","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(2);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(2);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\r\nexport function fromValues(x, y) {\r\n  var out = new glMatrix.ARRAY_TYPE(2);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\r\nexport function set(out, x, y) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0],\r\n      y = b[1] - a[1];\r\n  return Math.sqrt(x * x + y * y);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0],\r\n      y = b[1] - a[1];\r\n  return x * x + y * y;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  return Math.sqrt(x * x + y * y);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  return x * x + y * y;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  var len = x * x + y * y;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n  var z = a[0] * b[1] - a[1] * b[0];\r\n  out[0] = out[1] = 0;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0],\r\n      ay = a[1];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  out[0] = Math.cos(r) * scale;\r\n  out[1] = Math.sin(r) * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat2(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  out[0] = m[0] * x + m[2] * y;\r\n  out[1] = m[1] * x + m[3] * y;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat2d(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  out[0] = m[0] * x + m[2] * y + m[4];\r\n  out[1] = m[1] * x + m[3] * y + m[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  out[0] = m[0] * x + m[3] * y + m[6];\r\n  out[1] = m[1] * x + m[4] * y + m[7];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  out[0] = m[0] * x + m[4] * y + m[12];\r\n  out[1] = m[1] * x + m[5] * y + m[13];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\r\nexport function rotate(out, a, b, c) {\r\n  //Translate point to the origin\r\n  var p0 = a[0] - b[0],\r\n      p1 = a[1] - b[1],\r\n      sinC = Math.sin(c),\r\n      cosC = Math.cos(c);\r\n\r\n  //perform rotation and translate to correct position\r\n  out[0] = p0 * cosC - p1 * sinC + b[0];\r\n  out[1] = p0 * sinC + p1 * cosC + b[1];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nexport function angle(a, b) {\r\n  var x1 = a[0],\r\n      y1 = a[1],\r\n      x2 = b[0],\r\n      y2 = b[1];\r\n\r\n  var len1 = x1 * x1 + y1 * y1;\r\n  if (len1 > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len1 = 1 / Math.sqrt(len1);\r\n  }\r\n\r\n  var len2 = x2 * x2 + y2 * y2;\r\n  if (len2 > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len2 = 1 / Math.sqrt(len2);\r\n  }\r\n\r\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\r\n\r\n  if (cosine > 1.0) {\r\n    return 0;\r\n  } else if (cosine < -1.0) {\r\n    return Math.PI;\r\n  } else {\r\n    return Math.acos(cosine);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1];\r\n  var b0 = b[0],\r\n      b1 = b[1];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 2;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","// colors scraped from\n// http://www.calmar.ws/vim/256-xterm-24bit-rgb-color-chart.html\n// %s/ *\\d\\+ \\+#\\([^ ]\\+\\)/\\1\\r/g\n\nvar colors = require('./colors.json')\n    .map(function (hex) {\n        var r = parseInt(hex.slice(0,2), 16);\n        var g = parseInt(hex.slice(2,4), 16);\n        var b = parseInt(hex.slice(4,6), 16);\n        return [ r, g, b ];\n    })\n;\n\nvar x256 = module.exports = function (r, g, b) {\n    var c = Array.isArray(r) ? r : [ r, g, b ];\n    var best = null;\n    \n    for (var i = 0; i < colors.length; i++) {\n        var d = distance(colors[i], c)\n        if (!best || d <= best.distance) {\n            best = { distance : d, index : i };\n        }\n    }\n    \n    return best.index;\n};\nx256.colors = colors;\n\nfunction distance (a, b) {\n    return Math.sqrt(\n        Math.pow(a[0]-b[0], 2)\n        + Math.pow(a[1]-b[1], 2)\n        + Math.pow(a[2]-b[2], 2)\n    )\n}\n","var Canvas = require('drawille-blessed-contrib');\nvar bresenham = require('bresenham');\nvar glMatrix = require('gl-matrix');\nvar x256 = require('x256');\nvar mat2d = glMatrix.mat2d;\nvar vec2 = glMatrix.vec2;\n\n\nfunction Context(width, height, canvasClass) {\n  canvasClass = canvasClass || Canvas;\n  this._canvas = new canvasClass(width, height);\n  this.canvas = this._canvas; //compatability\n  this._matrix = mat2d.create();\n  this._stack = [];\n  this._currentPath = [];\n}\n\nexports.colors = {\n    black: 0\n  , red: 1\n  , green: 2\n  , yellow: 3\n  , blue: 4\n  , magenta: 5\n  , cyan: 6\n  , white: 7\n};\n\nvar methods = ['save', 'restore', 'scale', 'rotate', 'translate', 'transform', 'setTransform', 'resetTransform', 'createLinearGradient', 'createRadialGradient', 'createPattern', 'clearRect', 'fillRect', 'strokeRect', 'beginPath', 'fill', 'stroke', 'drawFocusIfNeeded', 'clip', 'isPointInPath', 'isPointInStroke', 'fillText', 'strokeText', 'measureText', 'drawImage', 'createImageData', 'getImageData', 'putImageData', 'getContextAttributes', 'setLineDash', 'getLineDash', 'setAlpha', 'setCompositeOperation', 'setLineWidth', 'setLineCap', 'setLineJoin', 'setMiterLimit', 'clearShadow', 'setStrokeColor', 'setFillColor', 'drawImageFromRect', 'setShadow', 'closePath', 'moveTo', 'lineTo', 'quadraticCurveTo', 'bezierCurveTo', 'arcTo', 'rect', 'arc', 'ellipse'];\n\nmethods.forEach(function(name) {\n  Context.prototype[name] = function() {};\n});\n\nfunction getFgCode(color) {\n    // String Value\n    if(typeof color == 'string' && color != 'normal') {\n        return '\\x1B[3' + exports.colors[color] + 'm';\n    }\n    // RGB Value\n    else if (Array.isArray(color) && color.length == 3)\n    {\n        return '\\x1B[38;5;' + x256(color[0],color[1],color[2]) + 'm';\n    }\n    // Number\n    else if (typeof color == 'number')\n    {\n        return '\\x1B[38;5;' + color + 'm';\n    }\n    // Default\n    else\n    {\n        return '\\x1B[39m'\n    }\n}\n\nfunction getBgCode(color) {\n    // String Value\n    if(typeof color == 'string' && color != 'normal') {\n        return '\\x1B[4' + exports.colors[color] + 'm';\n    }\n    // RGB Value\n    else if (Array.isArray(color) && color.length == 3)\n    {\n        return '\\x1B[48;5;' + x256(color[0],color[1],color[2]) + 'm';\n    }\n    // Number\n    else if (typeof color == 'number')\n    {\n        return '\\x1B[48;5;' + color + 'm';\n    }\n    // Default\n    else\n    {\n        return '\\x1B[49m'\n    }\n}\n\nfunction br(p1, p2) {\n  return bresenham(\n    Math.floor(p1[0]),\n    Math.floor(p1[1]),\n    Math.floor(p2[0]),\n    Math.floor(p2[1])\n  );\n}\n\nfunction triangle(pa, pb, pc, f) {\n  var a = br(pb, pc);\n  var b = br(pa, pc);\n  var c = br(pa, pb);\n  var s = a.concat(b).concat(c).sort(function(a, b) {\n    if(a.y == b.y) {\n      return a.x - b.x;\n    }\n    return a.y-b.y;\n  });\n  for(var i = 0; i < s.length - 1; i++) {\n    var cur = s[i];\n    var nex = s[i+1];\n    if(cur.y == nex.y) {\n      for(var j = cur.x; j <= nex.x; j++) {\n        f(j, cur.y);\n      }\n    } else {\n      f(cur.x, cur.y);\n    }\n  }\n}\n\nfunction quad(m, x, y, w, h, f) {\n  var p1 = vec2.transformMat2d(vec2.create(), vec2.fromValues(x, y), m);\n  var p2 = vec2.transformMat2d(vec2.create(), vec2.fromValues(x+w, y), m);\n  var p3 = vec2.transformMat2d(vec2.create(), vec2.fromValues(x, y+h), m);\n  var p4 = vec2.transformMat2d(vec2.create(), vec2.fromValues(x+w, y+h), m);\n  triangle(p1, p2, p3, f);\n  triangle(p3, p2, p4, f);\n};\n\nContext.prototype.__defineSetter__('fillStyle', function(val){\n  this._canvas.fontFg = val\n});\n\nContext.prototype.__defineSetter__('strokeStyle', function(val){\n  this._canvas.color = val\n  //this._canvas.fontBg = val\n});\n\nContext.prototype.clearRect = function(x, y, w, h) {\n  quad(this._matrix, x, y, w, h, this._canvas.unset.bind(this._canvas));\n};\n\nContext.prototype.fillRect = function(x, y, w, h) {\n  quad(this._matrix, x, y, w, h, this._canvas.set.bind(this._canvas));\n};\n\nContext.prototype.save = function save() {\n  this._stack.push(mat2d.clone(mat2d.create(), this._matrix));\n};\n\nContext.prototype.restore = function restore() {\n  var top = this._stack.pop();\n  if(!top) return;\n  this._matrix = top;\n};\n\nContext.prototype.translate = function translate(x, y) {\n  mat2d.translate(this._matrix, this._matrix, vec2.fromValues(x, y));\n};\n\nContext.prototype.rotate = function rotate(a) {\n  mat2d.rotate(this._matrix, this._matrix, a/180*Math.PI);\n};\n\nContext.prototype.scale = function scale(x, y) {\n  mat2d.scale(this._matrix, this._matrix, vec2.fromValues(x, y));\n};\n\nContext.prototype.beginPath = function beginPath() {\n  this._currentPath = [];\n};\n\nContext.prototype.closePath = function closePath() {\n  /*\n  this._currentPath.push({\n    point: this._currentPath[0].point,\n    stroke: false\n  });*/\n};\n\nContext.prototype.stroke = function stroke() {\n\n  if (this.lineWidth==0) return;\n\n  var set = this._canvas.set.bind(this._canvas);\n  for(var i = 0; i < this._currentPath.length - 1; i++) {\n    var cur = this._currentPath[i];\n    var nex = this._currentPath[i+1];\n    if(nex.stroke) {\n      bresenham(cur.point[0], cur.point[1], nex.point[0], nex.point[1], set);\n    }\n  }\n};\n\nfunction addPoint(m, p, x, y, s) {\n  var v = vec2.transformMat2d(vec2.create(), vec2.fromValues(x, y), m);\n  p.push({\n    point: [Math.floor(v[0]), Math.floor(v[1])],\n    stroke: s\n  });\n}\n\nContext.prototype.moveTo = function moveTo(x, y) {\n  addPoint(this._matrix, this._currentPath, x, y, false);\n};\n\nContext.prototype.lineTo = function lineTo(x, y) {\n  addPoint(this._matrix, this._currentPath, x, y, true);\n};\n\nContext.prototype.fillText = function lineTo(str, x, y) {\n  var v = vec2.transformMat2d(vec2.create(), vec2.fromValues(x, y), this._matrix);\n  this._canvas.writeText(str, Math.floor(v[0]), Math.floor(v[1]))\n};\n\nContext.prototype.measureText = function measureText(str) {\n  return this._canvas.measureText(str)\n};\n\nCanvas.prototype.writeText = function(str, x, y) {\n  var coord = this.getCoord(x, y)\n  for (var i=0; i<str.length; i++) {\n    this.chars[coord+i]=str[i]\n  }\n\n  var bg = getBgCode(this.fontBg);\n  var fg = getFgCode(this.fontFg);\n\n  this.chars[coord] = fg + bg + this.chars[coord]\n  this.chars[coord+str.length-1] += '\\x1B[39m\\x1B[49m'\n}\n\nvar map = [\n  [0x1, 0x8],\n  [0x2, 0x10],\n  [0x4, 0x20],\n  [0x40, 0x80]\n]\n\nCanvas.prototype.set = function(x,y) {\n    if(!(x >= 0 && x < this.width && y >= 0 && y < this.height)) {\n      return;\n    }\n\n    var coord = this.getCoord(x, y)\n    var mask = map[y%4][x%2];\n\n    this.content[coord] |= mask;\n    this.colors[coord] = getFgCode(this.color);\n    this.chars[coord] = null\n}\n\n\nCanvas.prototype.frame = function frame(delimiter) {\n  delimiter = delimiter || '\\n';\n  var result = [];\n\n  for(var i = 0, j = 0; i < this.content.length; i++, j++) {\n    if(j == this.width/2) {\n      result.push(delimiter);\n      j = 0;\n    }\n    if (this.chars[i]) {\n      result.push(this.chars[i])\n    }\n    else if(this.content[i] == 0) {\n      result.push(' ');\n    } else {\n        var colorCode = this.colors[i];\n        result.push(colorCode+String.fromCharCode(0x2800 + this.content[i]) + '\\x1B[39m')\n      //result.push(String.fromCharCode(0x2800 + this.content[i]))\n    }\n  }\n  result.push(delimiter);\n  return result.join('');\n};\n\nmodule.exports = Context;\nmodule.exports.Canvas = function(width, height, canvasClass) {\n\n  var ctx;\n\n  this.getContext = function() {\n   return ctx = ctx || new Context(width, height, canvasClass)\n }\n\n}\n","'use strict';\nvar Box = require('blessed/lib/widgets/box')\n  , InnerCanvas = require('drawille-canvas-blessed-contrib').Canvas\n  , Node = require('blessed/lib/widgets/node');\n\nfunction Canvas(options, canvasType) {\n\n  var self = this;\n\n  if (!(this instanceof Node)) {\n    return new Canvas(options);\n  }\n\n  options = options || {};\n  this.options = options;\n  Box.call(this, options);\n\n  this.on('attach', function() {\n    self.calcSize();\n\n    self._canvas = new InnerCanvas(this.canvasSize.width, this.canvasSize.height, canvasType);\n    self.ctx = self._canvas.getContext();\n\n    if (self.options.data) {\n      self.setData(self.options.data);\n    }\n  });\n}\n\nCanvas.prototype = Object.create(Box.prototype);\n\nCanvas.prototype.type = 'canvas';\n\nCanvas.prototype.calcSize = function() {\n  this.canvasSize = {width: this.width*2-12, height: this.height*4};\n};\n\nCanvas.prototype.clear = function() {\n  this.ctx.clearRect(0, 0, this.canvasSize.width, this.canvasSize.height);\n};\n\nCanvas.prototype.render = function() {\n\n  this.clearPos(true);\n  var inner = this.ctx._canvas.frame();\n  this.setContent(inner);\n  return this._render();\n};\n\nmodule.exports = Canvas;\n","var x256 = require('x256');\n\nfunction AnsiTerminal(width, height) {\n  this.width = width;\n  this.height = height;\n  this.clear()\n\n  this.fontFg='normal'\n  this.fontBg='normal'\n  this.color='normal'\n}\n\nexports.colors = {\n    black: 0\n  , red: 1\n  , green: 2\n  , yellow: 3\n  , blue: 4\n  , magenta: 5\n  , cyan: 6\n  , white: 7\n};\n\nfunction getFgCode(color) {\n    // String Value\n    if(typeof color == 'string' && color != 'normal') {\n        return '\\x1B[3' + exports.colors[color] + 'm';\n    }\n    // RGB Value\n    else if (Array.isArray(color) && color.length == 3)\n    {\n        return '\\x1B[38;5;' + x256(color[0],color[1],color[2]) + 'm';\n    }\n    // Number\n    else if (typeof color == 'number')\n    {\n        return '\\x1B[38;5;' + color + 'm';\n    }\n    // Default\n    else\n    {\n        return '\\x1B[39m'\n    }\n}\n\nfunction getBgCode(color) {\n    // String Value\n    if(typeof color == 'string' && color != 'normal') {\n        return '\\x1B[4' + exports.colors[color] + 'm';\n    }\n    // RGB Value\n    else if (Array.isArray(color) && color.length == 3)\n    {\n        return '\\x1B[48;5;' + x256(color[0],color[1],color[2]) + 'm';\n    }\n    // Number\n    else if (typeof color == 'number')\n    {\n        return '\\x1B[48;5;' + color + 'm';\n    }\n    // Default\n    else\n    {\n        return '\\x1B[49m'\n    }\n}\n\nvar methods = {\n  set: function(coord) {\n    var color = getBgCode(this.color);\n    this.content[coord] = color + ' \\x1B[49m';\n  },\n  unset: function(coord) {\n    this.content[coord] = null;\n  },\n  toggle: function(coord) {\n    this.content[coord] == this.content[coord]==null?'p':null;\n  }\n};\n\nObject.keys(methods).forEach(function(method) {\n  AnsiTerminal.prototype[method] = function(x, y) {\n    if(!(x >= 0 && x < this.width && y >= 0 && y < this.height)) {\n      return;\n    }\n    var coord = this.getCoord(x, y)\n    methods[method].call(this, coord);\n  }\n});\n\nAnsiTerminal.prototype.getCoord = function(x, y) {\n    x = Math.floor(x);\n    y = Math.floor(y);\n    return x + this.width*y;\n}\n\nAnsiTerminal.prototype.clear = function() {\n  this.content = new Array(this.width*this.height);\n};\n\nAnsiTerminal.prototype.measureText = function(str) {\n  return {width: str.length * 1}\n};\n\nAnsiTerminal.prototype.writeText = function(str, x, y) {\n  //console.log(str + \": \" + x + \",\" + y)\n  var coord = this.getCoord(x, y)\n  for (var i=0; i<str.length; i++) {\n    this.content[coord+i]=str[i]\n  }\n\n  var bg = getBgCode(this.color);\n  var fg = getFgCode(this.fontFg);\n\n  this.content[coord] = fg + bg +  this.content[coord]\n  this.content[coord+str.length-1] += '\\x1B[39m\\x1B[49m'\n\n}\n\nAnsiTerminal.prototype.frame = function frame(delimiter) {\n  delimiter = delimiter || '\\n';\n  var result = [];\n  for(var i = 0, j = 0; i < this.content.length; i++, j++) {\n    if(j == this.width) {\n      result.push(delimiter);\n      j = 0;\n    }\n\n    if(this.content[i] == null) {\n      result.push(' ');\n    } else {\n      result.push(this.content[i])\n    }\n  }\n  result.push(delimiter);\n  return result.join('');\n};\n\n\n\nmodule.exports = AnsiTerminal;\n","'use strict';\nvar Node = require('blessed/lib/widgets/node')\n  , Canvas = require('../canvas');\n\nfunction Bar(options) {\n  if (!(this instanceof Node)) {\n    return new Bar(options);\n  }\n\n  var self = this;\n\n  Canvas.call(this, options, require('ansi-term'));\n\n  this.options.barWidth = this.options.barWidth || 6;\n  this.options.barSpacing = this.options.barSpacing || 9;\n\n  if ((this.options.barSpacing - this.options.barWidth) < 3) {\n    this.options.barSpacing = this.options.barWidth + 3;\n  }\n\n  this.options.xOffset = this.options.xOffset==null? 5 : this.options.xOffset;\n  if (this.options.showText === false)\n    this.options.showText = false;\n  else\n    this.options.showText = true;\n\n  this.on('attach', function() {\n    if (self.options.data) {\n      self.setData(self.options.data);\n    }\n  });\n}\n\nBar.prototype = Object.create(Canvas.prototype);\n\nBar.prototype.calcSize = function() {\n  this.canvasSize = {width: this.width-2, height: this.height};\n};\n\nBar.prototype.setData = function(bar) {\n\n  if (!this.ctx) {\n    throw 'error: canvas context does not exist. setData() for bar charts must be called after the chart has been added to the screen via screen.append()';\n  }\n\n  this.clear();\n\n  var c = this.ctx;\n  var max = Math.max.apply(Math, bar.data);\n  max = Math.max(max, this.options.maxHeight);\n  var x = this.options.xOffset;\n  var barY = this.canvasSize.height - 5;\n\n  for (var i = 0; i < bar.data.length; i++) {\n    var h = Math.round(barY * (bar.data[i] / max));\n\n    if (bar.data[i] > 0) {\n      c.strokeStyle = 'blue';\n      if (this.options.barBgColor)\n        c.strokeStyle = this.options.barBgColor;\n      c.fillRect(x, barY - h + 1, this.options.barWidth, h);\n    } else {\n      c.strokeStyle = 'normal';\n    }\n\n    c.fillStyle = 'white';\n    if (this.options.barFgColor)\n      c.fillStyle = this.options.barFgColor;\n    if (this.options.showText)\n      c.fillText(bar.data[i].toString(), x + 1, this.canvasSize.height - 4);\n    c.strokeStyle = 'normal';\n    c.fillStyle = 'white';\n    if (this.options.labelColor)\n      c.fillStyle = this.options.labelColor;\n    if (this.options.showText)\n      c.fillText(bar.titles[i], x + 1, this.canvasSize.height - 3);\n\n    x += this.options.barSpacing;\n  }\n};\n\nBar.prototype.getOptionsPrototype = function() {\n  return  {  barWidth: 1\n    ,  barSpacing: 1\n    ,  xOffset: 1\n    ,  maxHeight: 1\n    ,  data: { titles: ['s']\n      , data: [1]}\n  };\n};\n\nBar.prototype.type = 'bar';\n\nmodule.exports = Bar;\n"],"names":["map","Canvas","width","height","Error","content","Buffer","colors","Array","chars","fill","fontFg","fontBg","color","exports","black","red","green","yellow","blue","magenta","cyan","white","normal","methods","set","coord","mask","unset","toggle","Object","keys","forEach","method","prototype","x","y","getCoord","call","Math","floor","nx","ny","clear","measureText","str","length","writeText","i","bg","fg","frame","delimiter","result","j","push","String","fromCharCode","join","module","bresenham","x0","y0","x1","y1","fn","arr","dx","dy","adx","abs","ady","eps","sx","sy","EPSILON","ARRAY_TYPE","Float32Array","RANDOM","random","setMatrixArrayType","type","degree","PI","toRadian","a","equals","b","max","create","out","glMatrix","clone","copy","identity","fromValues","m00","m01","m10","m11","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","multiply","b0","b1","b2","b3","rotate","rad","s","sin","c","cos","scale","v","v0","v1","fromRotation","fromScaling","frob","sqrt","pow","LDU","L","D","U","add","subtract","exactEquals","multiplyScalar","multiplyScalarAndAdd","mul","sub","d","tx","ty","aa","ab","ac","ad","atx","aty","a4","a5","b4","b5","translate","fromTranslation","fromMat4","m02","m12","m20","m21","m22","a01","a02","a12","a00","a10","a11","a20","a21","a22","b01","b11","b21","b00","b02","b10","b12","b20","b22","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","a6","a7","a8","b6","b7","b8","m03","m13","m23","m30","m31","m32","m33","axis","len","t","rotateX","rotateY","rotateZ","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","S","fromRotationTranslationScale","sz","fromRotationTranslationScaleOrigin","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","target","a9","a14","a15","b9","b13","b14","b15","divide","ceil","min","round","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","dot","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","r","zScale","transformMat4","m","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","p","angle","tempA","tempB","cosine","acos","div","dist","sqrDist","sqrLen","vec","stride","offset","count","arg","l","v2","v3","v4","s1","s2","ix","iy","iz","iw","setAxisAngle","getAxisAngle","out_axis","calculateW","slerp","omega","cosom","sinom","scale0","scale1","u1","u2","u3","sqrt1MinusU1","sqrtU1","invDot","conjugate","fromMat3","fTrace","fRoot","k","fromEuler","halfToRad","cx","cy","cz","vec4","rotationTo","tmpvec3","vec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","mat3","view","dq","w1","fromRotationTranslationValues","outer","quat","mat4","getReal","getDual","setReal","setDual","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","rotateByQuatAppend","rotateByQuatPrepend","rotateAroundAxis","axisLength","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","mt","sqlen","a_dot_b","transformMat2","transformMat2d","p0","p1","sinC","cosC","len1","len2","require$$0","hex","parseInt","slice","g","x256","x256Module","isArray","best","index","require$$1","require$$2","require$$3","mat2d","vec2","Context","canvasClass","_canvas","canvas","_matrix","_stack","_currentPath","name","getFgCode","getBgCode","br","p2","triangle","pa","pb","pc","concat","sort","cur","nex","quad","h","p3","p4","__defineSetter__","val","clearRect","bind","fillRect","save","restore","pop","beginPath","closePath","stroke","lineWidth","point","addPoint","moveTo","lineTo","fillText","colorCode","ctx","getContext","Box","InnerCanvas","Node","options","canvasType","self","on","calcSize","canvasSize","data","setData","render","clearPos","inner","setContent","_render","AnsiTerminal","Bar","barWidth","barSpacing","xOffset","showText","bar","apply","maxHeight","barY","strokeStyle","barBgColor","fillStyle","barFgColor","toString","labelColor","titles","getOptionsPrototype"],"mappings":"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C,GAAG,GAAG;AACvE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAIO,OAAK,GAAGqU,OAAU;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAIlU,YAAU,GAAGkU,YAAe;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAIpU,MAAI,GAAGoU,MAAS;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAIxY,KAAG,GAAGwY,KAAQ;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAI5R,KAAG,GAAG4R,KAAQ;;AAEzB;AACA;AACA;AACA;AACO,IAAIvR,KAAG,GAAG7B,UAAQ;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAIW,OAAK,GAAGyS,OAAU;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAIhF,KAAG,GAAGgF,KAAQ;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAI9E,MAAI,GAAG8E,MAAS;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACO,IAAInX,QAAM,GAAGmX,QAAW;;AAE/B;AACA;AACA;AACA;AACO,IAAI/L,KAAG,GAAGpL,QAAM;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAI+R,eAAa,GAAGoF,eAAkB;;AAE7C;AACA;AACA;AACA;AACO,IAAI1C,QAAM,GAAG1C,eAAa;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAIG,WAAS,GAAGiF,WAAc;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAI1R,aAAW,GAAG0R,aAAgB;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAI3U,QAAM,GAAG2U,QAAW;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAIC,UAAU,GAAG,YAAY;AAClC,EAAA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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],"debugId":"157dfae0-414e-4b7a-a4fa-4b543753e318"}