{"version":3,"file":"picomatch.js","sources":["../../node_modules/picomatch/lib/constants.js","../../node_modules/picomatch/lib/utils.js","../../node_modules/picomatch/lib/scan.js","../../node_modules/picomatch/lib/parse.js","../../node_modules/picomatch/lib/picomatch.js","../../node_modules/picomatch/index.js"],"sourcesContent":["'use strict';\n\nconst WIN_SLASH = '\\\\\\\\/';\nconst WIN_NO_SLASH = `[^${WIN_SLASH}]`;\n\n/**\n * Posix glob regex\n */\n\nconst DOT_LITERAL = '\\\\.';\nconst PLUS_LITERAL = '\\\\+';\nconst QMARK_LITERAL = '\\\\?';\nconst SLASH_LITERAL = '\\\\/';\nconst ONE_CHAR = '(?=.)';\nconst QMARK = '[^/]';\nconst END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;\nconst START_ANCHOR = `(?:^|${SLASH_LITERAL})`;\nconst DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;\nconst NO_DOT = `(?!${DOT_LITERAL})`;\nconst NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;\nconst NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;\nconst NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;\nconst QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;\nconst STAR = `${QMARK}*?`;\nconst SEP = '/';\n\nconst POSIX_CHARS = {\n  DOT_LITERAL,\n  PLUS_LITERAL,\n  QMARK_LITERAL,\n  SLASH_LITERAL,\n  ONE_CHAR,\n  QMARK,\n  END_ANCHOR,\n  DOTS_SLASH,\n  NO_DOT,\n  NO_DOTS,\n  NO_DOT_SLASH,\n  NO_DOTS_SLASH,\n  QMARK_NO_DOT,\n  STAR,\n  START_ANCHOR,\n  SEP\n};\n\n/**\n * Windows glob regex\n */\n\nconst WINDOWS_CHARS = {\n  ...POSIX_CHARS,\n\n  SLASH_LITERAL: `[${WIN_SLASH}]`,\n  QMARK: WIN_NO_SLASH,\n  STAR: `${WIN_NO_SLASH}*?`,\n  DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,\n  NO_DOT: `(?!${DOT_LITERAL})`,\n  NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,\n  NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,\n  NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,\n  QMARK_NO_DOT: `[^.${WIN_SLASH}]`,\n  START_ANCHOR: `(?:^|[${WIN_SLASH}])`,\n  END_ANCHOR: `(?:[${WIN_SLASH}]|$)`,\n  SEP: '\\\\'\n};\n\n/**\n * POSIX Bracket Regex\n */\n\nconst POSIX_REGEX_SOURCE = {\n  alnum: 'a-zA-Z0-9',\n  alpha: 'a-zA-Z',\n  ascii: '\\\\x00-\\\\x7F',\n  blank: ' \\\\t',\n  cntrl: '\\\\x00-\\\\x1F\\\\x7F',\n  digit: '0-9',\n  graph: '\\\\x21-\\\\x7E',\n  lower: 'a-z',\n  print: '\\\\x20-\\\\x7E ',\n  punct: '\\\\-!\"#$%&\\'()\\\\*+,./:;<=>?@[\\\\]^_`{|}~',\n  space: ' \\\\t\\\\r\\\\n\\\\v\\\\f',\n  upper: 'A-Z',\n  word: 'A-Za-z0-9_',\n  xdigit: 'A-Fa-f0-9'\n};\n\nmodule.exports = {\n  MAX_LENGTH: 1024 * 64,\n  POSIX_REGEX_SOURCE,\n\n  // regular expressions\n  REGEX_BACKSLASH: /\\\\(?![*+?^${}(|)[\\]])/g,\n  REGEX_NON_SPECIAL_CHARS: /^[^@![\\].,$*+?^{}()|\\\\/]+/,\n  REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\\]]/,\n  REGEX_SPECIAL_CHARS_BACKREF: /(\\\\?)((\\W)(\\3*))/g,\n  REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\\]])/g,\n  REGEX_REMOVE_BACKSLASH: /(?:\\[.*?[^\\\\]\\]|\\\\(?=.))/g,\n\n  // Replace globs with equivalent patterns to reduce parsing time.\n  REPLACEMENTS: {\n    '***': '*',\n    '**/**': '**',\n    '**/**/**': '**'\n  },\n\n  // Digits\n  CHAR_0: 48, /* 0 */\n  CHAR_9: 57, /* 9 */\n\n  // Alphabet chars.\n  CHAR_UPPERCASE_A: 65, /* A */\n  CHAR_LOWERCASE_A: 97, /* a */\n  CHAR_UPPERCASE_Z: 90, /* Z */\n  CHAR_LOWERCASE_Z: 122, /* z */\n\n  CHAR_LEFT_PARENTHESES: 40, /* ( */\n  CHAR_RIGHT_PARENTHESES: 41, /* ) */\n\n  CHAR_ASTERISK: 42, /* * */\n\n  // Non-alphabetic chars.\n  CHAR_AMPERSAND: 38, /* & */\n  CHAR_AT: 64, /* @ */\n  CHAR_BACKWARD_SLASH: 92, /* \\ */\n  CHAR_CARRIAGE_RETURN: 13, /* \\r */\n  CHAR_CIRCUMFLEX_ACCENT: 94, /* ^ */\n  CHAR_COLON: 58, /* : */\n  CHAR_COMMA: 44, /* , */\n  CHAR_DOT: 46, /* . */\n  CHAR_DOUBLE_QUOTE: 34, /* \" */\n  CHAR_EQUAL: 61, /* = */\n  CHAR_EXCLAMATION_MARK: 33, /* ! */\n  CHAR_FORM_FEED: 12, /* \\f */\n  CHAR_FORWARD_SLASH: 47, /* / */\n  CHAR_GRAVE_ACCENT: 96, /* ` */\n  CHAR_HASH: 35, /* # */\n  CHAR_HYPHEN_MINUS: 45, /* - */\n  CHAR_LEFT_ANGLE_BRACKET: 60, /* < */\n  CHAR_LEFT_CURLY_BRACE: 123, /* { */\n  CHAR_LEFT_SQUARE_BRACKET: 91, /* [ */\n  CHAR_LINE_FEED: 10, /* \\n */\n  CHAR_NO_BREAK_SPACE: 160, /* \\u00A0 */\n  CHAR_PERCENT: 37, /* % */\n  CHAR_PLUS: 43, /* + */\n  CHAR_QUESTION_MARK: 63, /* ? */\n  CHAR_RIGHT_ANGLE_BRACKET: 62, /* > */\n  CHAR_RIGHT_CURLY_BRACE: 125, /* } */\n  CHAR_RIGHT_SQUARE_BRACKET: 93, /* ] */\n  CHAR_SEMICOLON: 59, /* ; */\n  CHAR_SINGLE_QUOTE: 39, /* ' */\n  CHAR_SPACE: 32, /*   */\n  CHAR_TAB: 9, /* \\t */\n  CHAR_UNDERSCORE: 95, /* _ */\n  CHAR_VERTICAL_LINE: 124, /* | */\n  CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279, /* \\uFEFF */\n\n  /**\n   * Create EXTGLOB_CHARS\n   */\n\n  extglobChars(chars) {\n    return {\n      '!': { type: 'negate', open: '(?:(?!(?:', close: `))${chars.STAR})` },\n      '?': { type: 'qmark', open: '(?:', close: ')?' },\n      '+': { type: 'plus', open: '(?:', close: ')+' },\n      '*': { type: 'star', open: '(?:', close: ')*' },\n      '@': { type: 'at', open: '(?:', close: ')' }\n    };\n  },\n\n  /**\n   * Create GLOB_CHARS\n   */\n\n  globChars(win32) {\n    return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;\n  }\n};\n","/*global navigator*/\n'use strict';\n\nconst {\n  REGEX_BACKSLASH,\n  REGEX_REMOVE_BACKSLASH,\n  REGEX_SPECIAL_CHARS,\n  REGEX_SPECIAL_CHARS_GLOBAL\n} = require('./constants');\n\nexports.isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);\nexports.hasRegexChars = str => REGEX_SPECIAL_CHARS.test(str);\nexports.isRegexChar = str => str.length === 1 && exports.hasRegexChars(str);\nexports.escapeRegex = str => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, '\\\\$1');\nexports.toPosixSlashes = str => str.replace(REGEX_BACKSLASH, '/');\n\nexports.isWindows = () => {\n  if (typeof navigator !== 'undefined' && navigator.platform) {\n    const platform = navigator.platform.toLowerCase();\n    return platform === 'win32' || platform === 'windows';\n  }\n\n  if (typeof process !== 'undefined' && process.platform) {\n    return process.platform === 'win32';\n  }\n\n  return false;\n};\n\nexports.removeBackslashes = str => {\n  return str.replace(REGEX_REMOVE_BACKSLASH, match => {\n    return match === '\\\\' ? '' : match;\n  });\n};\n\nexports.escapeLast = (input, char, lastIdx) => {\n  const idx = input.lastIndexOf(char, lastIdx);\n  if (idx === -1) return input;\n  if (input[idx - 1] === '\\\\') return exports.escapeLast(input, char, idx - 1);\n  return `${input.slice(0, idx)}\\\\${input.slice(idx)}`;\n};\n\nexports.removePrefix = (input, state = {}) => {\n  let output = input;\n  if (output.startsWith('./')) {\n    output = output.slice(2);\n    state.prefix = './';\n  }\n  return output;\n};\n\nexports.wrapOutput = (input, state = {}, options = {}) => {\n  const prepend = options.contains ? '' : '^';\n  const append = options.contains ? '' : '$';\n\n  let output = `${prepend}(?:${input})${append}`;\n  if (state.negated === true) {\n    output = `(?:^(?!${output}).*$)`;\n  }\n  return output;\n};\n\nexports.basename = (path, { windows } = {}) => {\n  const segs = path.split(windows ? /[\\\\/]/ : '/');\n  const last = segs[segs.length - 1];\n\n  if (last === '') {\n    return segs[segs.length - 2];\n  }\n\n  return last;\n};\n","'use strict';\n\nconst utils = require('./utils');\nconst {\n  CHAR_ASTERISK,             /* * */\n  CHAR_AT,                   /* @ */\n  CHAR_BACKWARD_SLASH,       /* \\ */\n  CHAR_COMMA,                /* , */\n  CHAR_DOT,                  /* . */\n  CHAR_EXCLAMATION_MARK,     /* ! */\n  CHAR_FORWARD_SLASH,        /* / */\n  CHAR_LEFT_CURLY_BRACE,     /* { */\n  CHAR_LEFT_PARENTHESES,     /* ( */\n  CHAR_LEFT_SQUARE_BRACKET,  /* [ */\n  CHAR_PLUS,                 /* + */\n  CHAR_QUESTION_MARK,        /* ? */\n  CHAR_RIGHT_CURLY_BRACE,    /* } */\n  CHAR_RIGHT_PARENTHESES,    /* ) */\n  CHAR_RIGHT_SQUARE_BRACKET  /* ] */\n} = require('./constants');\n\nconst isPathSeparator = code => {\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\n};\n\nconst depth = token => {\n  if (token.isPrefix !== true) {\n    token.depth = token.isGlobstar ? Infinity : 1;\n  }\n};\n\n/**\n * Quickly scans a glob pattern and returns an object with a handful of\n * useful properties, like `isGlob`, `path` (the leading non-glob, if it exists),\n * `glob` (the actual pattern), `negated` (true if the path starts with `!` but not\n * with `!(`) and `negatedExtglob` (true if the path starts with `!(`).\n *\n * ```js\n * const pm = require('picomatch');\n * console.log(pm.scan('foo/bar/*.js'));\n * { isGlob: true, input: 'foo/bar/*.js', base: 'foo/bar', glob: '*.js' }\n * ```\n * @param {String} `str`\n * @param {Object} `options`\n * @return {Object} Returns an object with tokens and regex source string.\n * @api public\n */\n\nconst scan = (input, options) => {\n  const opts = options || {};\n\n  const length = input.length - 1;\n  const scanToEnd = opts.parts === true || opts.scanToEnd === true;\n  const slashes = [];\n  const tokens = [];\n  const parts = [];\n\n  let str = input;\n  let index = -1;\n  let start = 0;\n  let lastIndex = 0;\n  let isBrace = false;\n  let isBracket = false;\n  let isGlob = false;\n  let isExtglob = false;\n  let isGlobstar = false;\n  let braceEscaped = false;\n  let backslashes = false;\n  let negated = false;\n  let negatedExtglob = false;\n  let finished = false;\n  let braces = 0;\n  let prev;\n  let code;\n  let token = { value: '', depth: 0, isGlob: false };\n\n  const eos = () => index >= length;\n  const peek = () => str.charCodeAt(index + 1);\n  const advance = () => {\n    prev = code;\n    return str.charCodeAt(++index);\n  };\n\n  while (index < length) {\n    code = advance();\n    let next;\n\n    if (code === CHAR_BACKWARD_SLASH) {\n      backslashes = token.backslashes = true;\n      code = advance();\n\n      if (code === CHAR_LEFT_CURLY_BRACE) {\n        braceEscaped = true;\n      }\n      continue;\n    }\n\n    if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {\n      braces++;\n\n      while (eos() !== true && (code = advance())) {\n        if (code === CHAR_BACKWARD_SLASH) {\n          backslashes = token.backslashes = true;\n          advance();\n          continue;\n        }\n\n        if (code === CHAR_LEFT_CURLY_BRACE) {\n          braces++;\n          continue;\n        }\n\n        if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {\n          isBrace = token.isBrace = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n\n          if (scanToEnd === true) {\n            continue;\n          }\n\n          break;\n        }\n\n        if (braceEscaped !== true && code === CHAR_COMMA) {\n          isBrace = token.isBrace = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n\n          if (scanToEnd === true) {\n            continue;\n          }\n\n          break;\n        }\n\n        if (code === CHAR_RIGHT_CURLY_BRACE) {\n          braces--;\n\n          if (braces === 0) {\n            braceEscaped = false;\n            isBrace = token.isBrace = true;\n            finished = true;\n            break;\n          }\n        }\n      }\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (code === CHAR_FORWARD_SLASH) {\n      slashes.push(index);\n      tokens.push(token);\n      token = { value: '', depth: 0, isGlob: false };\n\n      if (finished === true) continue;\n      if (prev === CHAR_DOT && index === (start + 1)) {\n        start += 2;\n        continue;\n      }\n\n      lastIndex = index + 1;\n      continue;\n    }\n\n    if (opts.noext !== true) {\n      const isExtglobChar = code === CHAR_PLUS\n        || code === CHAR_AT\n        || code === CHAR_ASTERISK\n        || code === CHAR_QUESTION_MARK\n        || code === CHAR_EXCLAMATION_MARK;\n\n      if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {\n        isGlob = token.isGlob = true;\n        isExtglob = token.isExtglob = true;\n        finished = true;\n        if (code === CHAR_EXCLAMATION_MARK && index === start) {\n          negatedExtglob = true;\n        }\n\n        if (scanToEnd === true) {\n          while (eos() !== true && (code = advance())) {\n            if (code === CHAR_BACKWARD_SLASH) {\n              backslashes = token.backslashes = true;\n              code = advance();\n              continue;\n            }\n\n            if (code === CHAR_RIGHT_PARENTHESES) {\n              isGlob = token.isGlob = true;\n              finished = true;\n              break;\n            }\n          }\n          continue;\n        }\n        break;\n      }\n    }\n\n    if (code === CHAR_ASTERISK) {\n      if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;\n      isGlob = token.isGlob = true;\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n      break;\n    }\n\n    if (code === CHAR_QUESTION_MARK) {\n      isGlob = token.isGlob = true;\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n      break;\n    }\n\n    if (code === CHAR_LEFT_SQUARE_BRACKET) {\n      while (eos() !== true && (next = advance())) {\n        if (next === CHAR_BACKWARD_SLASH) {\n          backslashes = token.backslashes = true;\n          advance();\n          continue;\n        }\n\n        if (next === CHAR_RIGHT_SQUARE_BRACKET) {\n          isBracket = token.isBracket = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n          break;\n        }\n      }\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {\n      negated = token.negated = true;\n      start++;\n      continue;\n    }\n\n    if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {\n      isGlob = token.isGlob = true;\n\n      if (scanToEnd === true) {\n        while (eos() !== true && (code = advance())) {\n          if (code === CHAR_LEFT_PARENTHESES) {\n            backslashes = token.backslashes = true;\n            code = advance();\n            continue;\n          }\n\n          if (code === CHAR_RIGHT_PARENTHESES) {\n            finished = true;\n            break;\n          }\n        }\n        continue;\n      }\n      break;\n    }\n\n    if (isGlob === true) {\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n  }\n\n  if (opts.noext === true) {\n    isExtglob = false;\n    isGlob = false;\n  }\n\n  let base = str;\n  let prefix = '';\n  let glob = '';\n\n  if (start > 0) {\n    prefix = str.slice(0, start);\n    str = str.slice(start);\n    lastIndex -= start;\n  }\n\n  if (base && isGlob === true && lastIndex > 0) {\n    base = str.slice(0, lastIndex);\n    glob = str.slice(lastIndex);\n  } else if (isGlob === true) {\n    base = '';\n    glob = str;\n  } else {\n    base = str;\n  }\n\n  if (base && base !== '' && base !== '/' && base !== str) {\n    if (isPathSeparator(base.charCodeAt(base.length - 1))) {\n      base = base.slice(0, -1);\n    }\n  }\n\n  if (opts.unescape === true) {\n    if (glob) glob = utils.removeBackslashes(glob);\n\n    if (base && backslashes === true) {\n      base = utils.removeBackslashes(base);\n    }\n  }\n\n  const state = {\n    prefix,\n    input,\n    start,\n    base,\n    glob,\n    isBrace,\n    isBracket,\n    isGlob,\n    isExtglob,\n    isGlobstar,\n    negated,\n    negatedExtglob\n  };\n\n  if (opts.tokens === true) {\n    state.maxDepth = 0;\n    if (!isPathSeparator(code)) {\n      tokens.push(token);\n    }\n    state.tokens = tokens;\n  }\n\n  if (opts.parts === true || opts.tokens === true) {\n    let prevIndex;\n\n    for (let idx = 0; idx < slashes.length; idx++) {\n      const n = prevIndex ? prevIndex + 1 : start;\n      const i = slashes[idx];\n      const value = input.slice(n, i);\n      if (opts.tokens) {\n        if (idx === 0 && start !== 0) {\n          tokens[idx].isPrefix = true;\n          tokens[idx].value = prefix;\n        } else {\n          tokens[idx].value = value;\n        }\n        depth(tokens[idx]);\n        state.maxDepth += tokens[idx].depth;\n      }\n      if (idx !== 0 || value !== '') {\n        parts.push(value);\n      }\n      prevIndex = i;\n    }\n\n    if (prevIndex && prevIndex + 1 < input.length) {\n      const value = input.slice(prevIndex + 1);\n      parts.push(value);\n\n      if (opts.tokens) {\n        tokens[tokens.length - 1].value = value;\n        depth(tokens[tokens.length - 1]);\n        state.maxDepth += tokens[tokens.length - 1].depth;\n      }\n    }\n\n    state.slashes = slashes;\n    state.parts = parts;\n  }\n\n  return state;\n};\n\nmodule.exports = scan;\n","'use strict';\n\nconst constants = require('./constants');\nconst utils = require('./utils');\n\n/**\n * Constants\n */\n\nconst {\n  MAX_LENGTH,\n  POSIX_REGEX_SOURCE,\n  REGEX_NON_SPECIAL_CHARS,\n  REGEX_SPECIAL_CHARS_BACKREF,\n  REPLACEMENTS\n} = constants;\n\n/**\n * Helpers\n */\n\nconst expandRange = (args, options) => {\n  if (typeof options.expandRange === 'function') {\n    return options.expandRange(...args, options);\n  }\n\n  args.sort();\n  const value = `[${args.join('-')}]`;\n\n  try {\n    /* eslint-disable-next-line no-new */\n    new RegExp(value);\n  } catch (ex) {\n    return args.map(v => utils.escapeRegex(v)).join('..');\n  }\n\n  return value;\n};\n\n/**\n * Create the message for a syntax error\n */\n\nconst syntaxError = (type, char) => {\n  return `Missing ${type}: \"${char}\" - use \"\\\\\\\\${char}\" to match literal characters`;\n};\n\n/**\n * Parse the given input string.\n * @param {String} input\n * @param {Object} options\n * @return {Object}\n */\n\nconst parse = (input, options) => {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  input = REPLACEMENTS[input] || input;\n\n  const opts = { ...options };\n  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\n\n  let len = input.length;\n  if (len > max) {\n    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);\n  }\n\n  const bos = { type: 'bos', value: '', output: opts.prepend || '' };\n  const tokens = [bos];\n\n  const capture = opts.capture ? '' : '?:';\n\n  // create constants based on platform, for windows or posix\n  const PLATFORM_CHARS = constants.globChars(opts.windows);\n  const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);\n\n  const {\n    DOT_LITERAL,\n    PLUS_LITERAL,\n    SLASH_LITERAL,\n    ONE_CHAR,\n    DOTS_SLASH,\n    NO_DOT,\n    NO_DOT_SLASH,\n    NO_DOTS_SLASH,\n    QMARK,\n    QMARK_NO_DOT,\n    STAR,\n    START_ANCHOR\n  } = PLATFORM_CHARS;\n\n  const globstar = opts => {\n    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;\n  };\n\n  const nodot = opts.dot ? '' : NO_DOT;\n  const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;\n  let star = opts.bash === true ? globstar(opts) : STAR;\n\n  if (opts.capture) {\n    star = `(${star})`;\n  }\n\n  // minimatch options support\n  if (typeof opts.noext === 'boolean') {\n    opts.noextglob = opts.noext;\n  }\n\n  const state = {\n    input,\n    index: -1,\n    start: 0,\n    dot: opts.dot === true,\n    consumed: '',\n    output: '',\n    prefix: '',\n    backtrack: false,\n    negated: false,\n    brackets: 0,\n    braces: 0,\n    parens: 0,\n    quotes: 0,\n    globstar: false,\n    tokens\n  };\n\n  input = utils.removePrefix(input, state);\n  len = input.length;\n\n  const extglobs = [];\n  const braces = [];\n  const stack = [];\n  let prev = bos;\n  let value;\n\n  /**\n   * Tokenizing helpers\n   */\n\n  const eos = () => state.index === len - 1;\n  const peek = state.peek = (n = 1) => input[state.index + n];\n  const advance = state.advance = () => input[++state.index] || '';\n  const remaining = () => input.slice(state.index + 1);\n  const consume = (value = '', num = 0) => {\n    state.consumed += value;\n    state.index += num;\n  };\n\n  const append = token => {\n    state.output += token.output != null ? token.output : token.value;\n    consume(token.value);\n  };\n\n  const negate = () => {\n    let count = 1;\n\n    while (peek() === '!' && (peek(2) !== '(' || peek(3) === '?')) {\n      advance();\n      state.start++;\n      count++;\n    }\n\n    if (count % 2 === 0) {\n      return false;\n    }\n\n    state.negated = true;\n    state.start++;\n    return true;\n  };\n\n  const increment = type => {\n    state[type]++;\n    stack.push(type);\n  };\n\n  const decrement = type => {\n    state[type]--;\n    stack.pop();\n  };\n\n  /**\n   * Push tokens onto the tokens array. This helper speeds up\n   * tokenizing by 1) helping us avoid backtracking as much as possible,\n   * and 2) helping us avoid creating extra tokens when consecutive\n   * characters are plain text. This improves performance and simplifies\n   * lookbehinds.\n   */\n\n  const push = tok => {\n    if (prev.type === 'globstar') {\n      const isBrace = state.braces > 0 && (tok.type === 'comma' || tok.type === 'brace');\n      const isExtglob = tok.extglob === true || (extglobs.length && (tok.type === 'pipe' || tok.type === 'paren'));\n\n      if (tok.type !== 'slash' && tok.type !== 'paren' && !isBrace && !isExtglob) {\n        state.output = state.output.slice(0, -prev.output.length);\n        prev.type = 'star';\n        prev.value = '*';\n        prev.output = star;\n        state.output += prev.output;\n      }\n    }\n\n    if (extglobs.length && tok.type !== 'paren') {\n      extglobs[extglobs.length - 1].inner += tok.value;\n    }\n\n    if (tok.value || tok.output) append(tok);\n    if (prev && prev.type === 'text' && tok.type === 'text') {\n      prev.output = (prev.output || prev.value) + tok.value;\n      prev.value += tok.value;\n      return;\n    }\n\n    tok.prev = prev;\n    tokens.push(tok);\n    prev = tok;\n  };\n\n  const extglobOpen = (type, value) => {\n    const token = { ...EXTGLOB_CHARS[value], conditions: 1, inner: '' };\n\n    token.prev = prev;\n    token.parens = state.parens;\n    token.output = state.output;\n    const output = (opts.capture ? '(' : '') + token.open;\n\n    increment('parens');\n    push({ type, value, output: state.output ? '' : ONE_CHAR });\n    push({ type: 'paren', extglob: true, value: advance(), output });\n    extglobs.push(token);\n  };\n\n  const extglobClose = token => {\n    let output = token.close + (opts.capture ? ')' : '');\n    let rest;\n\n    if (token.type === 'negate') {\n      let extglobStar = star;\n\n      if (token.inner && token.inner.length > 1 && token.inner.includes('/')) {\n        extglobStar = globstar(opts);\n      }\n\n      if (extglobStar !== star || eos() || /^\\)+$/.test(remaining())) {\n        output = token.close = `)$))${extglobStar}`;\n      }\n\n      if (token.inner.includes('*') && (rest = remaining()) && /^\\.[^\\\\/.]+$/.test(rest)) {\n        // Any non-magical string (`.ts`) or even nested expression (`.{ts,tsx}`) can follow after the closing parenthesis.\n        // In this case, we need to parse the string and use it in the output of the original pattern.\n        // Suitable patterns: `/!(*.d).ts`, `/!(*.d).{ts,tsx}`, `**/!(*-dbg).@(js)`.\n        //\n        // Disabling the `fastpaths` option due to a problem with parsing strings as `.ts` in the pattern like `**/!(*.d).ts`.\n        const expression = parse(rest, { ...options, fastpaths: false }).output;\n\n        output = token.close = `)${expression})${extglobStar})`;\n      }\n\n      if (token.prev.type === 'bos') {\n        state.negatedExtglob = true;\n      }\n    }\n\n    push({ type: 'paren', extglob: true, value, output });\n    decrement('parens');\n  };\n\n  /**\n   * Fast paths\n   */\n\n  if (opts.fastpaths !== false && !/(^[*!]|[/()[\\]{}\"])/.test(input)) {\n    let backslashes = false;\n\n    let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index) => {\n      if (first === '\\\\') {\n        backslashes = true;\n        return m;\n      }\n\n      if (first === '?') {\n        if (esc) {\n          return esc + first + (rest ? QMARK.repeat(rest.length) : '');\n        }\n        if (index === 0) {\n          return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : '');\n        }\n        return QMARK.repeat(chars.length);\n      }\n\n      if (first === '.') {\n        return DOT_LITERAL.repeat(chars.length);\n      }\n\n      if (first === '*') {\n        if (esc) {\n          return esc + first + (rest ? star : '');\n        }\n        return star;\n      }\n      return esc ? m : `\\\\${m}`;\n    });\n\n    if (backslashes === true) {\n      if (opts.unescape === true) {\n        output = output.replace(/\\\\/g, '');\n      } else {\n        output = output.replace(/\\\\+/g, m => {\n          return m.length % 2 === 0 ? '\\\\\\\\' : (m ? '\\\\' : '');\n        });\n      }\n    }\n\n    if (output === input && opts.contains === true) {\n      state.output = input;\n      return state;\n    }\n\n    state.output = utils.wrapOutput(output, state, options);\n    return state;\n  }\n\n  /**\n   * Tokenize input until we reach end-of-string\n   */\n\n  while (!eos()) {\n    value = advance();\n\n    if (value === '\\u0000') {\n      continue;\n    }\n\n    /**\n     * Escaped characters\n     */\n\n    if (value === '\\\\') {\n      const next = peek();\n\n      if (next === '/' && opts.bash !== true) {\n        continue;\n      }\n\n      if (next === '.' || next === ';') {\n        continue;\n      }\n\n      if (!next) {\n        value += '\\\\';\n        push({ type: 'text', value });\n        continue;\n      }\n\n      // collapse slashes to reduce potential for exploits\n      const match = /^\\\\+/.exec(remaining());\n      let slashes = 0;\n\n      if (match && match[0].length > 2) {\n        slashes = match[0].length;\n        state.index += slashes;\n        if (slashes % 2 !== 0) {\n          value += '\\\\';\n        }\n      }\n\n      if (opts.unescape === true) {\n        value = advance();\n      } else {\n        value += advance();\n      }\n\n      if (state.brackets === 0) {\n        push({ type: 'text', value });\n        continue;\n      }\n    }\n\n    /**\n     * If we're inside a regex character class, continue\n     * until we reach the closing bracket.\n     */\n\n    if (state.brackets > 0 && (value !== ']' || prev.value === '[' || prev.value === '[^')) {\n      if (opts.posix !== false && value === ':') {\n        const inner = prev.value.slice(1);\n        if (inner.includes('[')) {\n          prev.posix = true;\n\n          if (inner.includes(':')) {\n            const idx = prev.value.lastIndexOf('[');\n            const pre = prev.value.slice(0, idx);\n            const rest = prev.value.slice(idx + 2);\n            const posix = POSIX_REGEX_SOURCE[rest];\n            if (posix) {\n              prev.value = pre + posix;\n              state.backtrack = true;\n              advance();\n\n              if (!bos.output && tokens.indexOf(prev) === 1) {\n                bos.output = ONE_CHAR;\n              }\n              continue;\n            }\n          }\n        }\n      }\n\n      if ((value === '[' && peek() !== ':') || (value === '-' && peek() === ']')) {\n        value = `\\\\${value}`;\n      }\n\n      if (value === ']' && (prev.value === '[' || prev.value === '[^')) {\n        value = `\\\\${value}`;\n      }\n\n      if (opts.posix === true && value === '!' && prev.value === '[') {\n        value = '^';\n      }\n\n      prev.value += value;\n      append({ value });\n      continue;\n    }\n\n    /**\n     * If we're inside a quoted string, continue\n     * until we reach the closing double quote.\n     */\n\n    if (state.quotes === 1 && value !== '\"') {\n      value = utils.escapeRegex(value);\n      prev.value += value;\n      append({ value });\n      continue;\n    }\n\n    /**\n     * Double quotes\n     */\n\n    if (value === '\"') {\n      state.quotes = state.quotes === 1 ? 0 : 1;\n      if (opts.keepQuotes === true) {\n        push({ type: 'text', value });\n      }\n      continue;\n    }\n\n    /**\n     * Parentheses\n     */\n\n    if (value === '(') {\n      increment('parens');\n      push({ type: 'paren', value });\n      continue;\n    }\n\n    if (value === ')') {\n      if (state.parens === 0 && opts.strictBrackets === true) {\n        throw new SyntaxError(syntaxError('opening', '('));\n      }\n\n      const extglob = extglobs[extglobs.length - 1];\n      if (extglob && state.parens === extglob.parens + 1) {\n        extglobClose(extglobs.pop());\n        continue;\n      }\n\n      push({ type: 'paren', value, output: state.parens ? ')' : '\\\\)' });\n      decrement('parens');\n      continue;\n    }\n\n    /**\n     * Square brackets\n     */\n\n    if (value === '[') {\n      if (opts.nobracket === true || !remaining().includes(']')) {\n        if (opts.nobracket !== true && opts.strictBrackets === true) {\n          throw new SyntaxError(syntaxError('closing', ']'));\n        }\n\n        value = `\\\\${value}`;\n      } else {\n        increment('brackets');\n      }\n\n      push({ type: 'bracket', value });\n      continue;\n    }\n\n    if (value === ']') {\n      if (opts.nobracket === true || (prev && prev.type === 'bracket' && prev.value.length === 1)) {\n        push({ type: 'text', value, output: `\\\\${value}` });\n        continue;\n      }\n\n      if (state.brackets === 0) {\n        if (opts.strictBrackets === true) {\n          throw new SyntaxError(syntaxError('opening', '['));\n        }\n\n        push({ type: 'text', value, output: `\\\\${value}` });\n        continue;\n      }\n\n      decrement('brackets');\n\n      const prevValue = prev.value.slice(1);\n      if (prev.posix !== true && prevValue[0] === '^' && !prevValue.includes('/')) {\n        value = `/${value}`;\n      }\n\n      prev.value += value;\n      append({ value });\n\n      // when literal brackets are explicitly disabled\n      // assume we should match with a regex character class\n      if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {\n        continue;\n      }\n\n      const escaped = utils.escapeRegex(prev.value);\n      state.output = state.output.slice(0, -prev.value.length);\n\n      // when literal brackets are explicitly enabled\n      // assume we should escape the brackets to match literal characters\n      if (opts.literalBrackets === true) {\n        state.output += escaped;\n        prev.value = escaped;\n        continue;\n      }\n\n      // when the user specifies nothing, try to match both\n      prev.value = `(${capture}${escaped}|${prev.value})`;\n      state.output += prev.value;\n      continue;\n    }\n\n    /**\n     * Braces\n     */\n\n    if (value === '{' && opts.nobrace !== true) {\n      increment('braces');\n\n      const open = {\n        type: 'brace',\n        value,\n        output: '(',\n        outputIndex: state.output.length,\n        tokensIndex: state.tokens.length\n      };\n\n      braces.push(open);\n      push(open);\n      continue;\n    }\n\n    if (value === '}') {\n      const brace = braces[braces.length - 1];\n\n      if (opts.nobrace === true || !brace) {\n        push({ type: 'text', value, output: value });\n        continue;\n      }\n\n      let output = ')';\n\n      if (brace.dots === true) {\n        const arr = tokens.slice();\n        const range = [];\n\n        for (let i = arr.length - 1; i >= 0; i--) {\n          tokens.pop();\n          if (arr[i].type === 'brace') {\n            break;\n          }\n          if (arr[i].type !== 'dots') {\n            range.unshift(arr[i].value);\n          }\n        }\n\n        output = expandRange(range, opts);\n        state.backtrack = true;\n      }\n\n      if (brace.comma !== true && brace.dots !== true) {\n        const out = state.output.slice(0, brace.outputIndex);\n        const toks = state.tokens.slice(brace.tokensIndex);\n        brace.value = brace.output = '\\\\{';\n        value = output = '\\\\}';\n        state.output = out;\n        for (const t of toks) {\n          state.output += (t.output || t.value);\n        }\n      }\n\n      push({ type: 'brace', value, output });\n      decrement('braces');\n      braces.pop();\n      continue;\n    }\n\n    /**\n     * Pipes\n     */\n\n    if (value === '|') {\n      if (extglobs.length > 0) {\n        extglobs[extglobs.length - 1].conditions++;\n      }\n      push({ type: 'text', value });\n      continue;\n    }\n\n    /**\n     * Commas\n     */\n\n    if (value === ',') {\n      let output = value;\n\n      const brace = braces[braces.length - 1];\n      if (brace && stack[stack.length - 1] === 'braces') {\n        brace.comma = true;\n        output = '|';\n      }\n\n      push({ type: 'comma', value, output });\n      continue;\n    }\n\n    /**\n     * Slashes\n     */\n\n    if (value === '/') {\n      // if the beginning of the glob is \"./\", advance the start\n      // to the current index, and don't add the \"./\" characters\n      // to the state. This greatly simplifies lookbehinds when\n      // checking for BOS characters like \"!\" and \".\" (not \"./\")\n      if (prev.type === 'dot' && state.index === state.start + 1) {\n        state.start = state.index + 1;\n        state.consumed = '';\n        state.output = '';\n        tokens.pop();\n        prev = bos; // reset \"prev\" to the first token\n        continue;\n      }\n\n      push({ type: 'slash', value, output: SLASH_LITERAL });\n      continue;\n    }\n\n    /**\n     * Dots\n     */\n\n    if (value === '.') {\n      if (state.braces > 0 && prev.type === 'dot') {\n        if (prev.value === '.') prev.output = DOT_LITERAL;\n        const brace = braces[braces.length - 1];\n        prev.type = 'dots';\n        prev.output += value;\n        prev.value += value;\n        brace.dots = true;\n        continue;\n      }\n\n      if ((state.braces + state.parens) === 0 && prev.type !== 'bos' && prev.type !== 'slash') {\n        push({ type: 'text', value, output: DOT_LITERAL });\n        continue;\n      }\n\n      push({ type: 'dot', value, output: DOT_LITERAL });\n      continue;\n    }\n\n    /**\n     * Question marks\n     */\n\n    if (value === '?') {\n      const isGroup = prev && prev.value === '(';\n      if (!isGroup && opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\n        extglobOpen('qmark', value);\n        continue;\n      }\n\n      if (prev && prev.type === 'paren') {\n        const next = peek();\n        let output = value;\n\n        if ((prev.value === '(' && !/[!=<:]/.test(next)) || (next === '<' && !/<([!=]|\\w+>)/.test(remaining()))) {\n          output = `\\\\${value}`;\n        }\n\n        push({ type: 'text', value, output });\n        continue;\n      }\n\n      if (opts.dot !== true && (prev.type === 'slash' || prev.type === 'bos')) {\n        push({ type: 'qmark', value, output: QMARK_NO_DOT });\n        continue;\n      }\n\n      push({ type: 'qmark', value, output: QMARK });\n      continue;\n    }\n\n    /**\n     * Exclamation\n     */\n\n    if (value === '!') {\n      if (opts.noextglob !== true && peek() === '(') {\n        if (peek(2) !== '?' || !/[!=<:]/.test(peek(3))) {\n          extglobOpen('negate', value);\n          continue;\n        }\n      }\n\n      if (opts.nonegate !== true && state.index === 0) {\n        negate();\n        continue;\n      }\n    }\n\n    /**\n     * Plus\n     */\n\n    if (value === '+') {\n      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\n        extglobOpen('plus', value);\n        continue;\n      }\n\n      if ((prev && prev.value === '(') || opts.regex === false) {\n        push({ type: 'plus', value, output: PLUS_LITERAL });\n        continue;\n      }\n\n      if ((prev && (prev.type === 'bracket' || prev.type === 'paren' || prev.type === 'brace')) || state.parens > 0) {\n        push({ type: 'plus', value });\n        continue;\n      }\n\n      push({ type: 'plus', value: PLUS_LITERAL });\n      continue;\n    }\n\n    /**\n     * Plain text\n     */\n\n    if (value === '@') {\n      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\n        push({ type: 'at', extglob: true, value, output: '' });\n        continue;\n      }\n\n      push({ type: 'text', value });\n      continue;\n    }\n\n    /**\n     * Plain text\n     */\n\n    if (value !== '*') {\n      if (value === '$' || value === '^') {\n        value = `\\\\${value}`;\n      }\n\n      const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());\n      if (match) {\n        value += match[0];\n        state.index += match[0].length;\n      }\n\n      push({ type: 'text', value });\n      continue;\n    }\n\n    /**\n     * Stars\n     */\n\n    if (prev && (prev.type === 'globstar' || prev.star === true)) {\n      prev.type = 'star';\n      prev.star = true;\n      prev.value += value;\n      prev.output = star;\n      state.backtrack = true;\n      state.globstar = true;\n      consume(value);\n      continue;\n    }\n\n    let rest = remaining();\n    if (opts.noextglob !== true && /^\\([^?]/.test(rest)) {\n      extglobOpen('star', value);\n      continue;\n    }\n\n    if (prev.type === 'star') {\n      if (opts.noglobstar === true) {\n        consume(value);\n        continue;\n      }\n\n      const prior = prev.prev;\n      const before = prior.prev;\n      const isStart = prior.type === 'slash' || prior.type === 'bos';\n      const afterStar = before && (before.type === 'star' || before.type === 'globstar');\n\n      if (opts.bash === true && (!isStart || (rest[0] && rest[0] !== '/'))) {\n        push({ type: 'star', value, output: '' });\n        continue;\n      }\n\n      const isBrace = state.braces > 0 && (prior.type === 'comma' || prior.type === 'brace');\n      const isExtglob = extglobs.length && (prior.type === 'pipe' || prior.type === 'paren');\n      if (!isStart && prior.type !== 'paren' && !isBrace && !isExtglob) {\n        push({ type: 'star', value, output: '' });\n        continue;\n      }\n\n      // strip consecutive `/**/`\n      while (rest.slice(0, 3) === '/**') {\n        const after = input[state.index + 4];\n        if (after && after !== '/') {\n          break;\n        }\n        rest = rest.slice(3);\n        consume('/**', 3);\n      }\n\n      if (prior.type === 'bos' && eos()) {\n        prev.type = 'globstar';\n        prev.value += value;\n        prev.output = globstar(opts);\n        state.output = prev.output;\n        state.globstar = true;\n        consume(value);\n        continue;\n      }\n\n      if (prior.type === 'slash' && prior.prev.type !== 'bos' && !afterStar && eos()) {\n        state.output = state.output.slice(0, -(prior.output + prev.output).length);\n        prior.output = `(?:${prior.output}`;\n\n        prev.type = 'globstar';\n        prev.output = globstar(opts) + (opts.strictSlashes ? ')' : '|$)');\n        prev.value += value;\n        state.globstar = true;\n        state.output += prior.output + prev.output;\n        consume(value);\n        continue;\n      }\n\n      if (prior.type === 'slash' && prior.prev.type !== 'bos' && rest[0] === '/') {\n        const end = rest[1] !== void 0 ? '|$' : '';\n\n        state.output = state.output.slice(0, -(prior.output + prev.output).length);\n        prior.output = `(?:${prior.output}`;\n\n        prev.type = 'globstar';\n        prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;\n        prev.value += value;\n\n        state.output += prior.output + prev.output;\n        state.globstar = true;\n\n        consume(value + advance());\n\n        push({ type: 'slash', value: '/', output: '' });\n        continue;\n      }\n\n      if (prior.type === 'bos' && rest[0] === '/') {\n        prev.type = 'globstar';\n        prev.value += value;\n        prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;\n        state.output = prev.output;\n        state.globstar = true;\n        consume(value + advance());\n        push({ type: 'slash', value: '/', output: '' });\n        continue;\n      }\n\n      // remove single star from output\n      state.output = state.output.slice(0, -prev.output.length);\n\n      // reset previous token to globstar\n      prev.type = 'globstar';\n      prev.output = globstar(opts);\n      prev.value += value;\n\n      // reset output with globstar\n      state.output += prev.output;\n      state.globstar = true;\n      consume(value);\n      continue;\n    }\n\n    const token = { type: 'star', value, output: star };\n\n    if (opts.bash === true) {\n      token.output = '.*?';\n      if (prev.type === 'bos' || prev.type === 'slash') {\n        token.output = nodot + token.output;\n      }\n      push(token);\n      continue;\n    }\n\n    if (prev && (prev.type === 'bracket' || prev.type === 'paren') && opts.regex === true) {\n      token.output = value;\n      push(token);\n      continue;\n    }\n\n    if (state.index === state.start || prev.type === 'slash' || prev.type === 'dot') {\n      if (prev.type === 'dot') {\n        state.output += NO_DOT_SLASH;\n        prev.output += NO_DOT_SLASH;\n\n      } else if (opts.dot === true) {\n        state.output += NO_DOTS_SLASH;\n        prev.output += NO_DOTS_SLASH;\n\n      } else {\n        state.output += nodot;\n        prev.output += nodot;\n      }\n\n      if (peek() !== '*') {\n        state.output += ONE_CHAR;\n        prev.output += ONE_CHAR;\n      }\n    }\n\n    push(token);\n  }\n\n  while (state.brackets > 0) {\n    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ']'));\n    state.output = utils.escapeLast(state.output, '[');\n    decrement('brackets');\n  }\n\n  while (state.parens > 0) {\n    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ')'));\n    state.output = utils.escapeLast(state.output, '(');\n    decrement('parens');\n  }\n\n  while (state.braces > 0) {\n    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', '}'));\n    state.output = utils.escapeLast(state.output, '{');\n    decrement('braces');\n  }\n\n  if (opts.strictSlashes !== true && (prev.type === 'star' || prev.type === 'bracket')) {\n    push({ type: 'maybe_slash', value: '', output: `${SLASH_LITERAL}?` });\n  }\n\n  // rebuild the output if we had to backtrack at any point\n  if (state.backtrack === true) {\n    state.output = '';\n\n    for (const token of state.tokens) {\n      state.output += token.output != null ? token.output : token.value;\n\n      if (token.suffix) {\n        state.output += token.suffix;\n      }\n    }\n  }\n\n  return state;\n};\n\n/**\n * Fast paths for creating regular expressions for common glob patterns.\n * This can significantly speed up processing and has very little downside\n * impact when none of the fast paths match.\n */\n\nparse.fastpaths = (input, options) => {\n  const opts = { ...options };\n  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\n  const len = input.length;\n  if (len > max) {\n    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);\n  }\n\n  input = REPLACEMENTS[input] || input;\n\n  // create constants based on platform, for windows or posix\n  const {\n    DOT_LITERAL,\n    SLASH_LITERAL,\n    ONE_CHAR,\n    DOTS_SLASH,\n    NO_DOT,\n    NO_DOTS,\n    NO_DOTS_SLASH,\n    STAR,\n    START_ANCHOR\n  } = constants.globChars(opts.windows);\n\n  const nodot = opts.dot ? NO_DOTS : NO_DOT;\n  const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;\n  const capture = opts.capture ? '' : '?:';\n  const state = { negated: false, prefix: '' };\n  let star = opts.bash === true ? '.*?' : STAR;\n\n  if (opts.capture) {\n    star = `(${star})`;\n  }\n\n  const globstar = opts => {\n    if (opts.noglobstar === true) return star;\n    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;\n  };\n\n  const create = str => {\n    switch (str) {\n      case '*':\n        return `${nodot}${ONE_CHAR}${star}`;\n\n      case '.*':\n        return `${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      case '*.*':\n        return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      case '*/*':\n        return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;\n\n      case '**':\n        return nodot + globstar(opts);\n\n      case '**/*':\n        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;\n\n      case '**/*.*':\n        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      case '**/.*':\n        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      default: {\n        const match = /^(.*?)\\.(\\w+)$/.exec(str);\n        if (!match) return;\n\n        const source = create(match[1]);\n        if (!source) return;\n\n        return source + DOT_LITERAL + match[2];\n      }\n    }\n  };\n\n  const output = utils.removePrefix(input, state);\n  let source = create(output);\n\n  if (source && opts.strictSlashes !== true) {\n    source += `${SLASH_LITERAL}?`;\n  }\n\n  return source;\n};\n\nmodule.exports = parse;\n","'use strict';\n\nconst scan = require('./scan');\nconst parse = require('./parse');\nconst utils = require('./utils');\nconst constants = require('./constants');\nconst isObject = val => val && typeof val === 'object' && !Array.isArray(val);\n\n/**\n * Creates a matcher function from one or more glob patterns. The\n * returned function takes a string to match as its first argument,\n * and returns true if the string is a match. The returned matcher\n * function also takes a boolean as the second argument that, when true,\n * returns an object with additional information.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch(glob[, options]);\n *\n * const isMatch = picomatch('*.!(*a)');\n * console.log(isMatch('a.a')); //=> false\n * console.log(isMatch('a.b')); //=> true\n * ```\n * @name picomatch\n * @param {String|Array} `globs` One or more glob patterns.\n * @param {Object=} `options`\n * @return {Function=} Returns a matcher function.\n * @api public\n */\n\nconst picomatch = (glob, options, returnState = false) => {\n  if (Array.isArray(glob)) {\n    const fns = glob.map(input => picomatch(input, options, returnState));\n    const arrayMatcher = str => {\n      for (const isMatch of fns) {\n        const state = isMatch(str);\n        if (state) return state;\n      }\n      return false;\n    };\n    return arrayMatcher;\n  }\n\n  const isState = isObject(glob) && glob.tokens && glob.input;\n\n  if (glob === '' || (typeof glob !== 'string' && !isState)) {\n    throw new TypeError('Expected pattern to be a non-empty string');\n  }\n\n  const opts = options || {};\n  const posix = opts.windows;\n  const regex = isState\n    ? picomatch.compileRe(glob, options)\n    : picomatch.makeRe(glob, options, false, true);\n\n  const state = regex.state;\n  delete regex.state;\n\n  let isIgnored = () => false;\n  if (opts.ignore) {\n    const ignoreOpts = { ...options, ignore: null, onMatch: null, onResult: null };\n    isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);\n  }\n\n  const matcher = (input, returnObject = false) => {\n    const { isMatch, match, output } = picomatch.test(input, regex, options, { glob, posix });\n    const result = { glob, state, regex, posix, input, output, match, isMatch };\n\n    if (typeof opts.onResult === 'function') {\n      opts.onResult(result);\n    }\n\n    if (isMatch === false) {\n      result.isMatch = false;\n      return returnObject ? result : false;\n    }\n\n    if (isIgnored(input)) {\n      if (typeof opts.onIgnore === 'function') {\n        opts.onIgnore(result);\n      }\n      result.isMatch = false;\n      return returnObject ? result : false;\n    }\n\n    if (typeof opts.onMatch === 'function') {\n      opts.onMatch(result);\n    }\n    return returnObject ? result : true;\n  };\n\n  if (returnState) {\n    matcher.state = state;\n  }\n\n  return matcher;\n};\n\n/**\n * Test `input` with the given `regex`. This is used by the main\n * `picomatch()` function to test the input string.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.test(input, regex[, options]);\n *\n * console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\\/([^/]*?))$/));\n * // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }\n * ```\n * @param {String} `input` String to test.\n * @param {RegExp} `regex`\n * @return {Object} Returns an object with matching info.\n * @api public\n */\n\npicomatch.test = (input, regex, options, { glob, posix } = {}) => {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected input to be a string');\n  }\n\n  if (input === '') {\n    return { isMatch: false, output: '' };\n  }\n\n  const opts = options || {};\n  const format = opts.format || (posix ? utils.toPosixSlashes : null);\n  let match = input === glob;\n  let output = (match && format) ? format(input) : input;\n\n  if (match === false) {\n    output = format ? format(input) : input;\n    match = output === glob;\n  }\n\n  if (match === false || opts.capture === true) {\n    if (opts.matchBase === true || opts.basename === true) {\n      match = picomatch.matchBase(input, regex, options, posix);\n    } else {\n      match = regex.exec(output);\n    }\n  }\n\n  return { isMatch: Boolean(match), match, output };\n};\n\n/**\n * Match the basename of a filepath.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.matchBase(input, glob[, options]);\n * console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true\n * ```\n * @param {String} `input` String to test.\n * @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).\n * @return {Boolean}\n * @api public\n */\n\npicomatch.matchBase = (input, glob, options) => {\n  const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);\n  return regex.test(utils.basename(input));\n};\n\n/**\n * Returns true if **any** of the given glob `patterns` match the specified `string`.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.isMatch(string, patterns[, options]);\n *\n * console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true\n * console.log(picomatch.isMatch('a.a', 'b.*')); //=> false\n * ```\n * @param {String|Array} str The string to test.\n * @param {String|Array} patterns One or more glob patterns to use for matching.\n * @param {Object} [options] See available [options](#options).\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\npicomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);\n\n/**\n * Parse a glob pattern to create the source string for a regular\n * expression.\n *\n * ```js\n * const picomatch = require('picomatch');\n * const result = picomatch.parse(pattern[, options]);\n * ```\n * @param {String} `pattern`\n * @param {Object} `options`\n * @return {Object} Returns an object with useful properties and output to be used as a regex source string.\n * @api public\n */\n\npicomatch.parse = (pattern, options) => {\n  if (Array.isArray(pattern)) return pattern.map(p => picomatch.parse(p, options));\n  return parse(pattern, { ...options, fastpaths: false });\n};\n\n/**\n * Scan a glob pattern to separate the pattern into segments.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.scan(input[, options]);\n *\n * const result = picomatch.scan('!./foo/*.js');\n * console.log(result);\n * { prefix: '!./',\n *   input: '!./foo/*.js',\n *   start: 3,\n *   base: 'foo',\n *   glob: '*.js',\n *   isBrace: false,\n *   isBracket: false,\n *   isGlob: true,\n *   isExtglob: false,\n *   isGlobstar: false,\n *   negated: true }\n * ```\n * @param {String} `input` Glob pattern to scan.\n * @param {Object} `options`\n * @return {Object} Returns an object with\n * @api public\n */\n\npicomatch.scan = (input, options) => scan(input, options);\n\n/**\n * Compile a regular expression from the `state` object returned by the\n * [parse()](#parse) method.\n *\n * @param {Object} `state`\n * @param {Object} `options`\n * @param {Boolean} `returnOutput` Intended for implementors, this argument allows you to return the raw output from the parser.\n * @param {Boolean} `returnState` Adds the state to a `state` property on the returned regex. Useful for implementors and debugging.\n * @return {RegExp}\n * @api public\n */\n\npicomatch.compileRe = (state, options, returnOutput = false, returnState = false) => {\n  if (returnOutput === true) {\n    return state.output;\n  }\n\n  const opts = options || {};\n  const prepend = opts.contains ? '' : '^';\n  const append = opts.contains ? '' : '$';\n\n  let source = `${prepend}(?:${state.output})${append}`;\n  if (state && state.negated === true) {\n    source = `^(?!${source}).*$`;\n  }\n\n  const regex = picomatch.toRegex(source, options);\n  if (returnState === true) {\n    regex.state = state;\n  }\n\n  return regex;\n};\n\n/**\n * Create a regular expression from a parsed glob pattern.\n *\n * ```js\n * const picomatch = require('picomatch');\n * const state = picomatch.parse('*.js');\n * // picomatch.compileRe(state[, options]);\n *\n * console.log(picomatch.compileRe(state));\n * //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n * ```\n * @param {String} `state` The object returned from the `.parse` method.\n * @param {Object} `options`\n * @param {Boolean} `returnOutput` Implementors may use this argument to return the compiled output, instead of a regular expression. This is not exposed on the options to prevent end-users from mutating the result.\n * @param {Boolean} `returnState` Implementors may use this argument to return the state from the parsed glob with the returned regular expression.\n * @return {RegExp} Returns a regex created from the given pattern.\n * @api public\n */\n\npicomatch.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {\n  if (!input || typeof input !== 'string') {\n    throw new TypeError('Expected a non-empty string');\n  }\n\n  let parsed = { negated: false, fastpaths: true };\n\n  if (options.fastpaths !== false && (input[0] === '.' || input[0] === '*')) {\n    parsed.output = parse.fastpaths(input, options);\n  }\n\n  if (!parsed.output) {\n    parsed = parse(input, options);\n  }\n\n  return picomatch.compileRe(parsed, options, returnOutput, returnState);\n};\n\n/**\n * Create a regular expression from the given regex source string.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.toRegex(source[, options]);\n *\n * const { output } = picomatch.parse('*.js');\n * console.log(picomatch.toRegex(output));\n * //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n * ```\n * @param {String} `source` Regular expression source string.\n * @param {Object} `options`\n * @return {RegExp}\n * @api public\n */\n\npicomatch.toRegex = (source, options) => {\n  try {\n    const opts = options || {};\n    return new RegExp(source, opts.flags || (opts.nocase ? 'i' : ''));\n  } catch (err) {\n    if (options && options.debug === true) throw err;\n    return /$^/;\n  }\n};\n\n/**\n * Picomatch constants.\n * @return {Object}\n */\n\npicomatch.constants = constants;\n\n/**\n * Expose \"picomatch\"\n */\n\nmodule.exports = picomatch;\n","'use strict';\n\nconst pico = require('./lib/picomatch');\nconst utils = require('./lib/utils');\n\nfunction picomatch(glob, options, returnState = false) {\n  // default to os.platform()\n  if (options && (options.windows === null || options.windows === undefined)) {\n    // don't mutate the original options object\n    options = { ...options, windows: utils.isWindows() };\n  }\n\n  return pico(glob, options, returnState);\n}\n\nObject.assign(picomatch, pico);\nmodule.exports = picomatch;\n"],"names":["WIN_SLASH","WIN_NO_SLASH","DOT_LITERAL","PLUS_LITERAL","QMARK_LITERAL","SLASH_LITERAL","ONE_CHAR","QMARK","END_ANCHOR","START_ANCHOR","DOTS_SLASH","NO_DOT","NO_DOTS","NO_DOT_SLASH","NO_DOTS_SLASH","QMARK_NO_DOT","STAR","SEP","POSIX_CHARS","WINDOWS_CHARS","POSIX_REGEX_SOURCE","alnum","alpha","ascii","blank","cntrl","digit","graph","lower","print","punct","space","upper","word","xdigit","constants","MAX_LENGTH","REGEX_BACKSLASH","REGEX_NON_SPECIAL_CHARS","REGEX_SPECIAL_CHARS","REGEX_SPECIAL_CHARS_BACKREF","REGEX_SPECIAL_CHARS_GLOBAL","REGEX_REMOVE_BACKSLASH","REPLACEMENTS","CHAR_0","CHAR_9","CHAR_UPPERCASE_A","CHAR_LOWERCASE_A","CHAR_UPPERCASE_Z","CHAR_LOWERCASE_Z","CHAR_LEFT_PARENTHESES","CHAR_RIGHT_PARENTHESES","CHAR_ASTERISK","CHAR_AMPERSAND","CHAR_AT","CHAR_BACKWARD_SLASH","CHAR_CARRIAGE_RETURN","CHAR_CIRCUMFLEX_ACCENT","CHAR_COLON","CHAR_COMMA","CHAR_DOT","CHAR_DOUBLE_QUOTE","CHAR_EQUAL","CHAR_EXCLAMATION_MARK","CHAR_FORM_FEED","CHAR_FORWARD_SLASH","CHAR_GRAVE_ACCENT","CHAR_HASH","CHAR_HYPHEN_MINUS","CHAR_LEFT_ANGLE_BRACKET","CHAR_LEFT_CURLY_BRACE","CHAR_LEFT_SQUARE_BRACKET","CHAR_LINE_FEED","CHAR_NO_BREAK_SPACE","CHAR_PERCENT","CHAR_PLUS","CHAR_QUESTION_MARK","CHAR_RIGHT_ANGLE_BRACKET","CHAR_RIGHT_CURLY_BRACE","CHAR_RIGHT_SQUARE_BRACKET","CHAR_SEMICOLON","CHAR_SINGLE_QUOTE","CHAR_SPACE","CHAR_TAB","CHAR_UNDERSCORE","CHAR_VERTICAL_LINE","CHAR_ZERO_WIDTH_NOBREAK_SPACE","extglobChars","chars","type","open","close","globChars","win32","require$$0","exports","isObject","val","Array","isArray","hasRegexChars","str","test","isRegexChar","length","escapeRegex","replace","toPosixSlashes","isWindows","navigator","platform","toLowerCase","process","removeBackslashes","match","escapeLast","input","char","lastIdx","idx","lastIndexOf","slice","removePrefix","state","output","startsWith","prefix","wrapOutput","options","prepend","contains","append","negated","basename","path","windows","segs","split","last","utils","require$$1","isPathSeparator","code","depth","token","isPrefix","isGlobstar","Infinity","scan","opts","scanToEnd","parts","slashes","tokens","index","start","lastIndex","isBrace","isBracket","isGlob","isExtglob","braceEscaped","backslashes","negatedExtglob","finished","braces","prev","value","eos","peek","charCodeAt","advance","next","push","noext","isExtglobChar","nonegate","noparen","base","glob","unescape","maxDepth","prevIndex","n","i","scan_1","expandRange","args","sort","join","RegExp","ex","map","v","syntaxError","parse","TypeError","max","maxLength","Math","min","len","SyntaxError","bos","capture","PLATFORM_CHARS","EXTGLOB_CHARS","globstar","dot","nodot","qmarkNoDot","star","bash","noextglob","consumed","backtrack","brackets","parens","quotes","extglobs","stack","remaining","consume","num","negate","count","increment","decrement","pop","tok","extglob","inner","extglobOpen","conditions","extglobClose","rest","extglobStar","includes","expression","fastpaths","m","esc","first","repeat","exec","posix","pre","indexOf","keepQuotes","strictBrackets","nobracket","prevValue","literalBrackets","escaped","nobrace","outputIndex","tokensIndex","brace","dots","arr","range","unshift","comma","out","toks","t","isGroup","regex","noglobstar","prior","before","isStart","afterStar","after","strictSlashes","end","suffix","slashDot","create","source","parse_1","require$$2","require$$3","picomatch","returnState","fns","arrayMatcher","isMatch","isState","compileRe","makeRe","isIgnored","ignore","ignoreOpts","onMatch","onResult","matcher","returnObject","result","onIgnore","format","matchBase","Boolean","patterns","pattern","p","returnOutput","toRegex","parsed","flags","nocase","err","debug","picomatch_1","pico","undefined","Object","assign"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5]}