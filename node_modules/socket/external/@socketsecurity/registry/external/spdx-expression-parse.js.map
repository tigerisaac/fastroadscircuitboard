{"version":3,"file":"spdx-expression-parse.js","sources":["../../node_modules/spdx-expression-parse/scan.js","../../node_modules/spdx-expression-parse/parse.js","../../node_modules/spdx-expression-parse/index.js"],"sourcesContent":["'use strict'\n\nvar licenses = []\n  .concat(require('spdx-license-ids'))\n  .concat(require('spdx-license-ids/deprecated'))\nvar exceptions = require('spdx-exceptions')\n\nmodule.exports = function (source) {\n  var index = 0\n\n  function hasMore () {\n    return index < source.length\n  }\n\n  // `value` can be a regexp or a string.\n  // If it is recognized, the matching source string is returned and\n  // the index is incremented. Otherwise `undefined` is returned.\n  function read (value) {\n    if (value instanceof RegExp) {\n      var chars = source.slice(index)\n      var match = chars.match(value)\n      if (match) {\n        index += match[0].length\n        return match[0]\n      }\n    } else {\n      if (source.indexOf(value, index) === index) {\n        index += value.length\n        return value\n      }\n    }\n  }\n\n  function skipWhitespace () {\n    read(/[ ]*/)\n  }\n\n  function operator () {\n    var string\n    var possibilities = [/^WITH/i, /^AND/i, /^OR/i, '(', ')', ':', '+']\n    for (var i = 0; i < possibilities.length; i++) {\n      string = read(possibilities[i])\n      if (string) {\n        break\n      }\n    }\n\n    if (string === '+' && index > 1 && source[index - 2] === ' ') {\n      throw new Error('Space before `+`')\n    }\n\n    return string && {\n      type: 'OPERATOR',\n      string: string.toUpperCase()\n    }\n  }\n\n  function idstring () {\n    return read(/[A-Za-z0-9-.]+/)\n  }\n\n  function expectIdstring () {\n    var string = idstring()\n    if (!string) {\n      throw new Error('Expected idstring at offset ' + index)\n    }\n    return string\n  }\n\n  function documentRef () {\n    if (read('DocumentRef-')) {\n      var string = expectIdstring()\n      return { type: 'DOCUMENTREF', string: string }\n    }\n  }\n\n  function licenseRef () {\n    if (read('LicenseRef-')) {\n      var string = expectIdstring()\n      return { type: 'LICENSEREF', string: string }\n    }\n  }\n\n  function identifier () {\n    var begin = index\n    var string = idstring()\n\n    if (licenses.indexOf(string) !== -1) {\n      return {\n        type: 'LICENSE',\n        string: string\n      }\n    } else if (exceptions.indexOf(string) !== -1) {\n      return {\n        type: 'EXCEPTION',\n        string: string\n      }\n    }\n\n    index = begin\n  }\n\n  // Tries to read the next token. Returns `undefined` if no token is\n  // recognized.\n  function parseToken () {\n    // Ordering matters\n    return (\n      operator() ||\n      documentRef() ||\n      licenseRef() ||\n      identifier()\n    )\n  }\n\n  var tokens = []\n  while (hasMore()) {\n    skipWhitespace()\n    if (!hasMore()) {\n      break\n    }\n\n    var token = parseToken()\n    if (!token) {\n      throw new Error('Unexpected `' + source[index] +\n                      '` at offset ' + index)\n    }\n\n    tokens.push(token)\n  }\n  return tokens\n}\n","'use strict'\n\n// The ABNF grammar in the spec is totally ambiguous.\n//\n// This parser follows the operator precedence defined in the\n// `Order of Precedence and Parentheses` section.\n\nmodule.exports = function (tokens) {\n  var index = 0\n\n  function hasMore () {\n    return index < tokens.length\n  }\n\n  function token () {\n    return hasMore() ? tokens[index] : null\n  }\n\n  function next () {\n    if (!hasMore()) {\n      throw new Error()\n    }\n    index++\n  }\n\n  function parseOperator (operator) {\n    var t = token()\n    if (t && t.type === 'OPERATOR' && operator === t.string) {\n      next()\n      return t.string\n    }\n  }\n\n  function parseWith () {\n    if (parseOperator('WITH')) {\n      var t = token()\n      if (t && t.type === 'EXCEPTION') {\n        next()\n        return t.string\n      }\n      throw new Error('Expected exception after `WITH`')\n    }\n  }\n\n  function parseLicenseRef () {\n    // TODO: Actually, everything is concatenated into one string\n    // for backward-compatibility but it could be better to return\n    // a nice structure.\n    var begin = index\n    var string = ''\n    var t = token()\n    if (t.type === 'DOCUMENTREF') {\n      next()\n      string += 'DocumentRef-' + t.string + ':'\n      if (!parseOperator(':')) {\n        throw new Error('Expected `:` after `DocumentRef-...`')\n      }\n    }\n    t = token()\n    if (t.type === 'LICENSEREF') {\n      next()\n      string += 'LicenseRef-' + t.string\n      return { license: string }\n    }\n    index = begin\n  }\n\n  function parseLicense () {\n    var t = token()\n    if (t && t.type === 'LICENSE') {\n      next()\n      var node = { license: t.string }\n      if (parseOperator('+')) {\n        node.plus = true\n      }\n      var exception = parseWith()\n      if (exception) {\n        node.exception = exception\n      }\n      return node\n    }\n  }\n\n  function parseParenthesizedExpression () {\n    var left = parseOperator('(')\n    if (!left) {\n      return\n    }\n\n    var expr = parseExpression()\n\n    if (!parseOperator(')')) {\n      throw new Error('Expected `)`')\n    }\n\n    return expr\n  }\n\n  function parseAtom () {\n    return (\n      parseParenthesizedExpression() ||\n      parseLicenseRef() ||\n      parseLicense()\n    )\n  }\n\n  function makeBinaryOpParser (operator, nextParser) {\n    return function parseBinaryOp () {\n      var left = nextParser()\n      if (!left) {\n        return\n      }\n\n      if (!parseOperator(operator)) {\n        return left\n      }\n\n      var right = parseBinaryOp()\n      if (!right) {\n        throw new Error('Expected expression')\n      }\n      return {\n        left: left,\n        conjunction: operator.toLowerCase(),\n        right: right\n      }\n    }\n  }\n\n  var parseAnd = makeBinaryOpParser('AND', parseAtom)\n  var parseExpression = makeBinaryOpParser('OR', parseAnd)\n\n  var node = parseExpression()\n  if (!node || hasMore()) {\n    throw new Error('Syntax error')\n  }\n  return node\n}\n","'use strict'\n\nvar scan = require('./scan')\nvar parse = require('./parse')\n\nmodule.exports = function (source) {\n  return parse(scan(source))\n}\n"],"names":["licenses","concat","require$$0","require$$1","exceptions","require$$2","scan","source","index","hasMore","length","read","value","RegExp","chars","slice","match","indexOf","skipWhitespace","operator","string","possibilities","i","Error","type","toUpperCase","idstring","expectIdstring","documentRef","licenseRef","identifier","begin","parseToken","tokens","token","push","parse","next","parseOperator","t","parseWith","parseLicenseRef","license","parseLicense","node","plus","exception","parseParenthesizedExpression","left","expr","parseExpression","parseAtom","makeBinaryOpParser","nextParser","parseBinaryOp","right","conjunction","toLowerCase","parseAnd","spdxExpressionParse"],"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","x_google_ignoreList":[0,1,2]}