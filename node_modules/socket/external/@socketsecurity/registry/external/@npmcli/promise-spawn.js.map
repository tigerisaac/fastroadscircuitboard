{"version":3,"file":"promise-spawn.js","sources":["../../../node_modules/isexe/dist/cjs/posix.js","../../../node_modules/isexe/dist/cjs/win32.js","../../../node_modules/isexe/dist/cjs/index.js","../../../node_modules/which/lib/index.js","../../../node_modules/@npmcli/promise-spawn/lib/escape.js","../../../node_modules/@npmcli/promise-spawn/lib/index.js"],"sourcesContent":["\"use strict\";\n/**\n * This is the Posix implementation of isexe, which uses the file\n * mode and uid/gid values.\n *\n * @module\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sync = exports.isexe = void 0;\nconst fs_1 = require(\"fs\");\nconst promises_1 = require(\"fs/promises\");\n/**\n * Determine whether a path is executable according to the mode and\n * current (or specified) user and group IDs.\n */\nconst isexe = async (path, options = {}) => {\n    const { ignoreErrors = false } = options;\n    try {\n        return checkStat(await (0, promises_1.stat)(path), options);\n    }\n    catch (e) {\n        const er = e;\n        if (ignoreErrors || er.code === 'EACCES')\n            return false;\n        throw er;\n    }\n};\nexports.isexe = isexe;\n/**\n * Synchronously determine whether a path is executable according to\n * the mode and current (or specified) user and group IDs.\n */\nconst sync = (path, options = {}) => {\n    const { ignoreErrors = false } = options;\n    try {\n        return checkStat((0, fs_1.statSync)(path), options);\n    }\n    catch (e) {\n        const er = e;\n        if (ignoreErrors || er.code === 'EACCES')\n            return false;\n        throw er;\n    }\n};\nexports.sync = sync;\nconst checkStat = (stat, options) => stat.isFile() && checkMode(stat, options);\nconst checkMode = (stat, options) => {\n    const myUid = options.uid ?? process.getuid?.();\n    const myGroups = options.groups ?? process.getgroups?.() ?? [];\n    const myGid = options.gid ?? process.getgid?.() ?? myGroups[0];\n    if (myUid === undefined || myGid === undefined) {\n        throw new Error('cannot get uid or gid');\n    }\n    const groups = new Set([myGid, ...myGroups]);\n    const mod = stat.mode;\n    const uid = stat.uid;\n    const gid = stat.gid;\n    const u = parseInt('100', 8);\n    const g = parseInt('010', 8);\n    const o = parseInt('001', 8);\n    const ug = u | g;\n    return !!(mod & o ||\n        (mod & g && groups.has(gid)) ||\n        (mod & u && uid === myUid) ||\n        (mod & ug && myUid === 0));\n};\n//# sourceMappingURL=posix.js.map","\"use strict\";\n/**\n * This is the Windows implementation of isexe, which uses the file\n * extension and PATHEXT setting.\n *\n * @module\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sync = exports.isexe = void 0;\nconst fs_1 = require(\"fs\");\nconst promises_1 = require(\"fs/promises\");\n/**\n * Determine whether a path is executable based on the file extension\n * and PATHEXT environment variable (or specified pathExt option)\n */\nconst isexe = async (path, options = {}) => {\n    const { ignoreErrors = false } = options;\n    try {\n        return checkStat(await (0, promises_1.stat)(path), path, options);\n    }\n    catch (e) {\n        const er = e;\n        if (ignoreErrors || er.code === 'EACCES')\n            return false;\n        throw er;\n    }\n};\nexports.isexe = isexe;\n/**\n * Synchronously determine whether a path is executable based on the file\n * extension and PATHEXT environment variable (or specified pathExt option)\n */\nconst sync = (path, options = {}) => {\n    const { ignoreErrors = false } = options;\n    try {\n        return checkStat((0, fs_1.statSync)(path), path, options);\n    }\n    catch (e) {\n        const er = e;\n        if (ignoreErrors || er.code === 'EACCES')\n            return false;\n        throw er;\n    }\n};\nexports.sync = sync;\nconst checkPathExt = (path, options) => {\n    const { pathExt = process.env.PATHEXT || '' } = options;\n    const peSplit = pathExt.split(';');\n    if (peSplit.indexOf('') !== -1) {\n        return true;\n    }\n    for (let i = 0; i < peSplit.length; i++) {\n        const p = peSplit[i].toLowerCase();\n        const ext = path.substring(path.length - p.length).toLowerCase();\n        if (p && ext === p) {\n            return true;\n        }\n    }\n    return false;\n};\nconst checkStat = (stat, path, options) => stat.isFile() && checkPathExt(path, options);\n//# sourceMappingURL=win32.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sync = exports.isexe = exports.posix = exports.win32 = void 0;\nconst posix = __importStar(require(\"./posix.js\"));\nexports.posix = posix;\nconst win32 = __importStar(require(\"./win32.js\"));\nexports.win32 = win32;\n__exportStar(require(\"./options.js\"), exports);\nconst platform = process.env._ISEXE_TEST_PLATFORM_ || process.platform;\nconst impl = platform === 'win32' ? win32 : posix;\n/**\n * Determine whether a path is executable on the current platform.\n */\nexports.isexe = impl.isexe;\n/**\n * Synchronously determine whether a path is executable on the\n * current platform.\n */\nexports.sync = impl.sync;\n//# sourceMappingURL=index.js.map","const { isexe, sync: isexeSync } = require('isexe')\nconst { join, delimiter, sep, posix } = require('path')\n\nconst isWindows = process.platform === 'win32'\n\n// used to check for slashed in commands passed in. always checks for the posix\n// seperator on all platforms, and checks for the current separator when not on\n// a posix platform. don't use the isWindows check for this since that is mocked\n// in tests but we still need the code to actually work when called. that is also\n// why it is ignored from coverage.\n/* istanbul ignore next */\nconst rSlash = new RegExp(`[${posix.sep}${sep === posix.sep ? '' : sep}]`.replace(/(\\\\)/g, '\\\\$1'))\nconst rRel = new RegExp(`^\\\\.${rSlash.source}`)\n\nconst getNotFoundError = (cmd) =>\n  Object.assign(new Error(`not found: ${cmd}`), { code: 'ENOENT' })\n\nconst getPathInfo = (cmd, {\n  path: optPath = process.env.PATH,\n  pathExt: optPathExt = process.env.PATHEXT,\n  delimiter: optDelimiter = delimiter,\n}) => {\n  // If it has a slash, then we don't bother searching the pathenv.\n  // just check the file itself, and that's it.\n  const pathEnv = cmd.match(rSlash) ? [''] : [\n    // windows always checks the cwd first\n    ...(isWindows ? [process.cwd()] : []),\n    ...(optPath || /* istanbul ignore next: very unusual */ '').split(optDelimiter),\n  ]\n\n  if (isWindows) {\n    const pathExtExe = optPathExt ||\n      ['.EXE', '.CMD', '.BAT', '.COM'].join(optDelimiter)\n    const pathExt = pathExtExe.split(optDelimiter).flatMap((item) => [item, item.toLowerCase()])\n    if (cmd.includes('.') && pathExt[0] !== '') {\n      pathExt.unshift('')\n    }\n    return { pathEnv, pathExt, pathExtExe }\n  }\n\n  return { pathEnv, pathExt: [''] }\n}\n\nconst getPathPart = (raw, cmd) => {\n  const pathPart = /^\".*\"$/.test(raw) ? raw.slice(1, -1) : raw\n  const prefix = !pathPart && rRel.test(cmd) ? cmd.slice(0, 2) : ''\n  return prefix + join(pathPart, cmd)\n}\n\nconst which = async (cmd, opt = {}) => {\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt)\n  const found = []\n\n  for (const envPart of pathEnv) {\n    const p = getPathPart(envPart, cmd)\n\n    for (const ext of pathExt) {\n      const withExt = p + ext\n      const is = await isexe(withExt, { pathExt: pathExtExe, ignoreErrors: true })\n      if (is) {\n        if (!opt.all) {\n          return withExt\n        }\n        found.push(withExt)\n      }\n    }\n  }\n\n  if (opt.all && found.length) {\n    return found\n  }\n\n  if (opt.nothrow) {\n    return null\n  }\n\n  throw getNotFoundError(cmd)\n}\n\nconst whichSync = (cmd, opt = {}) => {\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt)\n  const found = []\n\n  for (const pathEnvPart of pathEnv) {\n    const p = getPathPart(pathEnvPart, cmd)\n\n    for (const ext of pathExt) {\n      const withExt = p + ext\n      const is = isexeSync(withExt, { pathExt: pathExtExe, ignoreErrors: true })\n      if (is) {\n        if (!opt.all) {\n          return withExt\n        }\n        found.push(withExt)\n      }\n    }\n  }\n\n  if (opt.all && found.length) {\n    return found\n  }\n\n  if (opt.nothrow) {\n    return null\n  }\n\n  throw getNotFoundError(cmd)\n}\n\nmodule.exports = which\nwhich.sync = whichSync\n","'use strict'\n\n// eslint-disable-next-line max-len\n// this code adapted from: https://blogs.msdn.microsoft.com/twistylittlepassagesallalike/2011/04/23/everyone-quotes-command-line-arguments-the-wrong-way/\nconst cmd = (input, doubleEscape) => {\n  if (!input.length) {\n    return '\"\"'\n  }\n\n  let result\n  if (!/[ \\t\\n\\v\"]/.test(input)) {\n    result = input\n  } else {\n    result = '\"'\n    for (let i = 0; i <= input.length; ++i) {\n      let slashCount = 0\n      while (input[i] === '\\\\') {\n        ++i\n        ++slashCount\n      }\n\n      if (i === input.length) {\n        result += '\\\\'.repeat(slashCount * 2)\n        break\n      }\n\n      if (input[i] === '\"') {\n        result += '\\\\'.repeat(slashCount * 2 + 1)\n        result += input[i]\n      } else {\n        result += '\\\\'.repeat(slashCount)\n        result += input[i]\n      }\n    }\n    result += '\"'\n  }\n\n  // and finally, prefix shell meta chars with a ^\n  result = result.replace(/[ !%^&()<>|\"]/g, '^$&')\n  if (doubleEscape) {\n    result = result.replace(/[ !%^&()<>|\"]/g, '^$&')\n  }\n\n  return result\n}\n\nconst sh = (input) => {\n  if (!input.length) {\n    return `''`\n  }\n\n  if (!/[\\t\\n\\r \"#$&'()*;<>?\\\\`|~]/.test(input)) {\n    return input\n  }\n\n  // replace single quotes with '\\'' and wrap the whole result in a fresh set of quotes\n  const result = `'${input.replace(/'/g, `'\\\\''`)}'`\n    // if the input string already had single quotes around it, clean those up\n    .replace(/^(?:'')+(?!$)/, '')\n    .replace(/\\\\'''/g, `\\\\'`)\n\n  return result\n}\n\nmodule.exports = {\n  cmd,\n  sh,\n}\n","'use strict'\n\nconst { spawn } = require('child_process')\nconst os = require('os')\nconst which = require('which')\n\nconst escape = require('./escape.js')\n\n// 'extra' object is for decorating the error a bit more\nconst promiseSpawn = (cmd, args, opts = {}, extra = {}) => {\n  if (opts.shell) {\n    return spawnWithShell(cmd, args, opts, extra)\n  }\n\n  let resolve, reject\n  const promise = new Promise((_resolve, _reject) => {\n    resolve = _resolve\n    reject = _reject\n  })\n\n  // Create error here so we have a more useful stack trace when rejecting\n  const closeError = new Error('command failed')\n\n  const stdout = []\n  const stderr = []\n\n  const getResult = (result) => ({\n    cmd,\n    args,\n    ...result,\n    ...stdioResult(stdout, stderr, opts),\n    ...extra,\n  })\n  const rejectWithOpts = (er, erOpts) => {\n    const resultError = getResult(erOpts)\n    reject(Object.assign(er, resultError))\n  }\n\n  const proc = spawn(cmd, args, opts)\n  promise.stdin = proc.stdin\n  promise.process = proc\n\n  proc.on('error', rejectWithOpts)\n\n  if (proc.stdout) {\n    proc.stdout.on('data', c => stdout.push(c))\n    proc.stdout.on('error', rejectWithOpts)\n  }\n\n  if (proc.stderr) {\n    proc.stderr.on('data', c => stderr.push(c))\n    proc.stderr.on('error', rejectWithOpts)\n  }\n\n  proc.on('close', (code, signal) => {\n    if (code || signal) {\n      rejectWithOpts(closeError, { code, signal })\n    } else {\n      resolve(getResult({ code, signal }))\n    }\n  })\n\n  return promise\n}\n\nconst spawnWithShell = (cmd, args, opts, extra) => {\n  let command = opts.shell\n  // if shell is set to true, we use a platform default. we can't let the core\n  // spawn method decide this for us because we need to know what shell is in use\n  // ahead of time so that we can escape arguments properly. we don't need coverage here.\n  if (command === true) {\n    // istanbul ignore next\n    command = process.platform === 'win32' ? process.env.ComSpec : 'sh'\n  }\n\n  const options = { ...opts, shell: false }\n  const realArgs = []\n  let script = cmd\n\n  // first, determine if we're in windows because if we are we need to know if we're\n  // running an .exe or a .cmd/.bat since the latter requires extra escaping\n  const isCmd = /(?:^|\\\\)cmd(?:\\.exe)?$/i.test(command)\n  if (isCmd) {\n    let doubleEscape = false\n\n    // find the actual command we're running\n    let initialCmd = ''\n    let insideQuotes = false\n    for (let i = 0; i < cmd.length; ++i) {\n      const char = cmd.charAt(i)\n      if (char === ' ' && !insideQuotes) {\n        break\n      }\n\n      initialCmd += char\n      if (char === '\"' || char === \"'\") {\n        insideQuotes = !insideQuotes\n      }\n    }\n\n    let pathToInitial\n    try {\n      pathToInitial = which.sync(initialCmd, {\n        path: (options.env && findInObject(options.env, 'PATH')) || process.env.PATH,\n        pathext: (options.env && findInObject(options.env, 'PATHEXT')) || process.env.PATHEXT,\n      }).toLowerCase()\n    } catch (err) {\n      pathToInitial = initialCmd.toLowerCase()\n    }\n\n    doubleEscape = pathToInitial.endsWith('.cmd') || pathToInitial.endsWith('.bat')\n    for (const arg of args) {\n      script += ` ${escape.cmd(arg, doubleEscape)}`\n    }\n    realArgs.push('/d', '/s', '/c', script)\n    options.windowsVerbatimArguments = true\n  } else {\n    for (const arg of args) {\n      script += ` ${escape.sh(arg)}`\n    }\n    realArgs.push('-c', script)\n  }\n\n  return promiseSpawn(command, realArgs, options, extra)\n}\n\n// open a file with the default application as defined by the user's OS\nconst open = (_args, opts = {}, extra = {}) => {\n  const options = { ...opts, shell: true }\n  const args = [].concat(_args)\n\n  let platform = process.platform\n  // process.platform === 'linux' may actually indicate WSL, if that's the case\n  // open the argument with sensible-browser which is pre-installed\n  // In WSL, set the default browser using, for example,\n  // export BROWSER=\"/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe\"\n  // or\n  // export BROWSER=\"/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe\"\n  // To permanently set the default browser, add the appropriate entry to your shell's\n  // RC file, e.g. .bashrc or .zshrc.\n  if (platform === 'linux' && os.release().toLowerCase().includes('microsoft')) {\n    platform = 'wsl'\n    if (!process.env.BROWSER) {\n      return Promise.reject(\n        new Error('Set the BROWSER environment variable to your desired browser.'))\n    }\n  }\n\n  let command = options.command\n  if (!command) {\n    if (platform === 'win32') {\n      // spawnWithShell does not do the additional os.release() check, so we\n      // have to force the shell here to make sure we treat WSL as windows.\n      options.shell = process.env.ComSpec\n      // also, the start command accepts a title so to make sure that we don't\n      // accidentally interpret the first arg as the title, we stick an empty\n      // string immediately after the start command\n      command = 'start \"\"'\n    } else if (platform === 'wsl') {\n      command = 'sensible-browser'\n    } else if (platform === 'darwin') {\n      command = 'open'\n    } else {\n      command = 'xdg-open'\n    }\n  }\n\n  return spawnWithShell(command, args, options, extra)\n}\npromiseSpawn.open = open\n\nconst isPipe = (stdio = 'pipe', fd) => {\n  if (stdio === 'pipe' || stdio === null) {\n    return true\n  }\n\n  if (Array.isArray(stdio)) {\n    return isPipe(stdio[fd], fd)\n  }\n\n  return false\n}\n\nconst stdioResult = (stdout, stderr, { stdioString = true, stdio }) => {\n  const result = {\n    stdout: null,\n    stderr: null,\n  }\n\n  // stdio is [stdin, stdout, stderr]\n  if (isPipe(stdio, 1)) {\n    result.stdout = Buffer.concat(stdout)\n    if (stdioString) {\n      result.stdout = result.stdout.toString().trim()\n    }\n  }\n\n  if (isPipe(stdio, 2)) {\n    result.stderr = Buffer.concat(stderr)\n    if (stdioString) {\n      result.stderr = result.stderr.toString().trim()\n    }\n  }\n\n  return result\n}\n\n// case insensitive lookup in an object\nconst findInObject = (obj, key) => {\n  key = key.toLowerCase()\n  for (const objKey of Object.keys(obj).sort()) {\n    if (objKey.toLowerCase() === key) {\n      return obj[objKey]\n    }\n  }\n}\n\nmodule.exports = promiseSpawn\n"],"names":["defineProperty","posix","value","isexe","fs_1","require$$0","promises_1","require$$1","path","options","ignoreErrors","checkStat","stat","er","e","code","sync","statSync","isFile","checkMode","myUid","uid","process","getuid","myGroups","groups","getgroups","myGid","gid","getgid","undefined","Error","Set","mod","mode","win32","pathExt","env","PATHEXT","peSplit","split","indexOf","__importStar","exports","isexeSync","join","delimiter","sep","isWindows","platform","rSlash","RegExp","replace","rRel","source","getNotFoundError","cmd","Object","assign","getPathInfo","optPath","PATH","optPathExt","optDelimiter","pathEnv","match","cwd","pathExtExe","flatMap","item","toLowerCase","includes","unshift","getPathPart","raw","pathPart","test","slice","prefix","which","opt","found","envPart","p","ext","withExt","is","all","push","length","nothrow","whichSync","pathEnvPart","lib","input","doubleEscape","result","i","slashCount","repeat","sh","_escape","spawn","os","require$$2","escape","require$$3","promiseSpawn","args","opts","extra","shell","spawnWithShell","resolve","reject","promise","Promise","_resolve","_reject","closeError","stdout","stderr","getResult","stdioResult","rejectWithOpts","erOpts","resultError","proc","stdin","on","c","signal","command","ComSpec","realArgs","script","isCmd","initialCmd","insideQuotes","char","charAt","pathToInitial","findInObject","pathext","err","endsWith","arg","windowsVerbatimArguments","open","_args","concat","release","BROWSER","isPipe","stdio","fd","Array","isArray","stdioString","Buffer","toString","trim","obj","key","objKey","keys","sort"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5]}