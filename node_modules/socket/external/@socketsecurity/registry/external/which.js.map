{"version":3,"file":"which.js","sources":["../../node_modules/isexe/dist/cjs/posix.js","../../node_modules/isexe/dist/cjs/win32.js","../../node_modules/isexe/dist/cjs/index.js","../../node_modules/which/lib/index.js"],"sourcesContent":["\"use strict\";\n/**\n * This is the Posix implementation of isexe, which uses the file\n * mode and uid/gid values.\n *\n * @module\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sync = exports.isexe = void 0;\nconst fs_1 = require(\"fs\");\nconst promises_1 = require(\"fs/promises\");\n/**\n * Determine whether a path is executable according to the mode and\n * current (or specified) user and group IDs.\n */\nconst isexe = async (path, options = {}) => {\n    const { ignoreErrors = false } = options;\n    try {\n        return checkStat(await (0, promises_1.stat)(path), options);\n    }\n    catch (e) {\n        const er = e;\n        if (ignoreErrors || er.code === 'EACCES')\n            return false;\n        throw er;\n    }\n};\nexports.isexe = isexe;\n/**\n * Synchronously determine whether a path is executable according to\n * the mode and current (or specified) user and group IDs.\n */\nconst sync = (path, options = {}) => {\n    const { ignoreErrors = false } = options;\n    try {\n        return checkStat((0, fs_1.statSync)(path), options);\n    }\n    catch (e) {\n        const er = e;\n        if (ignoreErrors || er.code === 'EACCES')\n            return false;\n        throw er;\n    }\n};\nexports.sync = sync;\nconst checkStat = (stat, options) => stat.isFile() && checkMode(stat, options);\nconst checkMode = (stat, options) => {\n    const myUid = options.uid ?? process.getuid?.();\n    const myGroups = options.groups ?? process.getgroups?.() ?? [];\n    const myGid = options.gid ?? process.getgid?.() ?? myGroups[0];\n    if (myUid === undefined || myGid === undefined) {\n        throw new Error('cannot get uid or gid');\n    }\n    const groups = new Set([myGid, ...myGroups]);\n    const mod = stat.mode;\n    const uid = stat.uid;\n    const gid = stat.gid;\n    const u = parseInt('100', 8);\n    const g = parseInt('010', 8);\n    const o = parseInt('001', 8);\n    const ug = u | g;\n    return !!(mod & o ||\n        (mod & g && groups.has(gid)) ||\n        (mod & u && uid === myUid) ||\n        (mod & ug && myUid === 0));\n};\n//# sourceMappingURL=posix.js.map","\"use strict\";\n/**\n * This is the Windows implementation of isexe, which uses the file\n * extension and PATHEXT setting.\n *\n * @module\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sync = exports.isexe = void 0;\nconst fs_1 = require(\"fs\");\nconst promises_1 = require(\"fs/promises\");\n/**\n * Determine whether a path is executable based on the file extension\n * and PATHEXT environment variable (or specified pathExt option)\n */\nconst isexe = async (path, options = {}) => {\n    const { ignoreErrors = false } = options;\n    try {\n        return checkStat(await (0, promises_1.stat)(path), path, options);\n    }\n    catch (e) {\n        const er = e;\n        if (ignoreErrors || er.code === 'EACCES')\n            return false;\n        throw er;\n    }\n};\nexports.isexe = isexe;\n/**\n * Synchronously determine whether a path is executable based on the file\n * extension and PATHEXT environment variable (or specified pathExt option)\n */\nconst sync = (path, options = {}) => {\n    const { ignoreErrors = false } = options;\n    try {\n        return checkStat((0, fs_1.statSync)(path), path, options);\n    }\n    catch (e) {\n        const er = e;\n        if (ignoreErrors || er.code === 'EACCES')\n            return false;\n        throw er;\n    }\n};\nexports.sync = sync;\nconst checkPathExt = (path, options) => {\n    const { pathExt = process.env.PATHEXT || '' } = options;\n    const peSplit = pathExt.split(';');\n    if (peSplit.indexOf('') !== -1) {\n        return true;\n    }\n    for (let i = 0; i < peSplit.length; i++) {\n        const p = peSplit[i].toLowerCase();\n        const ext = path.substring(path.length - p.length).toLowerCase();\n        if (p && ext === p) {\n            return true;\n        }\n    }\n    return false;\n};\nconst checkStat = (stat, path, options) => stat.isFile() && checkPathExt(path, options);\n//# sourceMappingURL=win32.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sync = exports.isexe = exports.posix = exports.win32 = void 0;\nconst posix = __importStar(require(\"./posix.js\"));\nexports.posix = posix;\nconst win32 = __importStar(require(\"./win32.js\"));\nexports.win32 = win32;\n__exportStar(require(\"./options.js\"), exports);\nconst platform = process.env._ISEXE_TEST_PLATFORM_ || process.platform;\nconst impl = platform === 'win32' ? win32 : posix;\n/**\n * Determine whether a path is executable on the current platform.\n */\nexports.isexe = impl.isexe;\n/**\n * Synchronously determine whether a path is executable on the\n * current platform.\n */\nexports.sync = impl.sync;\n//# sourceMappingURL=index.js.map","const { isexe, sync: isexeSync } = require('isexe')\nconst { join, delimiter, sep, posix } = require('path')\n\nconst isWindows = process.platform === 'win32'\n\n// used to check for slashed in commands passed in. always checks for the posix\n// seperator on all platforms, and checks for the current separator when not on\n// a posix platform. don't use the isWindows check for this since that is mocked\n// in tests but we still need the code to actually work when called. that is also\n// why it is ignored from coverage.\n/* istanbul ignore next */\nconst rSlash = new RegExp(`[${posix.sep}${sep === posix.sep ? '' : sep}]`.replace(/(\\\\)/g, '\\\\$1'))\nconst rRel = new RegExp(`^\\\\.${rSlash.source}`)\n\nconst getNotFoundError = (cmd) =>\n  Object.assign(new Error(`not found: ${cmd}`), { code: 'ENOENT' })\n\nconst getPathInfo = (cmd, {\n  path: optPath = process.env.PATH,\n  pathExt: optPathExt = process.env.PATHEXT,\n  delimiter: optDelimiter = delimiter,\n}) => {\n  // If it has a slash, then we don't bother searching the pathenv.\n  // just check the file itself, and that's it.\n  const pathEnv = cmd.match(rSlash) ? [''] : [\n    // windows always checks the cwd first\n    ...(isWindows ? [process.cwd()] : []),\n    ...(optPath || /* istanbul ignore next: very unusual */ '').split(optDelimiter),\n  ]\n\n  if (isWindows) {\n    const pathExtExe = optPathExt ||\n      ['.EXE', '.CMD', '.BAT', '.COM'].join(optDelimiter)\n    const pathExt = pathExtExe.split(optDelimiter).flatMap((item) => [item, item.toLowerCase()])\n    if (cmd.includes('.') && pathExt[0] !== '') {\n      pathExt.unshift('')\n    }\n    return { pathEnv, pathExt, pathExtExe }\n  }\n\n  return { pathEnv, pathExt: [''] }\n}\n\nconst getPathPart = (raw, cmd) => {\n  const pathPart = /^\".*\"$/.test(raw) ? raw.slice(1, -1) : raw\n  const prefix = !pathPart && rRel.test(cmd) ? cmd.slice(0, 2) : ''\n  return prefix + join(pathPart, cmd)\n}\n\nconst which = async (cmd, opt = {}) => {\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt)\n  const found = []\n\n  for (const envPart of pathEnv) {\n    const p = getPathPart(envPart, cmd)\n\n    for (const ext of pathExt) {\n      const withExt = p + ext\n      const is = await isexe(withExt, { pathExt: pathExtExe, ignoreErrors: true })\n      if (is) {\n        if (!opt.all) {\n          return withExt\n        }\n        found.push(withExt)\n      }\n    }\n  }\n\n  if (opt.all && found.length) {\n    return found\n  }\n\n  if (opt.nothrow) {\n    return null\n  }\n\n  throw getNotFoundError(cmd)\n}\n\nconst whichSync = (cmd, opt = {}) => {\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt)\n  const found = []\n\n  for (const pathEnvPart of pathEnv) {\n    const p = getPathPart(pathEnvPart, cmd)\n\n    for (const ext of pathExt) {\n      const withExt = p + ext\n      const is = isexeSync(withExt, { pathExt: pathExtExe, ignoreErrors: true })\n      if (is) {\n        if (!opt.all) {\n          return withExt\n        }\n        found.push(withExt)\n      }\n    }\n  }\n\n  if (opt.all && found.length) {\n    return found\n  }\n\n  if (opt.nothrow) {\n    return null\n  }\n\n  throw getNotFoundError(cmd)\n}\n\nmodule.exports = which\nwhich.sync = whichSync\n"],"names":["defineProperty","posix","value","isexe","fs_1","require$$0","promises_1","require$$1","path","options","ignoreErrors","checkStat","stat","er","e","code","sync","statSync","isFile","checkMode","myUid","uid","process","getuid","myGroups","groups","getgroups","myGid","gid","getgid","undefined","Error","Set","mod","mode","win32","pathExt","env","PATHEXT","peSplit","split","indexOf","__importStar","exports","isexeSync","join","delimiter","sep","isWindows","platform","rSlash","RegExp","replace","rRel","source","getNotFoundError","cmd","Object","assign","getPathInfo","optPath","PATH","optPathExt","optDelimiter","pathEnv","match","cwd","pathExtExe","flatMap","item","toLowerCase","includes","unshift","getPathPart","raw","pathPart","test","slice","prefix","which","opt","found","envPart","p","ext","withExt","is","all","push","length","nothrow","whichSync","pathEnvPart","lib"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}