'use strict'

const require$$0$1 = require('process')
const require$$0 = require('tty')
const require$$2 = require('util')

let yoctocolorsCjs
let hasRequiredYoctocolorsCjs
function requireYoctocolorsCjs() {
  if (hasRequiredYoctocolorsCjs) {
    return yoctocolorsCjs
  }
  hasRequiredYoctocolorsCjs = 1
  const tty = require$$0

  // eslint-disable-next-line no-warning-comments
  // TODO: Use a better method when it's added to Node.js (https://github.com/nodejs/node/pull/40240)
  // Lots of optionals here to support Deno.
  const hasColors = tty?.WriteStream?.prototype?.hasColors?.() ?? false
  const format = (open, close) => {
    if (!hasColors) {
      return input => input
    }
    const openCode = `\u001B[${open}m`
    const closeCode = `\u001B[${close}m`
    return input => {
      const string = input + '' // eslint-disable-line no-implicit-coercion -- This is faster.
      let index = string.indexOf(closeCode)
      if (index === -1) {
        // Note: Intentionally not using string interpolation for performance reasons.
        return openCode + string + closeCode
      }

      // Handle nested colors.

      // We could have done this, but it's too slow (as of Node.js 22).
      // return openCode + string.replaceAll(closeCode, openCode) + closeCode;

      let result = openCode
      let lastIndex = 0
      while (index !== -1) {
        result += string.slice(lastIndex, index) + openCode
        lastIndex = index + closeCode.length
        index = string.indexOf(closeCode, lastIndex)
      }
      result += string.slice(lastIndex) + closeCode
      return result
    }
  }
  const colors = {}
  colors.reset = format(0, 0)
  colors.bold = format(1, 22)
  colors.dim = format(2, 22)
  colors.italic = format(3, 23)
  colors.underline = format(4, 24)
  colors.overline = format(53, 55)
  colors.inverse = format(7, 27)
  colors.hidden = format(8, 28)
  colors.strikethrough = format(9, 29)
  colors.black = format(30, 39)
  colors.red = format(31, 39)
  colors.green = format(32, 39)
  colors.yellow = format(33, 39)
  colors.blue = format(34, 39)
  colors.magenta = format(35, 39)
  colors.cyan = format(36, 39)
  colors.white = format(37, 39)
  colors.gray = format(90, 39)
  colors.bgBlack = format(40, 49)
  colors.bgRed = format(41, 49)
  colors.bgGreen = format(42, 49)
  colors.bgYellow = format(43, 49)
  colors.bgBlue = format(44, 49)
  colors.bgMagenta = format(45, 49)
  colors.bgCyan = format(46, 49)
  colors.bgWhite = format(47, 49)
  colors.bgGray = format(100, 49)
  colors.redBright = format(91, 39)
  colors.greenBright = format(92, 39)
  colors.yellowBright = format(93, 39)
  colors.blueBright = format(94, 39)
  colors.magentaBright = format(95, 39)
  colors.cyanBright = format(96, 39)
  colors.whiteBright = format(97, 39)
  colors.bgRedBright = format(101, 49)
  colors.bgGreenBright = format(102, 49)
  colors.bgYellowBright = format(103, 49)
  colors.bgBlueBright = format(104, 49)
  colors.bgMagentaBright = format(105, 49)
  colors.bgCyanBright = format(106, 49)
  colors.bgWhiteBright = format(107, 49)
  yoctocolorsCjs = colors
  return yoctocolorsCjs
}

let yoctoSpinner
let hasRequiredYoctoSpinner
function requireYoctoSpinner() {
  if (hasRequiredYoctoSpinner) {
    return yoctoSpinner
  }
  hasRequiredYoctoSpinner = 1
  const defaultTtyColumns = 80
  let _defaultSpinner
  function getDefaultSpinner() {
    if (_defaultSpinner === undefined) {
      _defaultSpinner = {
        frames: isUnicodeSupported()
          ? ['⠋', '⠙', '⠹', '⠸', '⠼', '⠴', '⠦', '⠧', '⠇', '⠏']
          : ['-', '\\', '|', '/'],
        interval: 80
      }
    }
    return _defaultSpinner
  }
  let _logSymbols
  function getLogSymbols() {
    if (_logSymbols === undefined) {
      const supported = isUnicodeSupported()
      const colors = getYoctocolors()
      _logSymbols = {
        error: colors.red(supported ? '✖️' : '×'),
        info: colors.blue(supported ? 'ℹ' : 'i'),
        success: colors.green(supported ? '✔' : '√'),
        warning: colors.yellow(supported ? '⚠' : '‼')
      }
    }
    return _logSymbols
  }
  let _process
  function getProcess() {
    if (_process === undefined) {
      // Use non-'node:' prefixed require to avoid Webpack errors.
      // eslint-disable-next-line n/prefer-node-protocol
      _process = require$$0$1
    }
    return _process
  }
  let _yoctocolors
  function getYoctocolors() {
    if (_yoctocolors === undefined) {
      _yoctocolors = {
        .../*@__PURE__*/ requireYoctocolorsCjs()
      }
    }
    return _yoctocolors
  }
  let _processInteractive
  function isProcessInteractive() {
    if (_processInteractive === undefined) {
      const { env } = getProcess()
      _processInteractive = env.TERM !== 'dumb' && !('CI' in env)
    }
    return _processInteractive
  }
  let _unicodeSupported
  function isUnicodeSupported() {
    if (_unicodeSupported === undefined) {
      const process = getProcess()
      if (process.platform !== 'win32') {
        // Linux console (kernel).
        _unicodeSupported = process.env.TERM !== 'linux'
        return _unicodeSupported
      }
      const { env } = process
      if (
        // Windows Terminal.
        !!env.WT_SESSION ||
        // Terminus (<0.2.27).
        !!env.TERMINUS_SUBLIME ||
        // ConEmu and cmder.
        env.ConEmuTask === '{cmd::Cmder}'
      ) {
        _unicodeSupported = true
        return _unicodeSupported
      }
      const { TERM, TERM_PROGRAM } = env
      _unicodeSupported =
        TERM_PROGRAM === 'Terminus-Sublime' ||
        TERM_PROGRAM === 'vscode' ||
        TERM === 'xterm-256color' ||
        TERM === 'alacritty' ||
        TERM === 'rxvt-unicode' ||
        TERM === 'rxvt-unicode-256color' ||
        env.TERMINAL_EMULATOR === 'JetBrains-JediTerm'
    }
    return _unicodeSupported
  }
  let _stripVTControlCharacters
  function stripVTControlCharacters(string) {
    if (_stripVTControlCharacters === undefined) {
      // Use non-'node:' prefixed require to avoid Webpack errors.
      // eslint-disable-next-line n/prefer-node-protocol
      _stripVTControlCharacters = require$$2.stripVTControlCharacters
    }
    return _stripVTControlCharacters(string)
  }
  class YoctoSpinner {
    #color
    #currentFrame = -1
    #exitHandlerBound
    #frames
    #interval
    #isInteractive
    #lastSpinnerFrameTime = 0
    #lines = 0
    #signal
    #stream
    #text
    #timer
    constructor(options = {}) {
      const opts = {
        __proto__: null,
        ...options
      }
      const spinner = opts.spinner ?? getDefaultSpinner()
      const stream = opts.stream ?? getProcess().stderr
      this.#color = opts.color ?? 'cyan'
      this.#exitHandlerBound = this.#exitHandler.bind(this)
      this.#frames = spinner.frames
      this.#interval = spinner.interval ?? getDefaultSpinner().interval
      this.#isInteractive = !!stream.isTTY && isProcessInteractive()
      this.#signal = opts.signal
      this.#stream = stream
      this.#text = opts.text ?? ''
    }
    #clearTimer() {
      clearInterval(this.#timer)
      this.#timer = undefined
    }
    #exitHandler() {
      if (this.isSpinning) {
        this.stop()
      }
    }
    #hideCursor() {
      if (this.#isInteractive) {
        this.#write('\u001B[?25l')
      }
    }
    #lineCount(text) {
      const width = this.#stream.columns ?? defaultTtyColumns
      const lines = stripVTControlCharacters(text).split('\n')
      let lineCount = 0
      for (const line of lines) {
        lineCount += Math.max(1, Math.ceil(line.length / width))
      }
      return lineCount
    }
    #render() {
      // Ensure we only update the spinner frame at the wanted interval,
      // even if the frame method is called more often.
      const now = Date.now()
      if (
        this.#currentFrame === -1 ||
        now - this.#lastSpinnerFrameTime >= this.#interval
      ) {
        this.#currentFrame = (this.#currentFrame + 1) % this.#frames.length
        this.#lastSpinnerFrameTime = now
      }
      const colors = getYoctocolors()
      const applyColor = colors[this.#color] ?? colors.cyan
      const frame = this.#frames[this.#currentFrame]
      let string = `${applyColor(frame)} ${this.#text}`
      if (!this.#isInteractive) {
        string += '\n'
      }
      this.clear()
      this.#write(string)
      if (this.#isInteractive) {
        this.#lines = this.#lineCount(string)
      }
    }
    #setTimer() {
      const timeout = setInterval(() => {
        this.#render()
      }, this.#interval)
      // Guard unref usage in case yocto-spinner is somehow built to run in a browser.
      // https://nodejs.org/api/timers.html#timeoutunref
      timeout?.unref?.()
      this.#timer = timeout
    }
    #showCursor() {
      if (this.#isInteractive) {
        this.#write('\u001B[?25h')
      }
    }
    #subscribeToExitEvents() {
      this.#signal?.addEventListener('abort', this.#exitHandlerBound)
      process.once('SIGINT', this.#exitHandlerBound)
      process.once('SIGTERM', this.#exitHandlerBound)
    }
    #symbolStop(symbolType, text) {
      const symbols = getLogSymbols()
      return this.stop(`${symbols[symbolType]} ${text ?? this.#text}`)
    }
    #unsubscribeFromExitEvents() {
      this.#signal?.removeEventListener('abort', this.#exitHandlerBound)
      process.off('SIGINT', this.#exitHandlerBound)
      process.off('SIGTERM', this.#exitHandlerBound)
    }
    #write(text) {
      this.#stream.write(text)
    }
    get color() {
      return this.#color
    }
    set color(value) {
      this.#color = value
      this.#render()
    }
    get isSpinning() {
      return this.#timer !== undefined
    }
    get text() {
      return this.#text
    }
    set text(value) {
      const text = value ?? ''
      this.#text = typeof text === 'string' ? text : String(text)
      this.#render()
    }
    clear() {
      if (!this.#isInteractive) {
        return this
      }
      this.#stream.cursorTo(0)
      for (let index = 0; index < this.#lines; index += 1) {
        if (index > 0) {
          this.#stream.moveCursor(0, -1)
        }
        this.#stream.clearLine(1)
      }
      this.#lines = 0
      return this
    }
    error(text) {
      return this.#symbolStop('error', text)
    }
    info(text) {
      return this.#symbolStop('info', text)
    }
    start(text) {
      if (text) {
        this.#text = text
      }
      if (this.isSpinning) {
        return this
      }
      this.#hideCursor()
      this.#render()
      this.#setTimer()
      this.#subscribeToExitEvents()
      return this
    }
    stop(finalText) {
      if (!this.isSpinning) {
        return this
      }
      this.#showCursor()
      this.clear()
      this.#clearTimer()
      this.#unsubscribeFromExitEvents()
      if (finalText) {
        this.#stream.write(`${finalText}\n`)
      }
      return this
    }
    success(text) {
      return this.#symbolStop('success', text)
    }
    warning(text) {
      return this.#symbolStop('warning', text)
    }
  }
  yoctoSpinner = function yoctoSpinner(options) {
    return new YoctoSpinner(options)
  }
  return yoctoSpinner
}

const yoctoSpinnerExports = /*@__PURE__*/ requireYoctoSpinner()

module.exports = yoctoSpinnerExports
//# sourceMappingURL=yocto-spinner.js.map
