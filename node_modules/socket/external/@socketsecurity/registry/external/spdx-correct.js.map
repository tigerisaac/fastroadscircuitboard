{"version":3,"file":"spdx-correct.js","sources":["../../node_modules/spdx-correct/node_modules/spdx-expression-parse/scan.js","../../node_modules/spdx-correct/node_modules/spdx-expression-parse/parse.js","../../node_modules/spdx-correct/node_modules/spdx-expression-parse/index.js","../../node_modules/spdx-correct/index.js"],"sourcesContent":["'use strict'\n\nvar licenses = []\n  .concat(require('spdx-license-ids'))\n  .concat(require('spdx-license-ids/deprecated'))\nvar exceptions = require('spdx-exceptions')\n\nmodule.exports = function (source) {\n  var index = 0\n\n  function hasMore () {\n    return index < source.length\n  }\n\n  // `value` can be a regexp or a string.\n  // If it is recognized, the matching source string is returned and\n  // the index is incremented. Otherwise `undefined` is returned.\n  function read (value) {\n    if (value instanceof RegExp) {\n      var chars = source.slice(index)\n      var match = chars.match(value)\n      if (match) {\n        index += match[0].length\n        return match[0]\n      }\n    } else {\n      if (source.indexOf(value, index) === index) {\n        index += value.length\n        return value\n      }\n    }\n  }\n\n  function skipWhitespace () {\n    read(/[ ]*/)\n  }\n\n  function operator () {\n    var string\n    var possibilities = ['WITH', 'AND', 'OR', '(', ')', ':', '+']\n    for (var i = 0; i < possibilities.length; i++) {\n      string = read(possibilities[i])\n      if (string) {\n        break\n      }\n    }\n\n    if (string === '+' && index > 1 && source[index - 2] === ' ') {\n      throw new Error('Space before `+`')\n    }\n\n    return string && {\n      type: 'OPERATOR',\n      string: string\n    }\n  }\n\n  function idstring () {\n    return read(/[A-Za-z0-9-.]+/)\n  }\n\n  function expectIdstring () {\n    var string = idstring()\n    if (!string) {\n      throw new Error('Expected idstring at offset ' + index)\n    }\n    return string\n  }\n\n  function documentRef () {\n    if (read('DocumentRef-')) {\n      var string = expectIdstring()\n      return { type: 'DOCUMENTREF', string: string }\n    }\n  }\n\n  function licenseRef () {\n    if (read('LicenseRef-')) {\n      var string = expectIdstring()\n      return { type: 'LICENSEREF', string: string }\n    }\n  }\n\n  function identifier () {\n    var begin = index\n    var string = idstring()\n\n    if (licenses.indexOf(string) !== -1) {\n      return {\n        type: 'LICENSE',\n        string: string\n      }\n    } else if (exceptions.indexOf(string) !== -1) {\n      return {\n        type: 'EXCEPTION',\n        string: string\n      }\n    }\n\n    index = begin\n  }\n\n  // Tries to read the next token. Returns `undefined` if no token is\n  // recognized.\n  function parseToken () {\n    // Ordering matters\n    return (\n      operator() ||\n      documentRef() ||\n      licenseRef() ||\n      identifier()\n    )\n  }\n\n  var tokens = []\n  while (hasMore()) {\n    skipWhitespace()\n    if (!hasMore()) {\n      break\n    }\n\n    var token = parseToken()\n    if (!token) {\n      throw new Error('Unexpected `' + source[index] +\n                      '` at offset ' + index)\n    }\n\n    tokens.push(token)\n  }\n  return tokens\n}\n","'use strict'\n\n// The ABNF grammar in the spec is totally ambiguous.\n//\n// This parser follows the operator precedence defined in the\n// `Order of Precedence and Parentheses` section.\n\nmodule.exports = function (tokens) {\n  var index = 0\n\n  function hasMore () {\n    return index < tokens.length\n  }\n\n  function token () {\n    return hasMore() ? tokens[index] : null\n  }\n\n  function next () {\n    if (!hasMore()) {\n      throw new Error()\n    }\n    index++\n  }\n\n  function parseOperator (operator) {\n    var t = token()\n    if (t && t.type === 'OPERATOR' && operator === t.string) {\n      next()\n      return t.string\n    }\n  }\n\n  function parseWith () {\n    if (parseOperator('WITH')) {\n      var t = token()\n      if (t && t.type === 'EXCEPTION') {\n        next()\n        return t.string\n      }\n      throw new Error('Expected exception after `WITH`')\n    }\n  }\n\n  function parseLicenseRef () {\n    // TODO: Actually, everything is concatenated into one string\n    // for backward-compatibility but it could be better to return\n    // a nice structure.\n    var begin = index\n    var string = ''\n    var t = token()\n    if (t.type === 'DOCUMENTREF') {\n      next()\n      string += 'DocumentRef-' + t.string + ':'\n      if (!parseOperator(':')) {\n        throw new Error('Expected `:` after `DocumentRef-...`')\n      }\n    }\n    t = token()\n    if (t.type === 'LICENSEREF') {\n      next()\n      string += 'LicenseRef-' + t.string\n      return { license: string }\n    }\n    index = begin\n  }\n\n  function parseLicense () {\n    var t = token()\n    if (t && t.type === 'LICENSE') {\n      next()\n      var node = { license: t.string }\n      if (parseOperator('+')) {\n        node.plus = true\n      }\n      var exception = parseWith()\n      if (exception) {\n        node.exception = exception\n      }\n      return node\n    }\n  }\n\n  function parseParenthesizedExpression () {\n    var left = parseOperator('(')\n    if (!left) {\n      return\n    }\n\n    var expr = parseExpression()\n\n    if (!parseOperator(')')) {\n      throw new Error('Expected `)`')\n    }\n\n    return expr\n  }\n\n  function parseAtom () {\n    return (\n      parseParenthesizedExpression() ||\n      parseLicenseRef() ||\n      parseLicense()\n    )\n  }\n\n  function makeBinaryOpParser (operator, nextParser) {\n    return function parseBinaryOp () {\n      var left = nextParser()\n      if (!left) {\n        return\n      }\n\n      if (!parseOperator(operator)) {\n        return left\n      }\n\n      var right = parseBinaryOp()\n      if (!right) {\n        throw new Error('Expected expression')\n      }\n      return {\n        left: left,\n        conjunction: operator.toLowerCase(),\n        right: right\n      }\n    }\n  }\n\n  var parseAnd = makeBinaryOpParser('AND', parseAtom)\n  var parseExpression = makeBinaryOpParser('OR', parseAnd)\n\n  var node = parseExpression()\n  if (!node || hasMore()) {\n    throw new Error('Syntax error')\n  }\n  return node\n}\n","'use strict'\n\nvar scan = require('./scan')\nvar parse = require('./parse')\n\nmodule.exports = function (source) {\n  return parse(scan(source))\n}\n","/*\nCopyright spdx-correct.js contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nvar parse = require('spdx-expression-parse')\nvar spdxLicenseIds = require('spdx-license-ids')\n\nfunction valid (string) {\n  try {\n    parse(string)\n    return true\n  } catch (error) {\n    return false\n  }\n}\n\n// Sorting function that orders the given array of transpositions such\n// that a transposition with the longer pattern comes before a transposition\n// with a shorter pattern. This is to prevent e.g. the transposition\n// [\"General Public License\", \"GPL\"] from matching to \"Lesser General Public License\"\n// before a longer and more accurate transposition [\"Lesser General Public License\", \"LGPL\"]\n// has a chance to be recognized.\nfunction sortTranspositions(a, b) {\n  var length = b[0].length - a[0].length\n  if (length !== 0) return length\n  return a[0].toUpperCase().localeCompare(b[0].toUpperCase())\n}\n\n// Common transpositions of license identifier acronyms\nvar transpositions = [\n  ['APGL', 'AGPL'],\n  ['Gpl', 'GPL'],\n  ['GLP', 'GPL'],\n  ['APL', 'Apache'],\n  ['ISD', 'ISC'],\n  ['GLP', 'GPL'],\n  ['IST', 'ISC'],\n  ['Claude', 'Clause'],\n  [' or later', '+'],\n  [' International', ''],\n  ['GNU', 'GPL'],\n  ['GUN', 'GPL'],\n  ['+', ''],\n  ['GNU GPL', 'GPL'],\n  ['GNU LGPL', 'LGPL'],\n  ['GNU/GPL', 'GPL'],\n  ['GNU GLP', 'GPL'],\n  ['GNU LESSER GENERAL PUBLIC LICENSE', 'LGPL'],\n  ['GNU Lesser General Public License', 'LGPL'],\n  ['GNU LESSER GENERAL PUBLIC LICENSE', 'LGPL-2.1'],\n  ['GNU Lesser General Public License', 'LGPL-2.1'],\n  ['LESSER GENERAL PUBLIC LICENSE', 'LGPL'],\n  ['Lesser General Public License', 'LGPL'],\n  ['LESSER GENERAL PUBLIC LICENSE', 'LGPL-2.1'],\n  ['Lesser General Public License', 'LGPL-2.1'],\n  ['GNU General Public License', 'GPL'],\n  ['Gnu public license', 'GPL'],\n  ['GNU Public License', 'GPL'],\n  ['GNU GENERAL PUBLIC LICENSE', 'GPL'],\n  ['MTI', 'MIT'],\n  ['Mozilla Public License', 'MPL'],\n  ['Universal Permissive License', 'UPL'],\n  ['WTH', 'WTF'],\n  ['WTFGPL', 'WTFPL'],\n  ['-License', '']\n].sort(sortTranspositions)\n\nvar TRANSPOSED = 0\nvar CORRECT = 1\n\n// Simple corrections to nearly valid identifiers.\nvar transforms = [\n  // e.g. 'mit'\n  function (argument) {\n    return argument.toUpperCase()\n  },\n  // e.g. 'MIT '\n  function (argument) {\n    return argument.trim()\n  },\n  // e.g. 'M.I.T.'\n  function (argument) {\n    return argument.replace(/\\./g, '')\n  },\n  // e.g. 'Apache- 2.0'\n  function (argument) {\n    return argument.replace(/\\s+/g, '')\n  },\n  // e.g. 'CC BY 4.0''\n  function (argument) {\n    return argument.replace(/\\s+/g, '-')\n  },\n  // e.g. 'LGPLv2.1'\n  function (argument) {\n    return argument.replace('v', '-')\n  },\n  // e.g. 'Apache 2.0'\n  function (argument) {\n    return argument.replace(/,?\\s*(\\d)/, '-$1')\n  },\n  // e.g. 'GPL 2'\n  function (argument) {\n    return argument.replace(/,?\\s*(\\d)/, '-$1.0')\n  },\n  // e.g. 'Apache Version 2.0'\n  function (argument) {\n    return argument\n      .replace(/,?\\s*(V\\.|v\\.|V|v|Version|version)\\s*(\\d)/, '-$2')\n  },\n  // e.g. 'Apache Version 2'\n  function (argument) {\n    return argument\n      .replace(/,?\\s*(V\\.|v\\.|V|v|Version|version)\\s*(\\d)/, '-$2.0')\n  },\n  // e.g. 'ZLIB'\n  function (argument) {\n    return argument[0].toUpperCase() + argument.slice(1)\n  },\n  // e.g. 'MPL/2.0'\n  function (argument) {\n    return argument.replace('/', '-')\n  },\n  // e.g. 'Apache 2'\n  function (argument) {\n    return argument\n      .replace(/\\s*V\\s*(\\d)/, '-$1')\n      .replace(/(\\d)$/, '$1.0')\n  },\n  // e.g. 'GPL-2.0', 'GPL-3.0'\n  function (argument) {\n    if (argument.indexOf('3.0') !== -1) {\n      return argument + '-or-later'\n    } else {\n      return argument + '-only'\n    }\n  },\n  // e.g. 'GPL-2.0-'\n  function (argument) {\n    return argument + 'only'\n  },\n  // e.g. 'GPL2'\n  function (argument) {\n    return argument.replace(/(\\d)$/, '-$1.0')\n  },\n  // e.g. 'BSD 3'\n  function (argument) {\n    return argument.replace(/(-| )?(\\d)$/, '-$2-Clause')\n  },\n  // e.g. 'BSD clause 3'\n  function (argument) {\n    return argument.replace(/(-| )clause(-| )(\\d)/, '-$3-Clause')\n  },\n  // e.g. 'New BSD license'\n  function (argument) {\n    return argument.replace(/\\b(Modified|New|Revised)(-| )?BSD((-| )License)?/i, 'BSD-3-Clause')\n  },\n  // e.g. 'Simplified BSD license'\n  function (argument) {\n    return argument.replace(/\\bSimplified(-| )?BSD((-| )License)?/i, 'BSD-2-Clause')\n  },\n  // e.g. 'Free BSD license'\n  function (argument) {\n    return argument.replace(/\\b(Free|Net)(-| )?BSD((-| )License)?/i, 'BSD-2-Clause-$1BSD')\n  },\n  // e.g. 'Clear BSD license'\n  function (argument) {\n    return argument.replace(/\\bClear(-| )?BSD((-| )License)?/i, 'BSD-3-Clause-Clear')\n  },\n  // e.g. 'Old BSD License'\n  function (argument) {\n    return argument.replace(/\\b(Old|Original)(-| )?BSD((-| )License)?/i, 'BSD-4-Clause')\n  },\n  // e.g. 'BY-NC-4.0'\n  function (argument) {\n    return 'CC-' + argument\n  },\n  // e.g. 'BY-NC'\n  function (argument) {\n    return 'CC-' + argument + '-4.0'\n  },\n  // e.g. 'Attribution-NonCommercial'\n  function (argument) {\n    return argument\n      .replace('Attribution', 'BY')\n      .replace('NonCommercial', 'NC')\n      .replace('NoDerivatives', 'ND')\n      .replace(/ (\\d)/, '-$1')\n      .replace(/ ?International/, '')\n  },\n  // e.g. 'Attribution-NonCommercial'\n  function (argument) {\n    return 'CC-' +\n      argument\n        .replace('Attribution', 'BY')\n        .replace('NonCommercial', 'NC')\n        .replace('NoDerivatives', 'ND')\n        .replace(/ (\\d)/, '-$1')\n        .replace(/ ?International/, '') +\n      '-4.0'\n  }\n]\n\nvar licensesWithVersions = spdxLicenseIds\n  .map(function (id) {\n    var match = /^(.*)-\\d+\\.\\d+$/.exec(id)\n    return match\n      ? [match[0], match[1]]\n      : [id, null]\n  })\n  .reduce(function (objectMap, item) {\n    var key = item[1]\n    objectMap[key] = objectMap[key] || []\n    objectMap[key].push(item[0])\n    return objectMap\n  }, {})\n\nvar licensesWithOneVersion = Object.keys(licensesWithVersions)\n  .map(function makeEntries (key) {\n    return [key, licensesWithVersions[key]]\n  })\n  .filter(function identifySoleVersions (item) {\n    return (\n      // Licenses has just one valid version suffix.\n      item[1].length === 1 &&\n      item[0] !== null &&\n      // APL will be considered Apache, rather than APL-1.0\n      item[0] !== 'APL'\n    )\n  })\n  .map(function createLastResorts (item) {\n    return [item[0], item[1][0]]\n  })\n\nlicensesWithVersions = undefined\n\n// If all else fails, guess that strings containing certain substrings\n// meant to identify certain licenses.\nvar lastResorts = [\n  ['UNLI', 'Unlicense'],\n  ['WTF', 'WTFPL'],\n  ['2 CLAUSE', 'BSD-2-Clause'],\n  ['2-CLAUSE', 'BSD-2-Clause'],\n  ['3 CLAUSE', 'BSD-3-Clause'],\n  ['3-CLAUSE', 'BSD-3-Clause'],\n  ['AFFERO', 'AGPL-3.0-or-later'],\n  ['AGPL', 'AGPL-3.0-or-later'],\n  ['APACHE', 'Apache-2.0'],\n  ['ARTISTIC', 'Artistic-2.0'],\n  ['Affero', 'AGPL-3.0-or-later'],\n  ['BEER', 'Beerware'],\n  ['BOOST', 'BSL-1.0'],\n  ['BSD', 'BSD-2-Clause'],\n  ['CDDL', 'CDDL-1.1'],\n  ['ECLIPSE', 'EPL-1.0'],\n  ['FUCK', 'WTFPL'],\n  ['GNU', 'GPL-3.0-or-later'],\n  ['LGPL', 'LGPL-3.0-or-later'],\n  ['GPLV1', 'GPL-1.0-only'],\n  ['GPL-1', 'GPL-1.0-only'],\n  ['GPLV2', 'GPL-2.0-only'],\n  ['GPL-2', 'GPL-2.0-only'],\n  ['GPL', 'GPL-3.0-or-later'],\n  ['MIT +NO-FALSE-ATTRIBS', 'MITNFA'],\n  ['MIT', 'MIT'],\n  ['MPL', 'MPL-2.0'],\n  ['X11', 'X11'],\n  ['ZLIB', 'Zlib']\n].concat(licensesWithOneVersion).sort(sortTranspositions)\n\nvar SUBSTRING = 0\nvar IDENTIFIER = 1\n\nvar validTransformation = function (identifier) {\n  for (var i = 0; i < transforms.length; i++) {\n    var transformed = transforms[i](identifier).trim()\n    if (transformed !== identifier && valid(transformed)) {\n      return transformed\n    }\n  }\n  return null\n}\n\nvar validLastResort = function (identifier) {\n  var upperCased = identifier.toUpperCase()\n  for (var i = 0; i < lastResorts.length; i++) {\n    var lastResort = lastResorts[i]\n    if (upperCased.indexOf(lastResort[SUBSTRING]) > -1) {\n      return lastResort[IDENTIFIER]\n    }\n  }\n  return null\n}\n\nvar anyCorrection = function (identifier, check) {\n  for (var i = 0; i < transpositions.length; i++) {\n    var transposition = transpositions[i]\n    var transposed = transposition[TRANSPOSED]\n    if (identifier.indexOf(transposed) > -1) {\n      var corrected = identifier.replace(\n        transposed,\n        transposition[CORRECT]\n      )\n      var checked = check(corrected)\n      if (checked !== null) {\n        return checked\n      }\n    }\n  }\n  return null\n}\n\nmodule.exports = function (identifier, options) {\n  options = options || {}\n  var upgrade = options.upgrade === undefined ? true : !!options.upgrade\n  function postprocess (value) {\n    return upgrade ? upgradeGPLs(value) : value\n  }\n  var validArugment = (\n    typeof identifier === 'string' &&\n    identifier.trim().length !== 0\n  )\n  if (!validArugment) {\n    throw Error('Invalid argument. Expected non-empty string.')\n  }\n  identifier = identifier.trim()\n  if (valid(identifier)) {\n    return postprocess(identifier)\n  }\n  var noPlus = identifier.replace(/\\+$/, '').trim()\n  if (valid(noPlus)) {\n    return postprocess(noPlus)\n  }\n  var transformed = validTransformation(identifier)\n  if (transformed !== null) {\n    return postprocess(transformed)\n  }\n  transformed = anyCorrection(identifier, function (argument) {\n    if (valid(argument)) {\n      return argument\n    }\n    return validTransformation(argument)\n  })\n  if (transformed !== null) {\n    return postprocess(transformed)\n  }\n  transformed = validLastResort(identifier)\n  if (transformed !== null) {\n    return postprocess(transformed)\n  }\n  transformed = anyCorrection(identifier, validLastResort)\n  if (transformed !== null) {\n    return postprocess(transformed)\n  }\n  return null\n}\n\nfunction upgradeGPLs (value) {\n  if ([\n    'GPL-1.0', 'LGPL-1.0', 'AGPL-1.0',\n    'GPL-2.0', 'LGPL-2.0', 'AGPL-2.0',\n    'LGPL-2.1'\n  ].indexOf(value) !== -1) {\n    return value + '-only'\n  } else if ([\n    'GPL-1.0+', 'GPL-2.0+', 'GPL-3.0+',\n    'LGPL-2.0+', 'LGPL-2.1+', 'LGPL-3.0+',\n    'AGPL-1.0+', 'AGPL-3.0+'\n  ].indexOf(value) !== -1) {\n    return value.replace(/\\+$/, '-or-later')\n  } else if (['GPL-3.0', 'LGPL-3.0', 'AGPL-3.0'].indexOf(value) !== -1) {\n    return value + '-or-later'\n  } else {\n    return value\n  }\n}\n"],"names":["licenses","concat","require$$0","require$$1","exceptions","require$$2","scan","source","index","hasMore","length","read","value","RegExp","chars","slice","match","indexOf","skipWhitespace","operator","string","possibilities","i","Error","type","idstring","expectIdstring","documentRef","licenseRef","identifier","begin","parseToken","tokens","token","push","parse","next","parseOperator","t","parseWith","parseLicenseRef","license","parseLicense","node","plus","exception","parseParenthesizedExpression","left","expr","parseExpression","parseAtom","makeBinaryOpParser","nextParser","parseBinaryOp","right","conjunction","toLowerCase","parseAnd","spdxExpressionParse","spdxLicenseIds","valid","error","sortTranspositions","a","b","toUpperCase","localeCompare","transpositions","sort","TRANSPOSED","CORRECT","transforms","argument","trim","replace","licensesWithVersions","map","id","exec","reduce","objectMap","item","key","licensesWithOneVersion","Object","keys","makeEntries","filter","identifySoleVersions","createLastResorts","undefined","lastResorts","SUBSTRING","IDENTIFIER","validTransformation","transformed","validLastResort","upperCased","lastResort","anyCorrection","check","transposition","transposed","corrected","checked","spdxCorrect","options","upgrade","postprocess","upgradeGPLs","validArugment","noPlus"],"mappingslCD,MAAM,CAACE,UAAsC,CAAA;EAChD,IAAIC,UAAU,GAAGC,UAAA;AAEHC,EAAAA,IAAA,GAAG,UAAUC,MAAM,EAAE;IACjC,IAAIC,KAAK,GAAG,CAAA;IAEZ,SAASC,OAAOA,GAAI;AAClB,MAAA,OAAOD,KAAK,GAAGD,MAAM,CAACG,MAAA;AAC1B;;AAEA;AACA;AACA;IACE,SAASC,IAAIA,CAAEC,KAAK,EAAE;MACpB,IAAIA,KAAK,YAAYC,MAAM,EAAE;AAC3B,QAAA,IAAIC,KAAK,GAAGP,MAAM,CAACQ,KAAK,CAACP,KAAK,CAAA;AAC9B,QAAA,IAAIQ,KAAK,GAAGF,KAAK,CAACE,KAAK,CAACJ,KAAK,CAAA;AAC7B,QAAA,IAAII,KAAK,EAAE;AACTR,UAAAA,KAAK,IAAIQ,KAAK,CAAC,CAAC,CAAC,CAACN,MAAA;UAClB,OAAOM,KAAK,CAAC,CAAC,CAAA;AACtB;AACA,OAAK,MAAM;QACL,IAAIT,MAAM,CAACU,OAAO,CAACL,KAAK,EAAEJ,KAAK,CAAC,KAAKA,KAAK,EAAE;UAC1CA,KAAK,IAAII,KAAK,CAACF,MAAA;AACf,UAAA,OAAOE,KAAA;AACf;AACA;AACA;IAEE,SAASM,cAAcA,GAAI;MACzBP,IAAI,CAAC,MAAM,CAAA;AACf;IAEE,SAASQ,QAAQA,GAAI;AACnB,MAAA,IAAIC,MAAA;AACJ,MAAA,IAAIC,aAAa,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAA;AAC5D,MAAA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,aAAa,CAACX,MAAM,EAAEY,CAAC,EAAE,EAAE;AAC7CF,QAAAA,MAAM,GAAGT,IAAI,CAACU,aAAa,CAACC,CAAC,CAAC,CAAA;AAC9B,QAAA,IAAIF,MAAM,EAAE;AACV,UAAA;AACR;AACA;AAEI,MAAA,IAAIA,MAAM,KAAK,GAAG,IAAIZ,KAAK,GAAG,CAAC,IAAID,MAAM,CAACC,KAAK,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;AAC5D,QAAA,MAAM,IAAIe,KAAK,CAAC,kBAAkB,CAAA;AACxC;AAEI,MAAA,OAAOH,MAAM,IAAI;AACfI,QAAAA,IAAI,EAAE,UAAU;AAChBJ,QAAAA,MAAM,EAAEA;OACd;AACA;IAEE,SAASK,QAAQA,GAAI;MACnB,OAAOd,IAAI,CAAC,gBAAgB,CAAA;AAChC;IAEE,SAASe,cAAcA,GAAI;AACzB,MAAA,IAAIN,MAAM,GAAGK,QAAQ,EAAA;MACrB,IAAI,CAACL,MAAM,EAAE;AACX,QAAA,MAAM,IAAIG,KAAK,CAAC,8BAA8B,GAAGf,KAAK,CAAA;AAC5D;AACI,MAAA,OAAOY,MAAA;AACX;IAEE,SAASO,WAAWA,GAAI;AACtB,MAAA,IAAIhB,IAAI,CAAC,cAAc,CAAC,EAAE;AACxB,QAAA,IAAIS,MAAM,GAAGM,cAAc,EAAA;QAC3B,OAAO;AAAEF,UAAAA,IAAI,EAAE,aAAa;AAAEJ,UAAAA,MAAM,EAAEA;SAAM;AAClD;AACA;IAEE,SAASQ,UAAUA,GAAI;AACrB,MAAA,IAAIjB,IAAI,CAAC,aAAa,CAAC,EAAE;AACvB,QAAA,IAAIS,MAAM,GAAGM,cAAc,EAAA;QAC3B,OAAO;AAAEF,UAAAA,IAAI,EAAE,YAAY;AAAEJ,UAAAA,MAAM,EAAEA;SAAM;AACjD;AACA;IAEE,SAASS,UAAUA,GAAI;MACrB,IAAIC,KAAK,GAAGtB,KAAA;AACZ,MAAA,IAAIY,MAAM,GAAGK,QAAQ,EAAA;MAErB,IAAIzB,QAAQ,CAACiB,OAAO,CAACG,MAAM,CAAC,KAAK,EAAE,EAAE;QACnC,OAAO;AACLI,UAAAA,IAAI,EAAE,SAAS;AACfJ,UAAAA,MAAM,EAAEA;SAChB;OACK,MAAM,IAAIhB,UAAU,CAACa,OAAO,CAACG,MAAM,CAAC,KAAK,EAAE,EAAE;QAC5C,OAAO;AACLI,UAAAA,IAAI,EAAE,WAAW;AACjBJ,UAAAA,MAAM,EAAEA;SAChB;AACA;AAEIZ,MAAAA,KAAK,GAAGsB,KAAA;AACZ;;AAEA;AACA;IACE,SAASC,UAAUA,GAAI;AACzB;AACI,MAAA,OACEZ,QAAQ,EAAE,IACVQ,WAAW,EAAE,IACbC,UAAU,EAAE,IACZC,UAAU,EAAA;AAEhB;IAEE,IAAIG,MAAM,GAAG,EAAA;IACb,OAAOvB,OAAO,EAAE,EAAE;AAChBS,MAAAA,cAAc,EAAA;AACd,MAAA,IAAI,CAACT,OAAO,EAAE,EAAE;AACd,QAAA;AACN;AAEI,MAAA,IAAIwB,KAAK,GAAGF,UAAU,EAAA;MACtB,IAAI,CAACE,KAAK,EAAE;AACV,QAAA,MAAM,IAAIV,KAAK,CAAC,cAAc,GAAGhB,MAAM,CAACC,KAAK,CAAC,GAC9B,cAAc,GAAGA,KAAK,CAAA;AAC5C;AAEIwB,MAAAA,MAAM,CAACE,IAAI,CAACD,KAAK,CAAA;AACrB;AACE,IAAA,OAAOD,MAAA;GACT;;;;;;;;;;AChIA;AACA;AACA;AACA;;AAEcG,EAAAA,KAAA,GAAG,UAAUH,MAAM,EAAE;IACjC,IAAIxB,KAAK,GAAG,CAAA;IAEZ,SAASC,OAAOA,GAAI;AAClB,MAAA,OAAOD,KAAK,GAAGwB,MAAM,CAACtB,MAAA;AAC1B;IAEE,SAASuB,KAAKA,GAAI;MAChB,OAAOxB,OAAO,EAAE,GAAGuB,MAAM,CAACxB,KAAK,CAAC,GAAG,IAAA;AACvC;IAEE,SAAS4B,IAAIA,GAAI;AACf,MAAA,IAAI,CAAC3B,OAAO,EAAE,EAAE;QACd,MAAM,IAAIc,KAAK,EAAA;AACrB;AACIf,MAAAA,KAAK,EAAA;AACT;IAEE,SAAS6B,aAAaA,CAAElB,QAAQ,EAAE;AAChC,MAAA,IAAImB,CAAC,GAAGL,KAAK,EAAA;AACb,MAAA,IAAIK,CAAC,IAAIA,CAAC,CAACd,IAAI,KAAK,UAAU,IAAIL,QAAQ,KAAKmB,CAAC,CAAClB,MAAM,EAAE;AACvDgB,QAAAA,IAAI,EAAA;QACJ,OAAOE,CAAC,CAAClB,MAAA;AACf;AACA;IAEE,SAASmB,SAASA,GAAI;AACpB,MAAA,IAAIF,aAAa,CAAC,MAAM,CAAC,EAAE;AACzB,QAAA,IAAIC,CAAC,GAAGL,KAAK,EAAA;AACb,QAAA,IAAIK,CAAC,IAAIA,CAAC,CAACd,IAAI,KAAK,WAAW,EAAE;AAC/BY,UAAAA,IAAI,EAAA;UACJ,OAAOE,CAAC,CAAClB,MAAA;AACjB;AACM,QAAA,MAAM,IAAIG,KAAK,CAAC,iCAAiC,CAAA;AACvD;AACA;IAEE,SAASiB,eAAeA,GAAI;AAC9B;AACA;AACA;MACI,IAAIV,KAAK,GAAGtB,KAAA;MACZ,IAAIY,MAAM,GAAG,EAAA;AACb,MAAA,IAAIkB,CAAC,GAAGL,KAAK,EAAA;AACb,MAAA,IAAIK,CAAC,CAACd,IAAI,KAAK,aAAa,EAAE;AAC5BY,QAAAA,IAAI,EAAA;AACJhB,QAAAA,MAAM,IAAI,cAAc,GAAGkB,CAAC,CAAClB,MAAM,GAAG,GAAA;AACtC,QAAA,IAAI,CAACiB,aAAa,CAAC,GAAG,CAAC,EAAE;AACvB,UAAA,MAAM,IAAId,KAAK,CAAC,sCAAsC,CAAA;AAC9D;AACA;MACIe,CAAC,GAAGL,KAAK,EAAA;AACT,MAAA,IAAIK,CAAC,CAACd,IAAI,KAAK,YAAY,EAAE;AAC3BY,QAAAA,IAAI,EAAA;AACJhB,QAAAA,MAAM,IAAI,aAAa,GAAGkB,CAAC,CAAClB,MAAA;QAC5B,OAAO;AAAEqB,UAAAA,OAAO,EAAErB;SAAM;AAC9B;AACIZ,MAAAA,KAAK,GAAGsB,KAAA;AACZ;IAEE,SAASY,YAAYA,GAAI;AACvB,MAAA,IAAIJ,CAAC,GAAGL,KAAK,EAAA;AACb,MAAA,IAAIK,CAAC,IAAIA,CAAC,CAACd,IAAI,KAAK,SAAS,EAAE;AAC7BY,QAAAA,IAAI,EAAA;AACJ,QAAA,IAAIO,IAAI,GAAG;UAAEF,OAAO,EAAEH,CAAC,CAAClB;SAAM;AAC9B,QAAA,IAAIiB,aAAa,CAAC,GAAG,CAAC,EAAE;UACtBM,IAAI,CAACC,IAAI,GAAG,IAAA;AACpB;AACM,QAAA,IAAIC,SAAS,GAAGN,SAAS,EAAA;AACzB,QAAA,IAAIM,SAAS,EAAE;UACbF,IAAI,CAACE,SAAS,GAAGA,SAAA;AACzB;AACM,QAAA,OAAOF,IAAA;AACb;AACA;IAEE,SAASG,4BAA4BA,GAAI;AACvC,MAAA,IAAIC,IAAI,GAAGV,aAAa,CAAC,GAAG,CAAA;MAC5B,IAAI,CAACU,IAAI,EAAE;AACT,QAAA;AACN;AAEI,MAAA,IAAIC,IAAI,GAAGC,eAAe,EAAA;AAE1B,MAAA,IAAI,CAACZ,aAAa,CAAC,GAAG,CAAC,EAAE;AACvB,QAAA,MAAM,IAAId,KAAK,CAAC,cAAc,CAAA;AACpC;AAEI,MAAA,OAAOyB,IAAA;AACX;IAEE,SAASE,SAASA,GAAI;MACpB,OACEJ,4BAA4B,EAAE,IAC9BN,eAAe,EAAE,IACjBE,YAAY,EAAA;AAElB;AAEE,IAAA,SAASS,kBAAkBA,CAAEhC,QAAQ,EAAEiC,UAAU,EAAE;MACjD,OAAO,SAASC,aAAaA,GAAI;AAC/B,QAAA,IAAIN,IAAI,GAAGK,UAAU,EAAA;QACrB,IAAI,CAACL,IAAI,EAAE;AACT,UAAA;AACR;AAEM,QAAA,IAAI,CAACV,aAAa,CAAClB,QAAQ,CAAC,EAAE;AAC5B,UAAA,OAAO4B,IAAA;AACf;AAEM,QAAA,IAAIO,KAAK,GAAGD,aAAa,EAAA;QACzB,IAAI,CAACC,KAAK,EAAE;AACV,UAAA,MAAM,IAAI/B,KAAK,CAAC,qBAAqB,CAAA;AAC7C;QACM,OAAO;AACLwB,UAAAA,IAAI,EAAEA,IAAI;AACVQ,UAAAA,WAAW,EAAEpC,QAAQ,CAACqC,WAAW,EAAE;AACnCF,UAAAA,KAAK,EAAEA;SACf;OACA;AACA;AAEE,IAAA,IAAIG,QAAQ,GAAGN,kBAAkB,CAAC,KAAK,EAAED,SAAS,CAAA;AAClD,IAAA,IAAID,eAAe,GAAGE,kBAAkB,CAAC,IAAI,EAAEM,QAAQ,CAAA;AAEvD,IAAA,IAAId,IAAI,GAAGM,eAAe,EAAA;AAC1B,IAAA,IAAI,CAACN,IAAI,IAAIlC,OAAO,EAAE,EAAE;AACtB,MAAA,MAAM,IAAIc,KAAK,CAAC,cAAc,CAAA;AAClC;AACE,IAAA,OAAOoB,IAAA;GACT;;;;;;;;;ACvIA,EAAA,IAAIrC,IAAI,GAAGJ,WAAA,EAAA;AACX,EAAA,IAAIiC,KAAK,GAAGhC,YAAA,EAAA;AAEEuD,EAAAA,mBAAA,GAAG,UAAUnD,MAAM,EAAE;AACjC,IAAA,OAAO4B,KAAK,CAAC7B,IAAI,CAACC,MAAM,CAAC,CAAA;GAC3B;;;;;;;;;;;;;;;;;;;;;;;;ACQA,EAAA,IAAI4B,KAAK,GAAGjC,0BAAA,EAAA;EACZ,IAAIyD,cAAc,GAAGxD,YAAA;EAErB,SAASyD,KAAKA,CAAExC,MAAM,EAAE;IACtB,IAAI;MACFe,KAAK,CAACf,MAAM,CAAA;AACZ,MAAA,OAAO,IAAA;KACR,CAAC,OAAOyC,KAAK,EAAE;AACd,MAAA,OAAO,KAAA;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,EAAA,SAASC,kBAAkBA,CAACC,CAAC,EAAEC,CAAC,EAAE;AAChC,IAAA,IAAItD,MAAM,GAAGsD,CAAC,CAAC,CAAC,CAAC,CAACtD,MAAM,GAAGqD,CAAC,CAAC,CAAC,CAAC,CAACrD,MAAA;AAChC,IAAA,IAAIA,MAAM,KAAK,CAAC,EAAE,OAAOA,MAAA;AACzB,IAAA,OAAOqD,CAAC,CAAC,CAAC,CAAC,CAACE,WAAW,EAAE,CAACC,aAAa,CAACF,CAAC,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE,CAAA;AAC5D;;AAEA;EACA,IAAIE,cAAc,GAAG,CACnB,CAAC,MAAM,EAAE,MAAM,CAAC,EAChB,CAAC,KAAK,EAAE,KAAK,CAAC,EACd,CAAC,KAAK,EAAE,KAAK,CAAC,EACd,CAAC,KAAK,EAAE,QAAQ,CAAC,EACjB,CAAC,KAAK,EAAE,KAAK,CAAC,EACd,CAAC,KAAK,EAAE,KAAK,CAAC,EACd,CAAC,KAAK,EAAE,KAAK,CAAC,EACd,CAAC,QAAQ,EAAE,QAAQ,CAAC,EACpB,CAAC,WAAW,EAAE,GAAG,CAAC,EAClB,CAAC,gBAAgB,EAAE,EAAE,CAAC,EACtB,CAAC,KAAK,EAAE,KAAK,CAAC,EACd,CAAC,KAAK,EAAE,KAAK,CAAC,EACd,CAAC,GAAG,EAAE,EAAE,CAAC,EACT,CAAC,SAAS,EAAE,KAAK,CAAC,EAClB,CAAC,UAAU,EAAE,MAAM,CAAC,EACpB,CAAC,SAAS,EAAE,KAAK,CAAC,EAClB,CAAC,SAAS,EAAE,KAAK,CAAC,EAClB,CAAC,mCAAmC,EAAE,MAAM,CAAC,EAC7C,CAAC,mCAAmC,EAAE,MAAM,CAAC,EAC7C,CAAC,mCAAmC,EAAE,UAAU,CAAC,EACjD,CAAC,mCAAmC,EAAE,UAAU,CAAC,EACjD,CAAC,+BAA+B,EAAE,MAAM,CAAC,EACzC,CAAC,+BAA+B,EAAE,MAAM,CAAC,EACzC,CAAC,+BAA+B,EAAE,UAAU,CAAC,EAC7C,CAAC,+BAA+B,EAAE,UAAU,CAAC,EAC7C,CAAC,4BAA4B,EAAE,KAAK,CAAC,EACrC,CAAC,oBAAoB,EAAE,KAAK,CAAC,EAC7B,CAAC,oBAAoB,EAAE,KAAK,CAAC,EAC7B,CAAC,4BAA4B,EAAE,KAAK,CAAC,EACrC,CAAC,KAAK,EAAE,KAAK,CAAC,EACd,CAAC,wBAAwB,EAAE,KAAK,CAAC,EACjC,CAAC,8BAA8B,EAAE,KAAK,CAAC,EACvC,CAAC,KAAK,EAAE,KAAK,CAAC,EACd,CAAC,QAAQ,EAAE,OAAO,CAAC,EACnB,CAAC,UAAU,EAAE,EAAE,CAAA,CAChB,CAACC,IAAI,CAACN,kBAAkB,CAAA;EAEzB,IAAIO,UAAU,GAAG,CAAA;EACjB,IAAIC,OAAO,GAAG,CAAA;;AAEd;AACA,EAAA,IAAIC,UAAU,GAAG;AACjB;AACE,EAAA,UAAUC,QAAQ,EAAE;AAClB,IAAA,OAAOA,QAAQ,CAACP,WAAW,EAAA;GAC5B;AACH;AACE,EAAA,UAAUO,QAAQ,EAAE;AAClB,IAAA,OAAOA,QAAQ,CAACC,IAAI,EAAA;GACrB;AACH;AACE,EAAA,UAAUD,QAAQ,EAAE;AAClB,IAAA,OAAOA,QAAQ,CAACE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAA;GAClC;AACH;AACE,EAAA,UAAUF,QAAQ,EAAE;AAClB,IAAA,OAAOA,QAAQ,CAACE,OAAO,CAAC,MAAM,EAAE,EAAE,CAAA;GACnC;AACH;AACE,EAAA,UAAUF,QAAQ,EAAE;AAClB,IAAA,OAAOA,QAAQ,CAACE,OAAO,CAAC,MAAM,EAAE,GAAG,CAAA;GACpC;AACH;AACE,EAAA,UAAUF,QAAQ,EAAE;AAClB,IAAA,OAAOA,QAAQ,CAACE,OAAO,CAAC,GAAG,EAAE,GAAG,CAAA;GACjC;AACH;AACE,EAAA,UAAUF,QAAQ,EAAE;AAClB,IAAA,OAAOA,QAAQ,CAACE,OAAO,CAAC,WAAW,EAAE,KAAK,CAAA;GAC3C;AACH;AACE,EAAA,UAAUF,QAAQ,EAAE;AAClB,IAAA,OAAOA,QAAQ,CAACE,OAAO,CAAC,WAAW,EAAE,OAAO,CAAA;GAC7C;AACH;AACE,EAAA,UAAUF,QAAQ,EAAE;AAClB,IAAA,OAAOA,QAAA,CACJE,OAAO,CAAC,2CAA2C,EAAE,KAAK,CAAA;GAC9D;AACH;AACE,EAAA,UAAUF,QAAQ,EAAE;AAClB,IAAA,OAAOA,QAAA,CACJE,OAAO,CAAC,2CAA2C,EAAE,OAAO,CAAA;GAChE;AACH;AACE,EAAA,UAAUF,QAAQ,EAAE;AAClB,IAAA,OAAOA,QAAQ,CAAC,CAAC,CAAC,CAACP,WAAW,EAAE,GAAGO,QAAQ,CAACzD,KAAK,CAAC,CAAC,CAAA;GACpD;AACH;AACE,EAAA,UAAUyD,QAAQ,EAAE;AAClB,IAAA,OAAOA,QAAQ,CAACE,OAAO,CAAC,GAAG,EAAE,GAAG,CAAA;GACjC;AACH;AACE,EAAA,UAAUF,QAAQ,EAAE;AAClB,IAAA,OAAOA,QAAA,CACJE,OAAO,CAAC,aAAa,EAAE,KAAK,CAAA,CAC5BA,OAAO,CAAC,OAAO,EAAE,MAAM,CAAA;GAC3B;AACH;AACE,EAAA,UAAUF,QAAQ,EAAE;IAClB,IAAIA,QAAQ,CAACvD,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE;MAClC,OAAOuD,QAAQ,GAAG,WAAA;AACxB,KAAK,MAAM;MACL,OAAOA,QAAQ,GAAG,OAAA;AACxB;GACG;AACH;AACE,EAAA,UAAUA,QAAQ,EAAE;IAClB,OAAOA,QAAQ,GAAG,MAAA;GACnB;AACH;AACE,EAAA,UAAUA,QAAQ,EAAE;AAClB,IAAA,OAAOA,QAAQ,CAACE,OAAO,CAAC,OAAO,EAAE,OAAO,CAAA;GACzC;AACH;AACE,EAAA,UAAUF,QAAQ,EAAE;AAClB,IAAA,OAAOA,QAAQ,CAACE,OAAO,CAAC,aAAa,EAAE,YAAY,CAAA;GACpD;AACH;AACE,EAAA,UAAUF,QAAQ,EAAE;AAClB,IAAA,OAAOA,QAAQ,CAACE,OAAO,CAAC,sBAAsB,EAAE,YAAY,CAAA;GAC7D;AACH;AACE,EAAA,UAAUF,QAAQ,EAAE;AAClB,IAAA,OAAOA,QAAQ,CAACE,OAAO,CAAC,mDAAmD,EAAE,cAAc,CAAA;GAC5F;AACH;AACE,EAAA,UAAUF,QAAQ,EAAE;AAClB,IAAA,OAAOA,QAAQ,CAACE,OAAO,CAAC,uCAAuC,EAAE,cAAc,CAAA;GAChF;AACH;AACE,EAAA,UAAUF,QAAQ,EAAE;AAClB,IAAA,OAAOA,QAAQ,CAACE,OAAO,CAAC,uCAAuC,EAAE,oBAAoB,CAAA;GACtF;AACH;AACE,EAAA,UAAUF,QAAQ,EAAE;AAClB,IAAA,OAAOA,QAAQ,CAACE,OAAO,CAAC,kCAAkC,EAAE,oBAAoB,CAAA;GACjF;AACH;AACE,EAAA,UAAUF,QAAQ,EAAE;AAClB,IAAA,OAAOA,QAAQ,CAACE,OAAO,CAAC,2CAA2C,EAAE,cAAc,CAAA;GACpF;AACH;AACE,EAAA,UAAUF,QAAQ,EAAE;IAClB,OAAO,KAAK,GAAGA,QAAA;GAChB;AACH;AACE,EAAA,UAAUA,QAAQ,EAAE;AAClB,IAAA,OAAO,KAAK,GAAGA,QAAQ,GAAG,MAAA;GAC3B;AACH;AACE,EAAA,UAAUA,QAAQ,EAAE;AAClB,IAAA,OAAOA,QAAA,CACJE,OAAO,CAAC,aAAa,EAAE,IAAI,CAAA,CAC3BA,OAAO,CAAC,eAAe,EAAE,IAAI,CAAA,CAC7BA,OAAO,CAAC,eAAe,EAAE,IAAI,CAAA,CAC7BA,OAAO,CAAC,OAAO,EAAE,KAAK,CAAA,CACtBA,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAA;GACjC;AACH;AACE,EAAA,UAAUF,QAAQ,EAAE;AAClB,IAAA,OAAO,KAAK,GACVA,QAAA,CACGE,OAAO,CAAC,aAAa,EAAE,IAAI,CAAA,CAC3BA,OAAO,CAAC,eAAe,EAAE,IAAI,CAAA,CAC7BA,OAAO,CAAC,eAAe,EAAE,IAAI,CAAA,CAC7BA,OAAO,CAAC,OAAO,EAAE,KAAK,CAAA,CACtBA,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,GACjC,MAAA;AACN,GAAA,CACA;EAEA,IAAIC,oBAAoB,GAAGhB,cAAA,CACxBiB,GAAG,CAAC,UAAUC,EAAE,EAAE;AACjB,IAAA,IAAI7D,KAAK,GAAG,iBAAiB,CAAC8D,IAAI,CAACD,EAAE,CAAA;AACrC,IAAA,OAAO7D,KAAA,GACH,CAACA,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAA,GACnB,CAAC6D,EAAE,EAAE,IAAI,CAAA;GACd,CAAA,CACAE,MAAM,CAAC,UAAUC,SAAS,EAAEC,IAAI,EAAE;AACjC,IAAA,IAAIC,GAAG,GAAGD,IAAI,CAAC,CAAC,CAAA;IAChBD,SAAS,CAACE,GAAG,CAAC,GAAGF,SAAS,CAACE,GAAG,CAAC,IAAI,EAAA;IACnCF,SAAS,CAACE,GAAG,CAAC,CAAChD,IAAI,CAAC+C,IAAI,CAAC,CAAC,CAAC,CAAA;AAC3B,IAAA,OAAOD,SAAA;GACR,EAAE,EAAE,CAAA;AAEP,EAAA,IAAIG,sBAAsB,GAAGC,MAAM,CAACC,IAAI,CAACV,oBAAoB,CAAA,CAC1DC,GAAG,CAAC,SAASU,WAAWA,CAAEJ,GAAG,EAAE;AAC9B,IAAA,OAAO,CAACA,GAAG,EAAEP,oBAAoB,CAACO,GAAG,CAAC,CAAA;GACvC,CAAA,CACAK,MAAM,CAAC,SAASC,oBAAoBA,CAAEP,IAAI,EAAE;AAC3C,IAAA;AACJ;AACMA,MAAAA,IAAI,CAAC,CAAC,CAAC,CAACvE,MAAM,KAAK,CAAC,IACpBuE,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI;AACtB;MACMA,IAAI,CAAC,CAAC,CAAC,KAAK;AAAA;GAEf,CAAA,CACAL,GAAG,CAAC,SAASa,iBAAiBA,CAAER,IAAI,EAAE;AACrC,IAAA,OAAO,CAACA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAC5B,GAAA,CAAA;AAEHN,EAAAA,oBAAoB,GAAGe,SAAA;;AAEvB;AACA;AACA,EAAA,IAAIC,WAAW,GAAG,CAChB,CAAC,MAAM,EAAE,WAAW,CAAC,EACrB,CAAC,KAAK,EAAE,OAAO,CAAC,EAChB,CAAC,UAAU,EAAE,cAAc,CAAC,EAC5B,CAAC,UAAU,EAAE,cAAc,CAAC,EAC5B,CAAC,UAAU,EAAE,cAAc,CAAC,EAC5B,CAAC,UAAU,EAAE,cAAc,CAAC,EAC5B,CAAC,QAAQ,EAAE,mBAAmB,CAAC,EAC/B,CAAC,MAAM,EAAE,mBAAmB,CAAC,EAC7B,CAAC,QAAQ,EAAE,YAAY,CAAC,EACxB,CAAC,UAAU,EAAE,cAAc,CAAC,EAC5B,CAAC,QAAQ,EAAE,mBAAmB,CAAC,EAC/B,CAAC,MAAM,EAAE,UAAU,CAAC,EACpB,CAAC,OAAO,EAAE,SAAS,CAAC,EACpB,CAAC,KAAK,EAAE,cAAc,CAAC,EACvB,CAAC,MAAM,EAAE,UAAU,CAAC,EACpB,CAAC,SAAS,EAAE,SAAS,CAAC,EACtB,CAAC,MAAM,EAAE,OAAO,CAAC,EACjB,CAAC,KAAK,EAAE,kBAAkB,CAAC,EAC3B,CAAC,MAAM,EAAE,mBAAmB,CAAC,EAC7B,CAAC,OAAO,EAAE,cAAc,CAAC,EACzB,CAAC,OAAO,EAAE,cAAc,CAAC,EACzB,CAAC,OAAO,EAAE,cAAc,CAAC,EACzB,CAAC,OAAO,EAAE,cAAc,CAAC,EACzB,CAAC,KAAK,EAAE,kBAAkB,CAAC,EAC3B,CAAC,uBAAuB,EAAE,QAAQ,CAAC,EACnC,CAAC,KAAK,EAAE,KAAK,CAAC,EACd,CAAC,KAAK,EAAE,SAAS,CAAC,EAClB,CAAC,KAAK,EAAE,KAAK,CAAC,EACd,CAAC,MAAM,EAAE,MAAM,CAAA,CAChB,CAAC1F,MAAM,CAACkF,sBAAsB,CAAC,CAACf,IAAI,CAACN,kBAAkB,CAAA;EAExD,IAAI8B,SAAS,GAAG,CAAA;EAChB,IAAIC,UAAU,GAAG,CAAA;AAEjB,EAAA,IAAIC,mBAAmB,GAAG,UAAUjE,UAAU,EAAE;AAC9C,IAAA,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiD,UAAU,CAAC7D,MAAM,EAAEY,CAAC,EAAE,EAAE;AAC1C,MAAA,IAAIyE,WAAW,GAAGxB,UAAU,CAACjD,CAAC,CAAC,CAACO,UAAU,CAAC,CAAC4C,IAAI,EAAA;MAChD,IAAIsB,WAAW,KAAKlE,UAAU,IAAI+B,KAAK,CAACmC,WAAW,CAAC,EAAE;AACpD,QAAA,OAAOA,WAAA;AACb;AACA;AACE,IAAA,OAAO,IAAA;GACT;AAEA,EAAA,IAAIC,eAAe,GAAG,UAAUnE,UAAU,EAAE;AAC1C,IAAA,IAAIoE,UAAU,GAAGpE,UAAU,CAACoC,WAAW,EAAA;AACvC,IAAA,KAAK,IAAI3C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqE,WAAW,CAACjF,MAAM,EAAEY,CAAC,EAAE,EAAE;AAC3C,MAAA,IAAI4E,UAAU,GAAGP,WAAW,CAACrE,CAAC,CAAA;AAC9B,MAAA,IAAI2E,UAAU,CAAChF,OAAO,CAACiF,UAAU,CAACN,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE;QAClD,OAAOM,UAAU,CAACL,UAAU,CAAA;AAClC;AACA;AACE,IAAA,OAAO,IAAA;GACT;AAEA,EAAA,IAAIM,aAAa,GAAG,UAAUtE,UAAU,EAAEuE,KAAK,EAAE;AAC/C,IAAA,KAAK,IAAI9E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6C,cAAc,CAACzD,MAAM,EAAEY,CAAC,EAAE,EAAE;AAC9C,MAAA,IAAI+E,aAAa,GAAGlC,cAAc,CAAC7C,CAAC,CAAA;AACpC,MAAA,IAAIgF,UAAU,GAAGD,aAAa,CAAChC,UAAU,CAAA;MACzC,IAAIxC,UAAU,CAACZ,OAAO,CAACqF,UAAU,CAAC,GAAG,EAAE,EAAE;AACvC,QAAA,IAAIC,SAAS,GAAG1E,UAAU,CAAC6C,OAAO,CAChC4B,UAAU,EACVD,aAAa,CAAC/B,OAAO,CAC7B,CAAA;AACM,QAAA,IAAIkC,OAAO,GAAGJ,KAAK,CAACG,SAAS,CAAA;QAC7B,IAAIC,OAAO,KAAK,IAAI,EAAE;AACpB,UAAA,OAAOA,OAAA;AACf;AACA;AACA;AACE,IAAA,OAAO,IAAA;GACT;AAEAC,EAAAA,WAAc,GAAG,UAAU5E,UAAU,EAAE6E,OAAO,EAAE;AAC9CA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAAA;AACrB,IAAA,IAAIC,OAAO,GAAGD,OAAO,CAACC,OAAO,KAAKjB,SAAS,GAAG,IAAI,GAAG,CAAC,CAACgB,OAAO,CAACC,OAAA;IAC/D,SAASC,WAAWA,CAAEhG,KAAK,EAAE;AAC3B,MAAA,OAAO+F,OAAO,GAAGE,WAAW,CAACjG,KAAK,CAAC,GAAGA,KAAA;AAC1C;AACE,IAAA,IAAIkG,aAAa,GACf,OAAOjF,UAAU,KAAK,QAAQ,IAC9BA,UAAU,CAAC4C,IAAI,EAAE,CAAC/D,MAAM,KAAK,CACjC;IACE,IAAI,CAACoG,aAAa,EAAE;MAClB,MAAMvF,KAAK,CAAC,8CAA8C,CAAA;AAC9D;AACEM,IAAAA,UAAU,GAAGA,UAAU,CAAC4C,IAAI,EAAA;AAC5B,IAAA,IAAIb,KAAK,CAAC/B,UAAU,CAAC,EAAE;MACrB,OAAO+E,WAAW,CAAC/E,UAAU,CAAA;AACjC;AACE,IAAA,IAAIkF,MAAM,GAAGlF,UAAU,CAAC6C,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACD,IAAI,EAAA;AAC/C,IAAA,IAAIb,KAAK,CAACmD,MAAM,CAAC,EAAE;MACjB,OAAOH,WAAW,CAACG,MAAM,CAAA;AAC7B;AACE,IAAA,IAAIhB,WAAW,GAAGD,mBAAmB,CAACjE,UAAU,CAAA;IAChD,IAAIkE,WAAW,KAAK,IAAI,EAAE;MACxB,OAAOa,WAAW,CAACb,WAAW,CAAA;AAClC;AACEA,IAAAA,WAAW,GAAGI,aAAa,CAACtE,UAAU,EAAE,UAAU2C,QAAQ,EAAE;AAC1D,MAAA,IAAIZ,KAAK,CAACY,QAAQ,CAAC,EAAE;AACnB,QAAA,OAAOA,QAAA;AACb;MACI,OAAOsB,mBAAmB,CAACtB,QAAQ,CAAA;AACpC,KAAA,CAAA;IACD,IAAIuB,WAAW,KAAK,IAAI,EAAE;MACxB,OAAOa,WAAW,CAACb,WAAW,CAAA;AAClC;AACEA,IAAAA,WAAW,GAAGC,eAAe,CAACnE,UAAU,CAAA;IACxC,IAAIkE,WAAW,KAAK,IAAI,EAAE;MACxB,OAAOa,WAAW,CAACb,WAAW,CAAA;AAClC;AACEA,IAAAA,WAAW,GAAGI,aAAa,CAACtE,UAAU,EAAEmE,eAAe,CAAA;IACvD,IAAID,WAAW,KAAK,IAAI,EAAE;MACxB,OAAOa,WAAW,CAACb,WAAW,CAAA;AAClC;AACE,IAAA,OAAO,IAAA;GACT;EAEA,SAASc,WAAWA,CAAEjG,KAAK,EAAE;IAC3B,IAAI,CACF,SAAS,EAAE,UAAU,EAAE,UAAU,EACjC,SAAS,EAAE,UAAU,EAAE,UAAU,EACjC,UAAA,CACD,CAACK,OAAO,CAACL,KAAK,CAAC,KAAK,EAAE,EAAE;MACvB,OAAOA,KAAK,GAAG,OAAA;KAChB,MAAM,IAAI,CACT,UAAU,EAAE,UAAU,EAAE,UAAU,EAClC,WAAW,EAAE,WAAW,EAAE,WAAW,EACrC,WAAW,EAAE,WAAA,CACd,CAACK,OAAO,CAACL,KAAK,CAAC,KAAK,EAAE,EAAE;AACvB,MAAA,OAAOA,KAAK,CAAC8D,OAAO,CAAC,KAAK,EAAE,WAAW,CAAA;AAC3C,KAAG,MAAM,IAAI,CAAC,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC,CAACzD,OAAO,CAACL,KAAK,CAAC,KAAK,EAAE,EAAE;MACpE,OAAOA,KAAK,GAAG,WAAA;AACnB,KAAG,MAAM;AACL,MAAA,OAAOA,KAAA;AACX;AACA;;;;;;;;","x_google_ignoreList":[0,1,2,3]}