import config from '@socketsecurity/config'
import type { CResult } from '../types.mts'
export interface LocalConfig {
  apiBaseUrl?: string | null | undefined
  apiKey?: string | null | undefined
  apiProxy?: string | null | undefined
  apiToken?: string | null | undefined
  defaultOrg?: string
  enforcedOrgs?: string[] | readonly string[] | null | undefined
  isTestingV1?: boolean
}
export declare const supportedConfigKeys: Map<keyof LocalConfig, string>
export declare const sensitiveConfigKeys: Set<keyof LocalConfig>
export declare function overrideCachedConfig(
  jsonConfig: unknown
): CResult<undefined>
export declare function overrideConfigApiToken(apiToken: unknown): void
export declare function findSocketYmlSync(dir?: string): {
  path: string
  parsed: config.SocketYml
} | null
export declare function getConfigValue<Key extends keyof LocalConfig>(
  key: Key
): CResult<LocalConfig[Key]>
export declare function getConfigValueOrUndef<Key extends keyof LocalConfig>(
  key: Key
): LocalConfig[Key] | undefined
export declare function isReadOnlyConfig(): boolean
export declare function updateConfigValue<Key extends keyof LocalConfig>(
  key: keyof LocalConfig,
  value: LocalConfig[Key]
): CResult<undefined | string>
export declare function isTestingV1(): boolean
//# sourceMappingURL=config.d.mts.map
