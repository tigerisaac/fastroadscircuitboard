import { ALERT_SEVERITY } from './alert/severity.mts'
import type {
  ALERT_ACTION,
  CompactSocketArtifact,
  CompactSocketArtifactAlert
} from './alert/artifact.mts'
import type { Spinner } from '@socketsecurity/registry/lib/spinner'
export declare const ALERT_SEVERITY_COLOR: Readonly<{
  readonly critical: 'magenta'
  readonly high: 'red'
  readonly middle: 'yellow'
  readonly low: 'white'
}>
export declare const ALERT_SEVERITY_ORDER: Readonly<{
  readonly critical: 0
  readonly high: 1
  readonly middle: 2
  readonly low: 3
  readonly none: 4
}>
export type SocketPackageAlert = {
  name: string
  version: string
  key: string
  type: string
  blocked: boolean
  critical: boolean
  fixable: boolean
  raw: CompactSocketArtifactAlert
  upgradable: boolean
}
export type AlertsByPkgId = Map<string, SocketPackageAlert[]>
export type RiskCounts = {
  critical: number
  high: number
  middle: number
  low: number
}
export type AlertIncludeFilter = {
  actions?: ALERT_ACTION[] | undefined
  blocked?: boolean | undefined
  critical?: boolean | undefined
  cve?: boolean | undefined
  existing?: boolean | undefined
  unfixable?: boolean | undefined
  upgradable?: boolean | undefined
}
export type AddSocketArtifactAlertToAlertsMapOptions = {
  consolidate?: boolean | undefined
  include?: AlertIncludeFilter | undefined
  overrides?:
    | {
        [key: string]: string
      }
    | undefined
  spinner?: Spinner | undefined
}
export declare function addArtifactToAlertsMap<T extends AlertsByPkgId>(
  artifact: CompactSocketArtifact,
  alertsByPkgId: T,
  options?: AddSocketArtifactAlertToAlertsMapOptions | undefined
): Promise<T>
export type CveExcludeFilter = {
  upgradable?: boolean | undefined
}
export type CveInfoByPkgId = Map<
  string,
  Array<{
    firstPatchedVersionIdentifier: string
    vulnerableVersionRange: string
  }>
>
export type GetCveInfoByPackageOptions = {
  exclude?: CveExcludeFilter | undefined
  limit?: number | undefined
}
export declare function getCveInfoByAlertsMap(
  alertsMap: AlertsByPkgId,
  options?: GetCveInfoByPackageOptions | undefined
): CveInfoByPkgId | null
export type LogAlertsMapOptions = {
  hideAt?: `${keyof typeof ALERT_SEVERITY}` | 'none' | undefined
  output?: NodeJS.WriteStream | undefined
}
export declare function logAlertsMap(
  alertsMap: AlertsByPkgId,
  options: LogAlertsMapOptions
): void
//# sourceMappingURL=socket-package-alert.d.mts.map
