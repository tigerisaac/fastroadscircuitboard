import type { CResult } from '../types.mts'
import type {
  SocketSdkOperations,
  SocketSdkResultType,
  SocketSdkReturnType
} from '@socketsecurity/sdk'
export declare function handleUnsuccessfulApiResponse<
  T extends SocketSdkOperations
>(_name: T, error: string, cause: string, status: number): never
export declare function handleApiCall<T extends SocketSdkOperations>(
  value: Promise<SocketSdkResultType<T>>,
  fetchingDesc: string
): Promise<CResult<SocketSdkReturnType<T>['data']>>
export declare function handleApiCallNoSpinner<T extends SocketSdkOperations>(
  value: Promise<SocketSdkResultType<T>>,
  description: string
): Promise<CResult<SocketSdkReturnType<T>['data']>>
export declare function getErrorMessageForHttpStatusCode(
  code: number
): Promise<string>
export declare function getDefaultApiBaseUrl(): string | undefined
export declare function queryApi(
  path: string,
  apiToken: string
): Promise<Response>
export declare function queryApiSafeText(
  path: string,
  fetchSpinnerDesc?: string
): Promise<CResult<string>>
export declare function queryApiSafeJson<T>(
  path: string,
  fetchSpinnerDesc?: string
): Promise<CResult<T>>
//# sourceMappingURL=api.d.mts.map
