import type { MeowFlags } from '../flags.mts'
import type { Options } from 'meow'
interface CliAlias {
  description: string
  argv: readonly string[]
  hidden?: boolean | undefined
}
type CliAliases = Record<string, CliAlias>
type CliSubcommandRun = (
  argv: string[] | readonly string[],
  importMeta: ImportMeta,
  context: {
    parentName: string
  }
) => Promise<void> | void
export interface CliSubcommand {
  description: string
  hidden?: boolean | undefined
  run: CliSubcommandRun
}
export interface CliCommandConfig {
  commandName: string
  description: string
  hidden: boolean
  flags: MeowFlags
  help: (command: string, config: CliCommandConfig) => string
}
interface MeowOptions extends Options<any> {
  aliases?: CliAliases | undefined
  argv: readonly string[]
  name: string
  defaultSub?: string
}
export declare function getLastSeenCommand(): string
export declare function meowWithSubcommands(
  subcommands: Record<string, CliSubcommand>,
  options: MeowOptions
): Promise<void>
/**
 * Note: meow will exit immediately if it calls its .showHelp()
 */
export declare function meowOrExit({
  allowUnknownFlags, // commands that pass-through args need to allow this
  argv,
  config,
  importMeta,
  parentName
}: {
  allowUnknownFlags?: boolean | undefined
  argv: readonly string[]
  config: CliCommandConfig
  parentName: string
  importMeta: ImportMeta
}): import('meow').Result<MeowFlags>
export declare function emitBanner(name: string): void
export {}
//# sourceMappingURL=meow-with-subcommands.d.mts.map
