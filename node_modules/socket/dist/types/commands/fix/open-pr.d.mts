import type { components } from '@octokit/openapi-types'
import type { OctokitResponse } from '@octokit/types'
export declare function getOctokitGraphql(): import(
  '@octokit/graphql/types'
).graphql
export declare function cacheFetch<T>(
  key: string,
  fetcher: () => Promise<T>,
  ttlMs?: number | undefined
): Promise<T>
export type Pr = components['schemas']['pull-request']
export type CleanupPrsOptions = {
  workspaceName?: string | undefined
}
export declare function cleanupOpenPrs(
  owner: string,
  repo: string,
  purl: string,
  newVersion: string,
  options?: CleanupPrsOptions | undefined
): Promise<void>
export declare function enablePrAutoMerge({
  node_id: prId,
  number: prNumber
}: Pr): Promise<boolean>
export type GitHubRepoInfo = {
  owner: string
  repo: string
}
export declare function getGitHubEnvRepoInfo(): GitHubRepoInfo
export type OpenPrOptions = {
  baseBranch?: string | undefined
  cwd?: string | undefined
  workspaceName?: string | undefined
}
export declare function openPr(
  owner: string,
  repo: string,
  branch: string,
  purl: string,
  newVersion: string,
  options?: OpenPrOptions | undefined
): Promise<OctokitResponse<Pr> | null>
export declare function prExistForBranch(
  owner: string,
  repo: string,
  branch: string
): Promise<boolean>
//# sourceMappingURL=open-pr.d.mts.map
