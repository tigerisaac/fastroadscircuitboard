import type { SafeEdge } from './edge.mts'
import type { SafeNode } from './node.mts'
interface OverrideSetClass {
  children: Map<string, SafeOverrideSet>
  key: string | undefined
  keySpec: string | undefined
  name: string | undefined
  parent: SafeOverrideSet | undefined
  value: string | undefined
  version: string | undefined
  new (...args: any[]): OverrideSetClass
  get isRoot(): boolean
  get ruleset(): Map<string, SafeOverrideSet>
  ancestry(): Generator<SafeOverrideSet>
  childrenAreEqual(otherOverrideSet: SafeOverrideSet | undefined): boolean
  getEdgeRule(edge: SafeEdge): SafeOverrideSet
  getNodeRule(node: SafeNode): SafeOverrideSet
  getMatchingRule(node: SafeNode): SafeOverrideSet | null
  isEqual(otherOverrideSet: SafeOverrideSet | undefined): boolean
}
declare const OverrideSet: OverrideSetClass
export declare class SafeOverrideSet extends OverrideSet {
  static doOverrideSetsConflict(
    first: SafeOverrideSet | undefined,
    second: SafeOverrideSet | undefined
  ): boolean
  static findSpecificOverrideSet(
    first: SafeOverrideSet | undefined,
    second: SafeOverrideSet | undefined
  ): SafeOverrideSet | undefined
  childrenAreEqual(otherOverrideSet: SafeOverrideSet): boolean
  getEdgeRule(edge: SafeEdge): SafeOverrideSet
  isEqual(otherOverrideSet: SafeOverrideSet | undefined): boolean
}
export {}
//# sourceMappingURL=override-set.d.mts.map
