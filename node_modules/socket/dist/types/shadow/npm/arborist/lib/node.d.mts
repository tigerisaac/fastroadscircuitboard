import { SafeOverrideSet } from './override-set.mts'
import type { SafeEdge } from './edge.mts'
import type { Node as BaseNode, Link } from '@npmcli/arborist'
type NodeClass = Omit<
  BaseNode,
  | 'addEdgeIn'
  | 'addEdgeOut'
  | 'canDedupe'
  | 'canReplace'
  | 'canReplaceWith'
  | 'children'
  | 'deleteEdgeIn'
  | 'edgesIn'
  | 'edgesOut'
  | 'from'
  | 'hasShrinkwrap'
  | 'inDepBundle'
  | 'inShrinkwrap'
  | 'integrity'
  | 'isTop'
  | 'matches'
  | 'meta'
  | 'name'
  | 'overrides'
  | 'packageName'
  | 'parent'
  | 'recalculateOutEdgesOverrides'
  | 'resolve'
  | 'resolveParent'
  | 'root'
  | 'updateOverridesEdgeInAdded'
  | 'updateOverridesEdgeInRemoved'
  | 'version'
  | 'versions'
> & {
  name: string
  version: string
  children: Map<string, SafeNode | Link>
  edgesIn: Set<SafeEdge>
  edgesOut: Map<string, SafeEdge>
  from: SafeNode | null
  hasShrinkwrap: boolean
  inShrinkwrap: boolean | undefined
  integrity?: string | null
  isTop: boolean | undefined
  meta: BaseNode['meta'] & {
    addEdge(edge: SafeEdge): void
  }
  overrides: SafeOverrideSet | undefined
  versions: string[]
  get inDepBundle(): boolean
  get packageName(): string | null
  get parent(): SafeNode | null
  set parent(value: SafeNode | null)
  get resolveParent(): SafeNode | null
  get root(): SafeNode | null
  set root(value: SafeNode | null)
  new (...args: any): NodeClass
  addEdgeIn(edge: SafeEdge): void
  addEdgeOut(edge: SafeEdge): void
  canDedupe(preferDedupe?: boolean): boolean
  canReplace(node: SafeNode, ignorePeers?: string[]): boolean
  canReplaceWith(node: SafeNode, ignorePeers?: string[]): boolean
  deleteEdgeIn(edge: SafeEdge): void
  matches(node: SafeNode): boolean
  recalculateOutEdgesOverrides(): void
  resolve(name: string): SafeNode
  updateOverridesEdgeInAdded(
    otherOverrideSet: SafeOverrideSet | undefined
  ): boolean
  updateOverridesEdgeInRemoved(otherOverrideSet: SafeOverrideSet): boolean
}
declare const Node: NodeClass
export declare class SafeNode extends Node {
  canDedupe(preferDedupe?: boolean): boolean
  canReplaceWith(node: SafeNode, ignorePeers?: string[]): boolean
  deleteEdgeIn(edge: SafeEdge): void
  addEdgeIn(edge: SafeEdge): void
  get overridden(): boolean
  set parent(newParent: SafeNode)
  recalculateOutEdgesOverrides(): void
  set root(newRoot: SafeNode)
  updateOverridesEdgeInAdded(
    otherOverrideSet: SafeOverrideSet | undefined
  ): boolean
  updateOverridesEdgeInRemoved(otherOverrideSet: SafeOverrideSet): boolean
}
export {}
//# sourceMappingURL=node.d.mts.map
