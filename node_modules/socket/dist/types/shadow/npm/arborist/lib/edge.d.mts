import { SafeNode } from './node.mts'
import { SafeOverrideSet } from './override-set.mts'
import type { Edge as BaseEdge, DependencyProblem } from '@npmcli/arborist'
type EdgeClass = Omit<
  BaseEdge,
  | 'accept'
  | 'detach'
  | 'optional'
  | 'overrides'
  | 'peer'
  | 'peerConflicted'
  | 'rawSpec'
  | 'reload'
  | 'satisfiedBy'
  | 'spec'
  | 'to'
> & {
  optional: boolean
  overrides: SafeOverrideSet | undefined
  peer: boolean
  peerConflicted: boolean
  rawSpec: string
  get accept(): string | undefined
  get spec(): string
  get to(): SafeNode | null
  new (...args: any): EdgeClass
  detach(): void
  reload(hard?: boolean): void
  satisfiedBy(node: SafeNode): boolean
}
export type EdgeOptions = {
  type: string
  name: string
  spec: string
  from: SafeNode
  accept?: string | undefined
  overrides?: SafeOverrideSet | undefined
  to?: SafeNode | undefined
}
export type ErrorStatus = DependencyProblem | 'OK'
export type Explanation = {
  type: string
  name: string
  spec: string
  bundled: boolean
  overridden: boolean
  error: ErrorStatus | undefined
  rawSpec: string | undefined
  from: object | undefined
} | null
export declare const Edge: EdgeClass
export declare class SafeEdge extends Edge {
  #private
  constructor(options: EdgeOptions)
  get bundled(): boolean
  get error(): 'DETACHED' | 'MISSING' | 'PEER LOCAL' | 'INVALID' | null
  get from(): SafeNode | null
  get spec(): string
  get to(): SafeNode | null
  detach(): void
  explain(): {
    type: string
    name: string
    spec: string
    bundled: boolean
    overridden: boolean
    error: ErrorStatus | undefined
    rawSpec: string | undefined
    from: object | undefined
  }
  reload(hard?: boolean): void
  satisfiedBy(node: SafeNode): boolean
}
export {}
//# sourceMappingURL=edge.d.mts.map
